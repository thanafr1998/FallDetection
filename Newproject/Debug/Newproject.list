
Newproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac14  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800ada0  0800ada0  0001ada0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae08  0800ae08  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae10  0800ae10  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800ae18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  2000009c  0800aeb4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800aeb4  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c68  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f7  00000000  00000000  00039d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003e828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000249ac  00000000  00000000  0003f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012501  00000000  00000000  00064354  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccbb0  00000000  00000000  00076855  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  00143480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ad84 	.word	0x0800ad84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800ad84 	.word	0x0800ad84

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94d 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f008 f8c6 	bl	8009004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f965 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f92d 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000004 	.word	0x20000004
 8000f08:	200000d8 	.word	0x200000d8

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000d8 	.word	0x200000d8

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000004 	.word	0x20000004

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d00b      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011da:	2b11      	cmp	r3, #17
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0xfc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x308>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x30c>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x330>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	401a      	ands	r2, r3
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	429a      	cmp	r2, r3
 800150a:	d104      	bne.n	8001516 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	041a      	lsls	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001514:	e002      	b.n	800151c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b08f      	sub	sp, #60	; 0x3c
 800152c:	af0a      	add	r7, sp, #40	; 0x28
 800152e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e054      	b.n	80015e4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f007 ff95 	bl	8009484 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f004 fbaf 	bl	8005cdc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	687e      	ldr	r6, [r7, #4]
 8001586:	466d      	mov	r5, sp
 8001588:	f106 0410 	add.w	r4, r6, #16
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001598:	e885 0003 	stmia.w	r5, {r0, r1}
 800159c:	1d33      	adds	r3, r6, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f004 fb29 	bl	8005bf8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fba6 	bl	8005cfe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	687e      	ldr	r6, [r7, #4]
 80015ba:	466d      	mov	r5, sp
 80015bc:	f106 0410 	add.w	r4, r6, #16
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d0:	1d33      	adds	r3, r6, #4
 80015d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f004 fcb9 	bl	8005f4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ec <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	460b      	mov	r3, r1
 8001600:	70bb      	strb	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_HCD_HC_Init+0x28>
 8001610:	2302      	movs	r3, #2
 8001612:	e07f      	b.n	8001714 <HAL_HCD_HC_Init+0x128>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	333d      	adds	r3, #61	; 0x3d
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3338      	adds	r3, #56	; 0x38
 8001640:	787a      	ldrb	r2, [r7, #1]
 8001642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3340      	adds	r3, #64	; 0x40
 8001654:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001656:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3339      	adds	r3, #57	; 0x39
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	333f      	adds	r3, #63	; 0x3f
 800167c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800168a:	b2d8      	uxtb	r0, r3
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	333a      	adds	r3, #58	; 0x3a
 800169a:	4602      	mov	r2, r0
 800169c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800169e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da0a      	bge.n	80016bc <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	333b      	adds	r3, #59	; 0x3b
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e009      	b.n	80016d0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	333b      	adds	r3, #59	; 0x3b
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	333c      	adds	r3, #60	; 0x3c
 80016e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016e4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	787c      	ldrb	r4, [r7, #1]
 80016ec:	78ba      	ldrb	r2, [r7, #2]
 80016ee:	78f9      	ldrb	r1, [r7, #3]
 80016f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016f2:	9302      	str	r3, [sp, #8]
 80016f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4623      	mov	r3, r4
 8001702:	f004 fda5 	bl	8006250 <USB_HC_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}

0800171c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_HCD_HC_Halt+0x1e>
 8001736:	2302      	movs	r3, #2
 8001738:	e00f      	b.n	800175a <HAL_HCD_HC_Halt+0x3e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f004 ffdf 	bl	800670e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	460b      	mov	r3, r1
 8001778:	70bb      	strb	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	333b      	adds	r3, #59	; 0x3b
 800178e:	78ba      	ldrb	r2, [r7, #2]
 8001790:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	333f      	adds	r3, #63	; 0x3f
 80017a2:	787a      	ldrb	r2, [r7, #1]
 80017a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017a6:	7c3b      	ldrb	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2203      	movs	r2, #3
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e009      	b.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	f200 80d6 	bhi.w	800198a <HAL_HCD_HC_SubmitRequest+0x226>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	08001975 	.word	0x08001975
 80017ec:	08001861 	.word	0x08001861
 80017f0:	080018eb 	.word	0x080018eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f4:	7c3b      	ldrb	r3, [r7, #16]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	f040 80c9 	bne.w	800198e <HAL_HCD_HC_SubmitRequest+0x22a>
 80017fc:	78bb      	ldrb	r3, [r7, #2]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80c5 	bne.w	800198e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001804:	8b3b      	ldrh	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3351      	adds	r3, #81	; 0x51
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3351      	adds	r3, #81	; 0x51
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10a      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3342      	adds	r3, #66	; 0x42
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001848:	e0a1      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
      break;
 800185e:	e096      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d120      	bne.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3351      	adds	r3, #81	; 0x51
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10a      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3342      	adds	r3, #66	; 0x42
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001890:	e07e      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
      break;
 80018a6:	e073      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3350      	adds	r3, #80	; 0x50
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
      break;
 80018d2:	e05d      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3342      	adds	r3, #66	; 0x42
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e052      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d120      	bne.n	8001932 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3351      	adds	r3, #81	; 0x51
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	3342      	adds	r3, #66	; 0x42
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800191a:	e039      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3342      	adds	r3, #66	; 0x42
 800192c:	2202      	movs	r2, #2
 800192e:	701a      	strb	r2, [r3, #0]
      break;
 8001930:	e02e      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3350      	adds	r3, #80	; 0x50
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	3342      	adds	r3, #66	; 0x42
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
      break;
 800195c:	e018      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3342      	adds	r3, #66	; 0x42
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e00d      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
      break;
 8001988:	e002      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800198e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3344      	adds	r3, #68	; 0x44
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	8b39      	ldrh	r1, [r7, #24]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4403      	add	r3, r0
 80019b4:	3348      	adds	r3, #72	; 0x48
 80019b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	335c      	adds	r3, #92	; 0x5c
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	334c      	adds	r3, #76	; 0x4c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3339      	adds	r3, #57	; 0x39
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	335d      	adds	r3, #93	; 0x5d
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	3338      	adds	r3, #56	; 0x38
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	18d1      	adds	r1, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	f004 fd1e 	bl	8006464 <USB_HC_StartXfer>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop

08001a34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fa3b 	bl	8005ec6 <USB_GetMode>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f040 80f1 	bne.w	8001c3a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 fa1f 	bl	8005ea0 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80e7 	beq.w	8001c38 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 fa16 	bl	8005ea0 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a7e:	d104      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fa06 	bl	8005ea0 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a9e:	d104      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 f9f6 	bl	8005ea0 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 f9e6 	bl	8005ea0 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d103      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 f9d8 	bl	8005ea0 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001afa:	d117      	bne.n	8001b2c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001b0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f007 fd35 	bl	8009580 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f004 fad1 	bl	80060c4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f9b5 	bl	8005ea0 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d102      	bne.n	8001b48 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f001 f8c8 	bl	8002cd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 f9a7 	bl	8005ea0 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d106      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f007 fcf3 	bl	8009548 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2208      	movs	r2, #8
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 f996 	bl	8005ea0 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b7e:	d138      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 fdb1 	bl	80066ec <USB_HC_ReadInterrupt>
 8001b8a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e025      	b.n	8001bde <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d018      	beq.n	8001bd8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8cf 	bl	8001d68 <HCD_HC_IN_IRQHandler>
 8001bca:	e005      	b.n	8001bd8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fc5f 	bl	8002496 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3d4      	bcc.n	8001b92 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f952 	bl	8005ea0 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d101      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x1d6>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_HCD_IRQHandler+0x1d8>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d014      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 ffad 	bl	8002b80 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0210 	orr.w	r2, r2, #16
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e000      	b.n	8001c3a <HAL_HCD_IRQHandler+0x206>
      return;
 8001c38:	bf00      	nop
    }
  }
}
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_HCD_Start+0x16>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e013      	b.n	8001c7e <HAL_HCD_Start+0x3e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f829 	bl	8005cba <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fa8c 	bl	800618c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_HCD_Stop+0x16>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e00d      	b.n	8001cb8 <HAL_HCD_Stop+0x32>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 fe6b 	bl	8006984 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fa33 	bl	8006138 <USB_ResetPort>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	335c      	adds	r3, #92	; 0x5c
 8001cf8:	781b      	ldrb	r3, [r3, #0]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	334c      	adds	r3, #76	; 0x4c
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 fa75 	bl	800622c <USB_GetCurrentFrame>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fa50 	bl	80061fe <USB_GetHostSpeed>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d119      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2304      	movs	r3, #4
 8001da8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	60d3      	str	r3, [r2, #12]
 8001dca:	e095      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d109      	bne.n	8001df6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	2320      	movs	r3, #32
 8001df2:	6093      	str	r3, [r2, #8]
 8001df4:	e080      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d134      	bne.n	8001e76 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	0151      	lsls	r1, r2, #5
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	440a      	add	r2, r1
 8001e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	335d      	adds	r3, #93	; 0x5d
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2310      	movs	r3, #16
 8001e50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2308      	movs	r3, #8
 8001e62:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fc4d 	bl	800670e <USB_HC_Halt>
 8001e74:	e040      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d134      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fc28 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2310      	movs	r3, #16
 8001ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	335d      	adds	r3, #93	; 0x5d
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0e:	d122      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fbe7 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f54:	e29b      	b.n	800248e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f040 80c1 	bne.w	80020f0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01b      	beq.n	8001fae <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3348      	adds	r3, #72	; 0x48
 8001f86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0159      	lsls	r1, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f9a:	1ad1      	subs	r1, r2, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4403      	add	r3, r0
 8001faa:	334c      	adds	r3, #76	; 0x4c
 8001fac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	335d      	adds	r3, #93	; 0x5d
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	3358      	adds	r3, #88	; 0x58
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333f      	adds	r3, #63	; 0x3f
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	333f      	adds	r3, #63	; 0x3f
 800200e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002010:	2b02      	cmp	r3, #2
 8002012:	d121      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	0151      	lsls	r1, r2, #5
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	440a      	add	r2, r1
 800202a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fb65 	bl	800670e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2310      	movs	r3, #16
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e034      	b.n	80020c2 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	333f      	adds	r3, #63	; 0x3f
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d129      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	0151      	lsls	r1, r2, #5
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	440a      	add	r2, r1
 8002084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002088:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800208c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335c      	adds	r3, #92	; 0x5c
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	b2d8      	uxtb	r0, r3
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	335c      	adds	r3, #92	; 0x5c
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4601      	mov	r1, r0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f007 fa6d 	bl	800959c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3350      	adds	r3, #80	; 0x50
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2d8      	uxtb	r0, r3
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3350      	adds	r3, #80	; 0x50
 80020ea:	4602      	mov	r2, r0
 80020ec:	701a      	strb	r2, [r3, #0]
}
 80020ee:	e1ce      	b.n	800248e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	f040 80f1 	bne.w	80022ea <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f023 0302 	bic.w	r3, r3, #2
 8002126:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	335d      	adds	r3, #93	; 0x5d
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10a      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	335c      	adds	r3, #92	; 0x5c
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e0b0      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	335d      	adds	r3, #93	; 0x5d
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10a      	bne.n	8002180 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	335c      	adds	r3, #92	; 0x5c
 800217a:	2205      	movs	r2, #5
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e09a      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	335d      	adds	r3, #93	; 0x5d
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d00a      	beq.n	80021ac <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	335d      	adds	r3, #93	; 0x5d
 80021a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d156      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3358      	adds	r3, #88	; 0x58
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4403      	add	r3, r0
 80021ce:	3358      	adds	r3, #88	; 0x58
 80021d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	3358      	adds	r3, #88	; 0x58
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d914      	bls.n	8002212 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	3358      	adds	r3, #88	; 0x58
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e009      	b.n	8002226 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	335c      	adds	r3, #92	; 0x5c
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800223c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002244:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e02d      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	335d      	adds	r3, #93	; 0x5d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d122      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800229a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2302      	movs	r3, #2
 80022c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	b2d8      	uxtb	r0, r3
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	4601      	mov	r1, r0
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f007 f95a 	bl	800959c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022e8:	e0d1      	b.n	800248e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d13e      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	0151      	lsls	r1, r2, #5
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	440a      	add	r2, r1
 8002316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3358      	adds	r3, #88	; 0x58
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4403      	add	r3, r0
 8002342:	3358      	adds	r3, #88	; 0x58
 8002344:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	335d      	adds	r3, #93	; 0x5d
 8002356:	2206      	movs	r2, #6
 8002358:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f9d2 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	461a      	mov	r2, r3
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	6093      	str	r3, [r2, #8]
}
 800237c:	e087      	b.n	800248e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d17c      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	333f      	adds	r3, #63	; 0x3f
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d122      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3358      	adds	r3, #88	; 0x58
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 f990 	bl	800670e <USB_HC_Halt>
 80023ee:	e045      	b.n	800247c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002418:	2b02      	cmp	r3, #2
 800241a:	d12f      	bne.n	800247c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3358      	adds	r3, #88	; 0x58
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d121      	bne.n	800247c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	335d      	adds	r3, #93	; 0x5d
 8002448:	2203      	movs	r2, #3
 800244a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	440a      	add	r2, r1
 8002462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f004 f949 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	2310      	movs	r3, #16
 800248c:	6093      	str	r3, [r2, #8]
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d119      	bne.n	80024fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	2304      	movs	r3, #4
 80024d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024f8:	e33e      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d141      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2320      	movs	r3, #32
 8002520:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	333d      	adds	r3, #61	; 0x3d
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 831f 	bne.w	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	333d      	adds	r3, #61	; 0x3d
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	335c      	adds	r3, #92	; 0x5c
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	440a      	add	r2, r1
 8002578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f004 f8be 	bl	800670e <USB_HC_Halt>
}
 8002592:	e2f1      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d13f      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	335d      	adds	r3, #93	; 0x5d
 80025ba:	2204      	movs	r2, #4
 80025bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	333d      	adds	r3, #61	; 0x3d
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	3358      	adds	r3, #88	; 0x58
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	0151      	lsls	r1, r2, #5
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	440a      	add	r2, r1
 80025fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f87c 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	6093      	str	r3, [r2, #8]
}
 8002628:	e2a6      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002640:	d122      	bne.n	8002688 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f004 f84e 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002684:	6093      	str	r3, [r2, #8]
}
 8002686:	e277      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d135      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	3358      	adds	r3, #88	; 0x58
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 f816 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	335d      	adds	r3, #93	; 0x5d
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
}
 8002708:	e236      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d12b      	bne.n	8002778 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2308      	movs	r3, #8
 8002730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	0151      	lsls	r1, r2, #5
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	440a      	add	r2, r1
 8002748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f003 ffd6 	bl	800670e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	335d      	adds	r3, #93	; 0x5d
 8002772:	2205      	movs	r2, #5
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	e1ff      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d155      	bne.n	800283a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3358      	adds	r3, #88	; 0x58
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	335d      	adds	r3, #93	; 0x5d
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	333d      	adds	r3, #61	; 0x3d
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d114      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	333c      	adds	r3, #60	; 0x3c
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	333d      	adds	r3, #61	; 0x3d
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f003 ff74 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	461a      	mov	r2, r3
 8002834:	2310      	movs	r3, #16
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	e19e      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d12b      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	440a      	add	r2, r1
 8002866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 ff47 	bl	800670e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	335d      	adds	r3, #93	; 0x5d
 8002890:	2206      	movs	r2, #6
 8002892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	6093      	str	r3, [r2, #8]
}
 80028a6:	e167      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d135      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	0151      	lsls	r1, r2, #5
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	440a      	add	r2, r1
 80028d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 ff0f 	bl	800670e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	461a      	mov	r2, r3
 80028fe:	2310      	movs	r3, #16
 8002900:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	335d      	adds	r3, #93	; 0x5d
 8002926:	2208      	movs	r2, #8
 8002928:	701a      	strb	r2, [r3, #0]
}
 800292a:	e125      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	f040 811a 	bne.w	8002b78 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	440a      	add	r2, r1
 800295a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295e:	f023 0302 	bic.w	r3, r3, #2
 8002962:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	335d      	adds	r3, #93	; 0x5d
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d137      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	335c      	adds	r3, #92	; 0x5c
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	333f      	adds	r3, #63	; 0x3f
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d00b      	beq.n	80029bc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	333f      	adds	r3, #63	; 0x3f
 80029b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	f040 80c5 	bne.w	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	3351      	adds	r3, #81	; 0x51
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2d8      	uxtb	r0, r3
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	3351      	adds	r3, #81	; 0x51
 80029e4:	4602      	mov	r2, r0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e0ad      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	335d      	adds	r3, #93	; 0x5d
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d10a      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e097      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335d      	adds	r3, #93	; 0x5d
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d10a      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335c      	adds	r3, #92	; 0x5c
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e081      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	335d      	adds	r3, #93	; 0x5d
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d10a      	bne.n	8002a6e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	335c      	adds	r3, #92	; 0x5c
 8002a68:	2205      	movs	r2, #5
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e06b      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	335d      	adds	r3, #93	; 0x5d
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d00a      	beq.n	8002a9a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	440b      	add	r3, r1
 8002a92:	335d      	adds	r3, #93	; 0x5d
 8002a94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d155      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3358      	adds	r3, #88	; 0x58
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c59      	adds	r1, r3, #1
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4403      	add	r3, r0
 8002abc:	3358      	adds	r3, #88	; 0x58
 8002abe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3358      	adds	r3, #88	; 0x58
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d914      	bls.n	8002b00 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3358      	adds	r3, #88	; 0x58
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e009      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	335c      	adds	r3, #92	; 0x5c
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2302      	movs	r3, #2
 8002b56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4601      	mov	r1, r0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f006 fd12 	bl	800959c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b78:	bf00      	nop
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d003      	beq.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x44>
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	f000 8082 	beq.w	8002cc6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bc2:	e083      	b.n	8002ccc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d07f      	beq.n	8002cca <HCD_RXQLVL_IRQHandler+0x14a>
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3344      	adds	r3, #68	; 0x44
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d074      	beq.n	8002cca <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3344      	adds	r3, #68	; 0x44
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f003 f927 	bl	8005e4e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3344      	adds	r3, #68	; 0x44
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	18d1      	adds	r1, r2, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4403      	add	r3, r0
 8002c24:	3344      	adds	r3, #68	; 0x44
 8002c26:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	334c      	adds	r3, #76	; 0x4c
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	18d1      	adds	r1, r2, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4403      	add	r3, r0
 8002c4c:	334c      	adds	r3, #76	; 0x4c
 8002c4e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d031      	beq.n	8002cca <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c84:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3350      	adds	r3, #80	; 0x50
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	701a      	strb	r2, [r3, #0]
      break;
 8002cc4:	e001      	b.n	8002cca <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002cca:	bf00      	nop
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	1ff80000 	.word	0x1ff80000

08002cd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d113      	bne.n	8002d38 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d10a      	bne.n	8002d30 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d28:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f006 fc1a 	bl	8009564 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d147      	bne.n	8002dd2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d129      	bne.n	8002da8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d113      	bne.n	8002d84 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d66:	d106      	bne.n	8002d76 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 f9a8 	bl	80060c4 <USB_InitFSLSPClkSel>
 8002d74:	e011      	b.n	8002d9a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 f9a1 	bl	80060c4 <USB_InitFSLSPClkSel>
 8002d82:	e00a      	b.n	8002d9a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d92:	461a      	mov	r2, r3
 8002d94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d98:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f006 fc0c 	bl	80095b8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f006 fbdf 	bl	8009564 <HAL_HCD_Connect_Callback>
 8002da6:	e014      	b.n	8002dd2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f006 fc13 	bl	80095d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dc0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d103      	bne.n	8002de4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e11f      	b.n	800304a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f006 f918 	bl	8009054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f002 f856 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8002e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4a7b      	ldr	r2, [pc, #492]	; (8003054 <HAL_I2C_Init+0x25c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d807      	bhi.n	8002e7c <HAL_I2C_Init+0x84>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_I2C_Init+0x260>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bf94      	ite	ls
 8002e74:	2301      	movls	r3, #1
 8002e76:	2300      	movhi	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e006      	b.n	8002e8a <HAL_I2C_Init+0x92>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_I2C_Init+0x264>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf94      	ite	ls
 8002e84:	2301      	movls	r3, #1
 8002e86:	2300      	movhi	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0db      	b.n	800304a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a72      	ldr	r2, [pc, #456]	; (8003060 <HAL_I2C_Init+0x268>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0c9b      	lsrs	r3, r3, #18
 8002e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a64      	ldr	r2, [pc, #400]	; (8003054 <HAL_I2C_Init+0x25c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d802      	bhi.n	8002ecc <HAL_I2C_Init+0xd4>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	e009      	b.n	8002ee0 <HAL_I2C_Init+0xe8>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	4a63      	ldr	r2, [pc, #396]	; (8003064 <HAL_I2C_Init+0x26c>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	3301      	adds	r3, #1
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4956      	ldr	r1, [pc, #344]	; (8003054 <HAL_I2C_Init+0x25c>)
 8002efc:	428b      	cmp	r3, r1
 8002efe:	d80d      	bhi.n	8002f1c <HAL_I2C_Init+0x124>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e59      	subs	r1, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	bf38      	it	cc
 8002f18:	2304      	movcc	r3, #4
 8002f1a:	e04f      	b.n	8002fbc <HAL_I2C_Init+0x1c4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d111      	bne.n	8002f48 <HAL_I2C_Init+0x150>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e012      	b.n	8002f6e <HAL_I2C_Init+0x176>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	0099      	lsls	r1, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Init+0x17e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e022      	b.n	8002fbc <HAL_I2C_Init+0x1c4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <HAL_I2C_Init+0x1a4>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e58      	subs	r0, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	440b      	add	r3, r1
 8002f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	e00f      	b.n	8002fbc <HAL_I2C_Init+0x1c4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	6809      	ldr	r1, [r1, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6911      	ldr	r1, [r2, #16]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68d2      	ldr	r2, [r2, #12]
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	000186a0 	.word	0x000186a0
 8003058:	001e847f 	.word	0x001e847f
 800305c:	003d08ff 	.word	0x003d08ff
 8003060:	431bde83 	.word	0x431bde83
 8003064:	10624dd3 	.word	0x10624dd3

08003068 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003082:	f7fd ff43 	bl	8000f0c <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 80d9 	bne.w	8003248 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2319      	movs	r3, #25
 800309c:	2201      	movs	r2, #1
 800309e:	496d      	ldr	r1, [pc, #436]	; (8003254 <HAL_I2C_Mem_Write+0x1ec>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fc7b 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0cc      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Mem_Write+0x56>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0c5      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d007      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2221      	movs	r2, #33	; 0x21
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_I2C_Mem_Write+0x1f0>)
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003126:	88f8      	ldrh	r0, [r7, #6]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4603      	mov	r3, r0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fab6 	bl	80036a8 <I2C_RequestMemoryWrite>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d052      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e081      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fcfc 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b04      	cmp	r3, #4
 800315c:	d107      	bne.n	800316e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06b      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d11b      	bne.n	80031e8 <HAL_I2C_Mem_Write+0x180>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d017      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1aa      	bne.n	8003146 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fce8 	bl	8003bca <I2C_WaitOnBTFFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b04      	cmp	r3, #4
 8003206:	d107      	bne.n	8003218 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e016      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	00100002 	.word	0x00100002
 8003258:	ffff0000 	.word	0xffff0000

0800325c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7fd fe49 	bl	8000f0c <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	f040 8208 	bne.w	800369a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2319      	movs	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	497b      	ldr	r1, [pc, #492]	; (8003480 <HAL_I2C_Mem_Read+0x224>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb81 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	e1fb      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Mem_Read+0x56>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e1f4      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d007      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a5b      	ldr	r2, [pc, #364]	; (8003484 <HAL_I2C_Mem_Read+0x228>)
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331a:	88f8      	ldrh	r0, [r7, #6]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa50 	bl	80037d0 <I2C_RequestMemoryRead>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1b0      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e184      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11b      	bne.n	80033aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e164      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d11b      	bne.n	80033ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	e144      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003400:	e138      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b03      	cmp	r3, #3
 8003408:	f200 80f1 	bhi.w	80035ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	2b01      	cmp	r3, #1
 8003412:	d123      	bne.n	800345c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fc17 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e139      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
 800345a:	e10b      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	2b02      	cmp	r3, #2
 8003462:	d14e      	bne.n	8003502 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2200      	movs	r2, #0
 800346c:	4906      	ldr	r1, [pc, #24]	; (8003488 <HAL_I2C_Mem_Read+0x22c>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa94 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e10e      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
 800347e:	bf00      	nop
 8003480:	00100002 	.word	0x00100002
 8003484:	ffff0000 	.word	0xffff0000
 8003488:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003500:	e0b8      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2200      	movs	r2, #0
 800350a:	4966      	ldr	r1, [pc, #408]	; (80036a4 <HAL_I2C_Mem_Read+0x448>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fa45 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0bf      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	494f      	ldr	r1, [pc, #316]	; (80036a4 <HAL_I2C_Mem_Read+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa17 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e091      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ec:	e042      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fb2a 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e04c      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d118      	bne.n	8003674 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f aec2 	bne.w	8003402 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	00010004 	.word	0x00010004

080036a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2200      	movs	r2, #0
 80036da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f95c 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e05f      	b.n	80037c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003704:	897b      	ldrh	r3, [r7, #10]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003712:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	492c      	ldr	r1, [pc, #176]	; (80037cc <I2C_RequestMemoryWrite+0x124>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f995 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e04c      	b.n	80037c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	6a39      	ldr	r1, [r7, #32]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f9ff 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2b04      	cmp	r3, #4
 8003756:	d107      	bne.n	8003768 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e02b      	b.n	80037c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003772:	893b      	ldrh	r3, [r7, #8]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]
 800377c:	e021      	b.n	80037c2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	b29b      	uxth	r3, r3
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9d9 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e005      	b.n	80037c4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b8:	893b      	ldrh	r3, [r7, #8]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010002 	.word	0x00010002

080037d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2200      	movs	r2, #0
 8003812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f8c0 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0a9      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800384a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	4951      	ldr	r1, [pc, #324]	; (8003998 <I2C_RequestMemoryRead+0x1c8>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8f9 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e096      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	6a39      	ldr	r1, [r7, #32]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f963 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b04      	cmp	r3, #4
 800388e:	d107      	bne.n	80038a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e075      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038aa:	893b      	ldrh	r3, [r7, #8]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]
 80038b4:	e021      	b.n	80038fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	6a39      	ldr	r1, [r7, #32]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f93d 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d107      	bne.n	80038ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e04f      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	6a39      	ldr	r1, [r7, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f922 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e034      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2200      	movs	r2, #0
 800393e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f82a 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e013      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <I2C_RequestMemoryRead+0x1c8>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f863 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00010002 	.word	0x00010002

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e025      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b4:	d021      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd faa9 	bl	8000f0c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e023      	b.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	e00c      	b.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d0b6      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a58:	e051      	b.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d123      	bne.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e046      	b.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab8:	d021      	beq.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd fa27 	bl	8000f0c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e020      	b.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10c      	bne.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e00b      	b.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d18d      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b54:	e02d      	b.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f8ce 	bl	8003cf8 <I2C_IsAcknowledgeFailed>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e02d      	b.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b6c:	d021      	beq.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd f9cd 	bl	8000f0c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d1ca      	bne.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd6:	e02d      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f88d 	bl	8003cf8 <I2C_IsAcknowledgeFailed>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e02d      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bee:	d021      	beq.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fd f98c 	bl	8000f0c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e007      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d1ca      	bne.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	e042      	b.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d119      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e029      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7fd f936 	bl	8000f0c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e007      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d1b5      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d11b      	bne.n	8003d48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e128      	b.n	8003fbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a90      	ldr	r2, [pc, #576]	; (8003fc4 <HAL_I2S_Init+0x26c>)
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f005 f9ad 	bl	80090e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003da0:	f023 030f 	bic.w	r3, r3, #15
 8003da4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2202      	movs	r2, #2
 8003dac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d060      	beq.n	8003e78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e001      	b.n	8003dc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d802      	bhi.n	8003dd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f001 f9a2 	bl	8005120 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ddc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de6:	d125      	bne.n	8003e34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	e01f      	b.n	8003e52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	3305      	adds	r3, #5
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e00e      	b.n	8003e52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	3305      	adds	r3, #5
 8003e50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_I2S_Init+0x270>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e003      	b.n	8003e80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d902      	bls.n	8003e8c <HAL_I2S_Init+0x134>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2bff      	cmp	r3, #255	; 0xff
 8003e8a:	d907      	bls.n	8003e9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0210 	orr.w	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e08f      	b.n	8003fbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	ea42 0103 	orr.w	r1, r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6851      	ldr	r1, [r2, #4]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68d2      	ldr	r2, [r2, #12]
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6992      	ldr	r2, [r2, #24]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d161      	bne.n	8003fac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a38      	ldr	r2, [pc, #224]	; (8003fcc <HAL_I2S_Init+0x274>)
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a37      	ldr	r2, [pc, #220]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_I2S_Init+0x1a4>
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003efa:	e001      	b.n	8003f00 <HAL_I2S_Init+0x1a8>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	4932      	ldr	r1, [pc, #200]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2S_Init+0x1b8>
 8003f0c:	4a31      	ldr	r2, [pc, #196]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f0e:	e001      	b.n	8003f14 <HAL_I2S_Init+0x1bc>
 8003f10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_I2S_Init+0x1d4>
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f2a:	e001      	b.n	8003f30 <HAL_I2S_Init+0x1d8>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	2202      	movs	r2, #2
 8003f32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2S_Init+0x1ea>
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003f40:	e001      	b.n	8003f46 <HAL_I2S_Init+0x1ee>
 8003f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d003      	beq.n	8003f5c <HAL_I2S_Init+0x204>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	b299      	uxth	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f7e:	4303      	orrs	r3, r0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	430b      	orrs	r3, r1
 8003f84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <HAL_I2S_Init+0x278>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2S_Init+0x24c>
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_I2S_Init+0x27c>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2S_Init+0x250>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa8:	897a      	ldrh	r2, [r7, #10]
 8003faa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	080040cf 	.word	0x080040cf
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	080041e5 	.word	0x080041e5
 8003fd0:	40003800 	.word	0x40003800
 8003fd4:	40003400 	.word	0x40003400

08003fd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10e      	bne.n	8004068 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004058:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ffb8 	bl	8003fd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	b292      	uxth	r2, r2
 8004084:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff93 	bl	8003fec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d13a      	bne.n	8004160 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d109      	bne.n	8004108 <I2S_IRQHandler+0x3a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d102      	bne.n	8004108 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffb4 	bl	8004070 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d126      	bne.n	8004160 <I2S_IRQHandler+0x92>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b20      	cmp	r3, #32
 800411e:	d11f      	bne.n	8004160 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff50 	bl	8004000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d136      	bne.n	80041da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d109      	bne.n	800418a <I2S_IRQHandler+0xbc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b80      	cmp	r3, #128	; 0x80
 8004182:	d102      	bne.n	800418a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff45 	bl	8004014 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d122      	bne.n	80041da <I2S_IRQHandler+0x10c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d11b      	bne.n	80041da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff13 	bl	8004000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4aa2      	ldr	r2, [pc, #648]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041fe:	4ba2      	ldr	r3, [pc, #648]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004200:	e001      	b.n	8004206 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a9b      	ldr	r2, [pc, #620]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800421c:	4b9a      	ldr	r3, [pc, #616]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800421e:	e001      	b.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d004      	beq.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8099 	bne.w	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d107      	bne.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f925 	bl	80044a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9c8 	bl	8004600 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d13a      	bne.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d035      	beq.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7e      	ldr	r2, [pc, #504]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800428e:	4b7e      	ldr	r3, [pc, #504]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004290:	e001      	b.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4979      	ldr	r1, [pc, #484]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800429e:	428b      	cmp	r3, r1
 80042a0:	d101      	bne.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042a2:	4b79      	ldr	r3, [pc, #484]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042a4:	e001      	b.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fe88 	bl	8004000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	f040 80be 	bne.w	8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80b8 	beq.w	8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004316:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a59      	ldr	r2, [pc, #356]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004322:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004324:	e001      	b.n	800432a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4954      	ldr	r1, [pc, #336]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004332:	428b      	cmp	r3, r1
 8004334:	d101      	bne.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004336:	4b54      	ldr	r3, [pc, #336]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004338:	e001      	b.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800433a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004342:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0204 	orr.w	r2, r3, #4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fe4a 	bl	8004000 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800436c:	e084      	b.n	8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d107      	bne.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8be 	bl	8004504 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8fd 	bl	800459c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d12f      	bne.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02a      	beq.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043d2:	e001      	b.n	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4929      	ldr	r1, [pc, #164]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043e0:	428b      	cmp	r3, r1
 80043e2:	d101      	bne.n	80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043e6:	e001      	b.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0202 	orr.w	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fdfa 	bl	8004000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d131      	bne.n	800447a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02c      	beq.n	800447a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800442c:	e001      	b.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800442e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4912      	ldr	r1, [pc, #72]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800443a:	428b      	cmp	r3, r1
 800443c:	d101      	bne.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004440:	e001      	b.n	8004446 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800445a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	f043 0204 	orr.w	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fdc5 	bl	8004000 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004476:	e000      	b.n	800447a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004478:	bf00      	nop
}
 800447a:	bf00      	nop
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40003800 	.word	0x40003800
 8004488:	40003400 	.word	0x40003400

0800448c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c99      	adds	r1, r3, #2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6251      	str	r1, [r2, #36]	; 0x24
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d113      	bne.n	80044fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ffc9 	bl	800448c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	1c99      	adds	r1, r3, #2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6251      	str	r1, [r2, #36]	; 0x24
 8004516:	8819      	ldrh	r1, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <I2SEx_TxISR_I2SExt+0x90>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <I2SEx_TxISR_I2SExt+0x22>
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <I2SEx_TxISR_I2SExt+0x94>)
 8004524:	e001      	b.n	800452a <I2SEx_TxISR_I2SExt+0x26>
 8004526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452a:	460a      	mov	r2, r1
 800452c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d121      	bne.n	800458a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <I2SEx_TxISR_I2SExt+0x90>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <I2SEx_TxISR_I2SExt+0x50>
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <I2SEx_TxISR_I2SExt+0x94>)
 8004552:	e001      	b.n	8004558 <I2SEx_TxISR_I2SExt+0x54>
 8004554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	490d      	ldr	r1, [pc, #52]	; (8004594 <I2SEx_TxISR_I2SExt+0x90>)
 8004560:	428b      	cmp	r3, r1
 8004562:	d101      	bne.n	8004568 <I2SEx_TxISR_I2SExt+0x64>
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <I2SEx_TxISR_I2SExt+0x94>)
 8004566:	e001      	b.n	800456c <I2SEx_TxISR_I2SExt+0x68>
 8004568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004570:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff81 	bl	800448c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40003800 	.word	0x40003800
 8004598:	40003400 	.word	0x40003400

0800459c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68d8      	ldr	r0, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	1c99      	adds	r1, r3, #2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045b4:	b282      	uxth	r2, r0
 80045b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d113      	bne.n	80045f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ff4a 	bl	800448c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <I2SEx_RxISR_I2SExt+0x90>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <I2SEx_RxISR_I2SExt+0x16>
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <I2SEx_RxISR_I2SExt+0x94>)
 8004614:	e001      	b.n	800461a <I2SEx_RxISR_I2SExt+0x1a>
 8004616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461a:	68d8      	ldr	r0, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	1c99      	adds	r1, r3, #2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004626:	b282      	uxth	r2, r0
 8004628:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d121      	bne.n	8004686 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <I2SEx_RxISR_I2SExt+0x90>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <I2SEx_RxISR_I2SExt+0x50>
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <I2SEx_RxISR_I2SExt+0x94>)
 800464e:	e001      	b.n	8004654 <I2SEx_RxISR_I2SExt+0x54>
 8004650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <I2SEx_RxISR_I2SExt+0x90>)
 800465c:	428b      	cmp	r3, r1
 800465e:	d101      	bne.n	8004664 <I2SEx_RxISR_I2SExt+0x64>
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <I2SEx_RxISR_I2SExt+0x94>)
 8004662:	e001      	b.n	8004668 <I2SEx_RxISR_I2SExt+0x68>
 8004664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800466c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff03 	bl	800448c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40003800 	.word	0x40003800
 8004694:	40003400 	.word	0x40003400

08004698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e25b      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d075      	beq.n	80047a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b6:	4ba3      	ldr	r3, [pc, #652]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00c      	beq.n	80046dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4ba0      	ldr	r3, [pc, #640]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d112      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b9d      	ldr	r3, [pc, #628]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046da:	d10b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4b99      	ldr	r3, [pc, #612]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x108>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d157      	bne.n	80047a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e236      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x74>
 80046fe:	4b91      	ldr	r3, [pc, #580]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a90      	ldr	r2, [pc, #576]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x98>
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a8a      	ldr	r2, [pc, #552]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a87      	ldr	r2, [pc, #540]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 8004730:	4b84      	ldr	r3, [pc, #528]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a83      	ldr	r2, [pc, #524]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a80      	ldr	r2, [pc, #512]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fc fbdc 	bl	8000f0c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7fc fbd8 	bl	8000f0c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1fb      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0xc0>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fc fbc8 	bl	8000f0c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004780:	f7fc fbc4 	bl	8000f0c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1e7      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0xe8>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d11c      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d116      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1bb      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4952      	ldr	r1, [pc, #328]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	e03a      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004808:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fc fb7d 	bl	8000f0c <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004816:	f7fc fb79 	bl	8000f0c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e19c      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4940      	ldr	r1, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc fb5c 	bl	8000f0c <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004858:	f7fc fb58 	bl	8000f0c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e17b      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d030      	beq.n	80048e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_RCC_OscConfig+0x2b4>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fc fb3c 	bl	8000f0c <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004898:	f7fc fb38 	bl	8000f0c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e15b      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x200>
 80048b6:	e015      	b.n	80048e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x2b4>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fc fb25 	bl	8000f0c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fc fb21 	bl	8000f0c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e144      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a0 	beq.w	8004a32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d121      	bne.n	8004972 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fc fae7 	bl	8000f0c <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e011      	b.n	8004966 <HAL_RCC_OscConfig+0x2ce>
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	42470000 	.word	0x42470000
 800494c:	42470e80 	.word	0x42470e80
 8004950:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fc fada 	bl	8000f0c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0fd      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <HAL_RCC_OscConfig+0x4d4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x2f0>
 800497a:	4b7d      	ldr	r3, [pc, #500]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	4a7c      	ldr	r2, [pc, #496]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6713      	str	r3, [r2, #112]	; 0x70
 8004986:	e01c      	b.n	80049c2 <HAL_RCC_OscConfig+0x32a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x312>
 8004990:	4b77      	ldr	r3, [pc, #476]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a76      	ldr	r2, [pc, #472]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	4b74      	ldr	r3, [pc, #464]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a73      	ldr	r2, [pc, #460]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e00b      	b.n	80049c2 <HAL_RCC_OscConfig+0x32a>
 80049aa:	4b71      	ldr	r3, [pc, #452]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a70      	ldr	r2, [pc, #448]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	4b6e      	ldr	r3, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a6d      	ldr	r2, [pc, #436]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fc fa9f 	bl	8000f0c <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fc fa9b 	bl	8000f0c <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0bc      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCC_OscConfig+0x33a>
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fc fa89 	bl	8000f0c <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc fa85 	bl	8000f0c <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0a6      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4b56      	ldr	r3, [pc, #344]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b52      	ldr	r3, [pc, #328]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	4a51      	ldr	r2, [pc, #324]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8092 	beq.w	8004b60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3c:	4b4c      	ldr	r3, [pc, #304]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d05c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d141      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <HAL_RCC_OscConfig+0x4dc>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fc fa59 	bl	8000f0c <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fc fa55 	bl	8000f0c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e078      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a70:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	019b      	lsls	r3, r3, #6
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	3b01      	subs	r3, #1
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	4933      	ldr	r1, [pc, #204]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_RCC_OscConfig+0x4dc>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fc fa2e 	bl	8000f0c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fc fa2a 	bl	8000f0c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e04d      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x41c>
 8004ad2:	e045      	b.n	8004b60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_OscConfig+0x4dc>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fc fa17 	bl	8000f0c <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fc fa13 	bl	8000f0c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e036      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x44a>
 8004b00:	e02e      	b.n	8004b60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e029      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d11c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d115      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10d      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40007000 	.word	0x40007000
 8004b70:	40023800 	.word	0x40023800
 8004b74:	42470060 	.word	0x42470060

08004b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0cc      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b68      	ldr	r3, [pc, #416]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d90c      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b8      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be4:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	494d      	ldr	r1, [pc, #308]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d044      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d119      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b3b      	ldr	r3, [pc, #236]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e067      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c56:	4b37      	ldr	r3, [pc, #220]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4934      	ldr	r1, [pc, #208]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fc f950 	bl	8000f0c <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fc f94c 	bl	8000f0c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e04f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 020c 	and.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1eb      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d20c      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e032      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4916      	ldr	r1, [pc, #88]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	490e      	ldr	r1, [pc, #56]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cfe:	f000 f821 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004d02:	4601      	mov	r1, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	5cd3      	ldrb	r3, [r2, r3]
 8004d12:	fa21 f303 	lsr.w	r3, r1, r3
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc f8b0 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023c00 	.word	0x40023c00
 8004d34:	40023800 	.word	0x40023800
 8004d38:	0800ada4 	.word	0x0800ada4
 8004d3c:	20000030 	.word	0x20000030
 8004d40:	20000000 	.word	0x20000000

08004d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	2300      	movs	r3, #0
 8004d54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d5a:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d007      	beq.n	8004d76 <HAL_RCC_GetSysClockFreq+0x32>
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d008      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x38>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 80b4 	bne.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b5e      	ldr	r3, [pc, #376]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d72:	60bb      	str	r3, [r7, #8]
       break;
 8004d74:	e0b3      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d76:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d78:	60bb      	str	r3, [r7, #8]
      break;
 8004d7a:	e0b0      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d86:	4b58      	ldr	r3, [pc, #352]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d04a      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d92:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	f04f 0400 	mov.w	r4, #0
 8004d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	ea03 0501 	and.w	r5, r3, r1
 8004da8:	ea04 0602 	and.w	r6, r4, r2
 8004dac:	4629      	mov	r1, r5
 8004dae:	4632      	mov	r2, r6
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	f04f 0400 	mov.w	r4, #0
 8004db8:	0154      	lsls	r4, r2, #5
 8004dba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dbe:	014b      	lsls	r3, r1, #5
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	1b49      	subs	r1, r1, r5
 8004dc6:	eb62 0206 	sbc.w	r2, r2, r6
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	f04f 0400 	mov.w	r4, #0
 8004dd2:	0194      	lsls	r4, r2, #6
 8004dd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dd8:	018b      	lsls	r3, r1, #6
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	eb64 0402 	sbc.w	r4, r4, r2
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	00e2      	lsls	r2, r4, #3
 8004dea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dee:	00d9      	lsls	r1, r3, #3
 8004df0:	460b      	mov	r3, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	195b      	adds	r3, r3, r5
 8004df6:	eb44 0406 	adc.w	r4, r4, r6
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	0262      	lsls	r2, r4, #9
 8004e04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e08:	0259      	lsls	r1, r3, #9
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	4621      	mov	r1, r4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	f7fb fe90 	bl	8000b40 <__aeabi_uldivmod>
 8004e20:	4603      	mov	r3, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e049      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	099b      	lsrs	r3, r3, #6
 8004e2e:	f04f 0400 	mov.w	r4, #0
 8004e32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	ea03 0501 	and.w	r5, r3, r1
 8004e3e:	ea04 0602 	and.w	r6, r4, r2
 8004e42:	4629      	mov	r1, r5
 8004e44:	4632      	mov	r2, r6
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	f04f 0400 	mov.w	r4, #0
 8004e4e:	0154      	lsls	r4, r2, #5
 8004e50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e54:	014b      	lsls	r3, r1, #5
 8004e56:	4619      	mov	r1, r3
 8004e58:	4622      	mov	r2, r4
 8004e5a:	1b49      	subs	r1, r1, r5
 8004e5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f04f 0400 	mov.w	r4, #0
 8004e68:	0194      	lsls	r4, r2, #6
 8004e6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e6e:	018b      	lsls	r3, r1, #6
 8004e70:	1a5b      	subs	r3, r3, r1
 8004e72:	eb64 0402 	sbc.w	r4, r4, r2
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	00e2      	lsls	r2, r4, #3
 8004e80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e84:	00d9      	lsls	r1, r3, #3
 8004e86:	460b      	mov	r3, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	195b      	adds	r3, r3, r5
 8004e8c:	eb44 0406 	adc.w	r4, r4, r6
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	02a2      	lsls	r2, r4, #10
 8004e9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e9e:	0299      	lsls	r1, r3, #10
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	f7fb fe45 	bl	8000b40 <__aeabi_uldivmod>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	60bb      	str	r3, [r7, #8]
      break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004eda:	60bb      	str	r3, [r7, #8]
      break;
 8004edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ede:	68bb      	ldr	r3, [r7, #8]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	007a1200 	.word	0x007a1200

08004ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000030 	.word	0x20000030

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f10:	f7ff fff0 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0a9b      	lsrs	r3, r3, #10
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800adb4 	.word	0x0800adb4

08004f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f38:	f7ff ffdc 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f3c:	4601      	mov	r1, r0
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	0b5b      	lsrs	r3, r3, #13
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40023800 	.word	0x40023800
 8004f58:	0800adb4 	.word	0x0800adb4

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d035      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f84:	4b62      	ldr	r3, [pc, #392]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f8a:	f7fb ffbf 	bl	8000f0c <HAL_GetTick>
 8004f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f92:	f7fb ffbb 	bl	8000f0c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0b0      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	019a      	lsls	r2, r3, #6
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	071b      	lsls	r3, r3, #28
 8004fbc:	4955      	ldr	r1, [pc, #340]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fc4:	4b52      	ldr	r3, [pc, #328]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fb ff9f 	bl	8000f0c <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fb ff9b 	bl	8000f0c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e090      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe4:	4b4b      	ldr	r3, [pc, #300]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8083 	beq.w	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	4b44      	ldr	r3, [pc, #272]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	4a43      	ldr	r2, [pc, #268]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	; 0x40
 800500e:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800501a:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3e      	ldr	r2, [pc, #248]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005026:	f7fb ff71 	bl	8000f0c <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fb ff6d 	bl	8000f0c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e062      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005040:	4b35      	ldr	r3, [pc, #212]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504c:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d028      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800506a:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005074:	4b29      	ldr	r3, [pc, #164]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800507a:	4b28      	ldr	r3, [pc, #160]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005080:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d114      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005092:	f7fb ff3b 	bl	8000f0c <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005098:	e00a      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fb ff37 	bl	8000f0c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e02a      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b0:	4b18      	ldr	r3, [pc, #96]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ee      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c8:	d10d      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	490d      	ldr	r1, [pc, #52]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
 80050e4:	e005      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050f0:	6093      	str	r3, [r2, #8]
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fe:	4905      	ldr	r1, [pc, #20]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	42470068 	.word	0x42470068
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470e40 	.word	0x42470e40

08005120 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d13d      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005146:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12f      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005152:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005154:	617b      	str	r3, [r7, #20]
          break;
 8005156:	e02f      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005164:	d108      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516e:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e007      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518e:	099b      	lsrs	r3, r3, #6
 8005190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	0f1b      	lsrs	r3, r3, #28
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	617b      	str	r3, [r7, #20]
          break;
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
          break;
 80051b6:	bf00      	nop
        }
      }
      break;
 80051b8:	bf00      	nop
    }
  }
  return frequency;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40023800 	.word	0x40023800
 80051cc:	00bb8000 	.word	0x00bb8000
 80051d0:	007a1200 	.word	0x007a1200
 80051d4:	00f42400 	.word	0x00f42400

080051d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e056      	b.n	8005298 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f003 ffd5 	bl	80091b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005220:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	ea42 0103 	orr.w	r1, r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0104 	and.w	r1, r3, #4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e03f      	b.n	8005332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f003 ffbc 	bl	8009244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f90b 	bl	8005500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af02      	add	r7, sp, #8
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	f040 8083 	bne.w	8005462 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_UART_Transmit+0x2e>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e07b      	b.n	8005464 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Transmit+0x40>
 8005376:	2302      	movs	r3, #2
 8005378:	e074      	b.n	8005464 <HAL_UART_Transmit+0x12a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2221      	movs	r2, #33	; 0x21
 800538c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005390:	f7fb fdbc 	bl	8000f0c <HAL_GetTick>
 8005394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053aa:	e042      	b.n	8005432 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d122      	bne.n	800540a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f84c 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e042      	b.n	8005464 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3302      	adds	r3, #2
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	e017      	b.n	8005432 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3301      	adds	r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	e013      	b.n	8005432 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f829 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e01f      	b.n	8005464 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	60ba      	str	r2, [r7, #8]
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1b7      	bne.n	80053ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f810 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e006      	b.n	8005464 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005462:	2302      	movs	r3, #2
  }
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e02c      	b.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005484:	d028      	beq.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 800548c:	f7fb fd3e 	bl	8000f0c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	429a      	cmp	r2, r3
 800549a:	d21d      	bcs.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e00f      	b.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d0c3      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005542:	f023 030c 	bic.w	r3, r3, #12
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	430b      	orrs	r3, r1
 800554e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556e:	f040 818b 	bne.w	8005888 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4ac1      	ldr	r2, [pc, #772]	; (800587c <UART_SetConfig+0x37c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d005      	beq.n	8005588 <UART_SetConfig+0x88>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4abf      	ldr	r2, [pc, #764]	; (8005880 <UART_SetConfig+0x380>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f040 80bd 	bne.w	8005702 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7ff fcd4 	bl	8004f34 <HAL_RCC_GetPCLK2Freq>
 800558c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	461d      	mov	r5, r3
 8005592:	f04f 0600 	mov.w	r6, #0
 8005596:	46a8      	mov	r8, r5
 8005598:	46b1      	mov	r9, r6
 800559a:	eb18 0308 	adds.w	r3, r8, r8
 800559e:	eb49 0409 	adc.w	r4, r9, r9
 80055a2:	4698      	mov	r8, r3
 80055a4:	46a1      	mov	r9, r4
 80055a6:	eb18 0805 	adds.w	r8, r8, r5
 80055aa:	eb49 0906 	adc.w	r9, r9, r6
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055c2:	4688      	mov	r8, r1
 80055c4:	4691      	mov	r9, r2
 80055c6:	eb18 0005 	adds.w	r0, r8, r5
 80055ca:	eb49 0106 	adc.w	r1, r9, r6
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	461d      	mov	r5, r3
 80055d4:	f04f 0600 	mov.w	r6, #0
 80055d8:	196b      	adds	r3, r5, r5
 80055da:	eb46 0406 	adc.w	r4, r6, r6
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	f7fb faad 	bl	8000b40 <__aeabi_uldivmod>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	461a      	mov	r2, r3
 80055ec:	4ba5      	ldr	r3, [pc, #660]	; (8005884 <UART_SetConfig+0x384>)
 80055ee:	fba3 2302 	umull	r2, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	461d      	mov	r5, r3
 80055fc:	f04f 0600 	mov.w	r6, #0
 8005600:	46a9      	mov	r9, r5
 8005602:	46b2      	mov	sl, r6
 8005604:	eb19 0309 	adds.w	r3, r9, r9
 8005608:	eb4a 040a 	adc.w	r4, sl, sl
 800560c:	4699      	mov	r9, r3
 800560e:	46a2      	mov	sl, r4
 8005610:	eb19 0905 	adds.w	r9, r9, r5
 8005614:	eb4a 0a06 	adc.w	sl, sl, r6
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800562c:	4689      	mov	r9, r1
 800562e:	4692      	mov	sl, r2
 8005630:	eb19 0005 	adds.w	r0, r9, r5
 8005634:	eb4a 0106 	adc.w	r1, sl, r6
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	461d      	mov	r5, r3
 800563e:	f04f 0600 	mov.w	r6, #0
 8005642:	196b      	adds	r3, r5, r5
 8005644:	eb46 0406 	adc.w	r4, r6, r6
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	f7fb fa78 	bl	8000b40 <__aeabi_uldivmod>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	461a      	mov	r2, r3
 8005656:	4b8b      	ldr	r3, [pc, #556]	; (8005884 <UART_SetConfig+0x384>)
 8005658:	fba3 1302 	umull	r1, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	2164      	movs	r1, #100	; 0x64
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	3332      	adds	r3, #50	; 0x32
 800566a:	4a86      	ldr	r2, [pc, #536]	; (8005884 <UART_SetConfig+0x384>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005678:	4498      	add	r8, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	461d      	mov	r5, r3
 800567e:	f04f 0600 	mov.w	r6, #0
 8005682:	46a9      	mov	r9, r5
 8005684:	46b2      	mov	sl, r6
 8005686:	eb19 0309 	adds.w	r3, r9, r9
 800568a:	eb4a 040a 	adc.w	r4, sl, sl
 800568e:	4699      	mov	r9, r3
 8005690:	46a2      	mov	sl, r4
 8005692:	eb19 0905 	adds.w	r9, r9, r5
 8005696:	eb4a 0a06 	adc.w	sl, sl, r6
 800569a:	f04f 0100 	mov.w	r1, #0
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ae:	4689      	mov	r9, r1
 80056b0:	4692      	mov	sl, r2
 80056b2:	eb19 0005 	adds.w	r0, r9, r5
 80056b6:	eb4a 0106 	adc.w	r1, sl, r6
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	461d      	mov	r5, r3
 80056c0:	f04f 0600 	mov.w	r6, #0
 80056c4:	196b      	adds	r3, r5, r5
 80056c6:	eb46 0406 	adc.w	r4, r6, r6
 80056ca:	461a      	mov	r2, r3
 80056cc:	4623      	mov	r3, r4
 80056ce:	f7fb fa37 	bl	8000b40 <__aeabi_uldivmod>
 80056d2:	4603      	mov	r3, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	461a      	mov	r2, r3
 80056d8:	4b6a      	ldr	r3, [pc, #424]	; (8005884 <UART_SetConfig+0x384>)
 80056da:	fba3 1302 	umull	r1, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2164      	movs	r1, #100	; 0x64
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	3332      	adds	r3, #50	; 0x32
 80056ec:	4a65      	ldr	r2, [pc, #404]	; (8005884 <UART_SetConfig+0x384>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	f003 0207 	and.w	r2, r3, #7
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4442      	add	r2, r8
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	e26f      	b.n	8005be2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005702:	f7ff fc03 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8005706:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	461d      	mov	r5, r3
 800570c:	f04f 0600 	mov.w	r6, #0
 8005710:	46a8      	mov	r8, r5
 8005712:	46b1      	mov	r9, r6
 8005714:	eb18 0308 	adds.w	r3, r8, r8
 8005718:	eb49 0409 	adc.w	r4, r9, r9
 800571c:	4698      	mov	r8, r3
 800571e:	46a1      	mov	r9, r4
 8005720:	eb18 0805 	adds.w	r8, r8, r5
 8005724:	eb49 0906 	adc.w	r9, r9, r6
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005734:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005738:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800573c:	4688      	mov	r8, r1
 800573e:	4691      	mov	r9, r2
 8005740:	eb18 0005 	adds.w	r0, r8, r5
 8005744:	eb49 0106 	adc.w	r1, r9, r6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	461d      	mov	r5, r3
 800574e:	f04f 0600 	mov.w	r6, #0
 8005752:	196b      	adds	r3, r5, r5
 8005754:	eb46 0406 	adc.w	r4, r6, r6
 8005758:	461a      	mov	r2, r3
 800575a:	4623      	mov	r3, r4
 800575c:	f7fb f9f0 	bl	8000b40 <__aeabi_uldivmod>
 8005760:	4603      	mov	r3, r0
 8005762:	460c      	mov	r4, r1
 8005764:	461a      	mov	r2, r3
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <UART_SetConfig+0x384>)
 8005768:	fba3 2302 	umull	r2, r3, r3, r2
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	461d      	mov	r5, r3
 8005776:	f04f 0600 	mov.w	r6, #0
 800577a:	46a9      	mov	r9, r5
 800577c:	46b2      	mov	sl, r6
 800577e:	eb19 0309 	adds.w	r3, r9, r9
 8005782:	eb4a 040a 	adc.w	r4, sl, sl
 8005786:	4699      	mov	r9, r3
 8005788:	46a2      	mov	sl, r4
 800578a:	eb19 0905 	adds.w	r9, r9, r5
 800578e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800579e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057a6:	4689      	mov	r9, r1
 80057a8:	4692      	mov	sl, r2
 80057aa:	eb19 0005 	adds.w	r0, r9, r5
 80057ae:	eb4a 0106 	adc.w	r1, sl, r6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	461d      	mov	r5, r3
 80057b8:	f04f 0600 	mov.w	r6, #0
 80057bc:	196b      	adds	r3, r5, r5
 80057be:	eb46 0406 	adc.w	r4, r6, r6
 80057c2:	461a      	mov	r2, r3
 80057c4:	4623      	mov	r3, r4
 80057c6:	f7fb f9bb 	bl	8000b40 <__aeabi_uldivmod>
 80057ca:	4603      	mov	r3, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	461a      	mov	r2, r3
 80057d0:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <UART_SetConfig+0x384>)
 80057d2:	fba3 1302 	umull	r1, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2164      	movs	r1, #100	; 0x64
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	3332      	adds	r3, #50	; 0x32
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <UART_SetConfig+0x384>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f2:	4498      	add	r8, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	461d      	mov	r5, r3
 80057f8:	f04f 0600 	mov.w	r6, #0
 80057fc:	46a9      	mov	r9, r5
 80057fe:	46b2      	mov	sl, r6
 8005800:	eb19 0309 	adds.w	r3, r9, r9
 8005804:	eb4a 040a 	adc.w	r4, sl, sl
 8005808:	4699      	mov	r9, r3
 800580a:	46a2      	mov	sl, r4
 800580c:	eb19 0905 	adds.w	r9, r9, r5
 8005810:	eb4a 0a06 	adc.w	sl, sl, r6
 8005814:	f04f 0100 	mov.w	r1, #0
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005828:	4689      	mov	r9, r1
 800582a:	4692      	mov	sl, r2
 800582c:	eb19 0005 	adds.w	r0, r9, r5
 8005830:	eb4a 0106 	adc.w	r1, sl, r6
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	461d      	mov	r5, r3
 800583a:	f04f 0600 	mov.w	r6, #0
 800583e:	196b      	adds	r3, r5, r5
 8005840:	eb46 0406 	adc.w	r4, r6, r6
 8005844:	461a      	mov	r2, r3
 8005846:	4623      	mov	r3, r4
 8005848:	f7fb f97a 	bl	8000b40 <__aeabi_uldivmod>
 800584c:	4603      	mov	r3, r0
 800584e:	460c      	mov	r4, r1
 8005850:	461a      	mov	r2, r3
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <UART_SetConfig+0x384>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	; 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	3332      	adds	r3, #50	; 0x32
 8005866:	4a07      	ldr	r2, [pc, #28]	; (8005884 <UART_SetConfig+0x384>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 0207 	and.w	r2, r3, #7
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4442      	add	r2, r8
 8005878:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800587a:	e1b2      	b.n	8005be2 <UART_SetConfig+0x6e2>
 800587c:	40011000 	.word	0x40011000
 8005880:	40011400 	.word	0x40011400
 8005884:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4ad7      	ldr	r2, [pc, #860]	; (8005bec <UART_SetConfig+0x6ec>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d005      	beq.n	800589e <UART_SetConfig+0x39e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4ad6      	ldr	r2, [pc, #856]	; (8005bf0 <UART_SetConfig+0x6f0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	f040 80d1 	bne.w	8005a40 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800589e:	f7ff fb49 	bl	8004f34 <HAL_RCC_GetPCLK2Freq>
 80058a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	469a      	mov	sl, r3
 80058a8:	f04f 0b00 	mov.w	fp, #0
 80058ac:	46d0      	mov	r8, sl
 80058ae:	46d9      	mov	r9, fp
 80058b0:	eb18 0308 	adds.w	r3, r8, r8
 80058b4:	eb49 0409 	adc.w	r4, r9, r9
 80058b8:	4698      	mov	r8, r3
 80058ba:	46a1      	mov	r9, r4
 80058bc:	eb18 080a 	adds.w	r8, r8, sl
 80058c0:	eb49 090b 	adc.w	r9, r9, fp
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058d8:	4688      	mov	r8, r1
 80058da:	4691      	mov	r9, r2
 80058dc:	eb1a 0508 	adds.w	r5, sl, r8
 80058e0:	eb4b 0609 	adc.w	r6, fp, r9
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4619      	mov	r1, r3
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	f04f 0400 	mov.w	r4, #0
 80058f6:	0094      	lsls	r4, r2, #2
 80058f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058fc:	008b      	lsls	r3, r1, #2
 80058fe:	461a      	mov	r2, r3
 8005900:	4623      	mov	r3, r4
 8005902:	4628      	mov	r0, r5
 8005904:	4631      	mov	r1, r6
 8005906:	f7fb f91b 	bl	8000b40 <__aeabi_uldivmod>
 800590a:	4603      	mov	r3, r0
 800590c:	460c      	mov	r4, r1
 800590e:	461a      	mov	r2, r3
 8005910:	4bb8      	ldr	r3, [pc, #736]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005912:	fba3 2302 	umull	r2, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	469b      	mov	fp, r3
 8005920:	f04f 0c00 	mov.w	ip, #0
 8005924:	46d9      	mov	r9, fp
 8005926:	46e2      	mov	sl, ip
 8005928:	eb19 0309 	adds.w	r3, r9, r9
 800592c:	eb4a 040a 	adc.w	r4, sl, sl
 8005930:	4699      	mov	r9, r3
 8005932:	46a2      	mov	sl, r4
 8005934:	eb19 090b 	adds.w	r9, r9, fp
 8005938:	eb4a 0a0c 	adc.w	sl, sl, ip
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800594c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005950:	4689      	mov	r9, r1
 8005952:	4692      	mov	sl, r2
 8005954:	eb1b 0509 	adds.w	r5, fp, r9
 8005958:	eb4c 060a 	adc.w	r6, ip, sl
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4619      	mov	r1, r3
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	0094      	lsls	r4, r2, #2
 8005970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005974:	008b      	lsls	r3, r1, #2
 8005976:	461a      	mov	r2, r3
 8005978:	4623      	mov	r3, r4
 800597a:	4628      	mov	r0, r5
 800597c:	4631      	mov	r1, r6
 800597e:	f7fb f8df 	bl	8000b40 <__aeabi_uldivmod>
 8005982:	4603      	mov	r3, r0
 8005984:	460c      	mov	r4, r1
 8005986:	461a      	mov	r2, r3
 8005988:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <UART_SetConfig+0x6f4>)
 800598a:	fba3 1302 	umull	r1, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2164      	movs	r1, #100	; 0x64
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	3332      	adds	r3, #50	; 0x32
 800599c:	4a95      	ldr	r2, [pc, #596]	; (8005bf4 <UART_SetConfig+0x6f4>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059a8:	4498      	add	r8, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	469b      	mov	fp, r3
 80059ae:	f04f 0c00 	mov.w	ip, #0
 80059b2:	46d9      	mov	r9, fp
 80059b4:	46e2      	mov	sl, ip
 80059b6:	eb19 0309 	adds.w	r3, r9, r9
 80059ba:	eb4a 040a 	adc.w	r4, sl, sl
 80059be:	4699      	mov	r9, r3
 80059c0:	46a2      	mov	sl, r4
 80059c2:	eb19 090b 	adds.w	r9, r9, fp
 80059c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059de:	4689      	mov	r9, r1
 80059e0:	4692      	mov	sl, r2
 80059e2:	eb1b 0509 	adds.w	r5, fp, r9
 80059e6:	eb4c 060a 	adc.w	r6, ip, sl
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4619      	mov	r1, r3
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	0094      	lsls	r4, r2, #2
 80059fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a02:	008b      	lsls	r3, r1, #2
 8005a04:	461a      	mov	r2, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	f7fb f898 	bl	8000b40 <__aeabi_uldivmod>
 8005a10:	4603      	mov	r3, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b77      	ldr	r3, [pc, #476]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a72      	ldr	r2, [pc, #456]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4442      	add	r2, r8
 8005a3c:	609a      	str	r2, [r3, #8]
 8005a3e:	e0d0      	b.n	8005be2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7ff fa64 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8005a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	469a      	mov	sl, r3
 8005a4a:	f04f 0b00 	mov.w	fp, #0
 8005a4e:	46d0      	mov	r8, sl
 8005a50:	46d9      	mov	r9, fp
 8005a52:	eb18 0308 	adds.w	r3, r8, r8
 8005a56:	eb49 0409 	adc.w	r4, r9, r9
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	46a1      	mov	r9, r4
 8005a5e:	eb18 080a 	adds.w	r8, r8, sl
 8005a62:	eb49 090b 	adc.w	r9, r9, fp
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a7a:	4688      	mov	r8, r1
 8005a7c:	4691      	mov	r9, r2
 8005a7e:	eb1a 0508 	adds.w	r5, sl, r8
 8005a82:	eb4b 0609 	adc.w	r6, fp, r9
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	0094      	lsls	r4, r2, #2
 8005a9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	f7fb f84a 	bl	8000b40 <__aeabi_uldivmod>
 8005aac:	4603      	mov	r3, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	469b      	mov	fp, r3
 8005ac2:	f04f 0c00 	mov.w	ip, #0
 8005ac6:	46d9      	mov	r9, fp
 8005ac8:	46e2      	mov	sl, ip
 8005aca:	eb19 0309 	adds.w	r3, r9, r9
 8005ace:	eb4a 040a 	adc.w	r4, sl, sl
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	eb19 090b 	adds.w	r9, r9, fp
 8005ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005af2:	4689      	mov	r9, r1
 8005af4:	4692      	mov	sl, r2
 8005af6:	eb1b 0509 	adds.w	r5, fp, r9
 8005afa:	eb4c 060a 	adc.w	r6, ip, sl
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4619      	mov	r1, r3
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f04f 0400 	mov.w	r4, #0
 8005b10:	0094      	lsls	r4, r2, #2
 8005b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b16:	008b      	lsls	r3, r1, #2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	4631      	mov	r1, r6
 8005b20:	f7fb f80e 	bl	8000b40 <__aeabi_uldivmod>
 8005b24:	4603      	mov	r3, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	; 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4a:	4498      	add	r8, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	469b      	mov	fp, r3
 8005b50:	f04f 0c00 	mov.w	ip, #0
 8005b54:	46d9      	mov	r9, fp
 8005b56:	46e2      	mov	sl, ip
 8005b58:	eb19 0309 	adds.w	r3, r9, r9
 8005b5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b60:	4699      	mov	r9, r3
 8005b62:	46a2      	mov	sl, r4
 8005b64:	eb19 090b 	adds.w	r9, r9, fp
 8005b68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b80:	4689      	mov	r9, r1
 8005b82:	4692      	mov	sl, r2
 8005b84:	eb1b 0509 	adds.w	r5, fp, r9
 8005b88:	eb4c 060a 	adc.w	r6, ip, sl
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4619      	mov	r1, r3
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	f04f 0400 	mov.w	r4, #0
 8005b9e:	0094      	lsls	r4, r2, #2
 8005ba0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba4:	008b      	lsls	r3, r1, #2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4623      	mov	r3, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	4631      	mov	r1, r6
 8005bae:	f7fa ffc7 	bl	8000b40 <__aeabi_uldivmod>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005bba:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2164      	movs	r1, #100	; 0x64
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <UART_SetConfig+0x6f4>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4442      	add	r2, r8
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	e7ff      	b.n	8005be2 <UART_SetConfig+0x6e2>
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	40011000 	.word	0x40011000
 8005bf0:	40011400 	.word	0x40011400
 8005bf4:	51eb851f 	.word	0x51eb851f

08005bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	f107 001c 	add.w	r0, r7, #28
 8005c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d122      	bne.n	8005c56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f94a 	bl	8005ee4 <USB_CoreReset>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	e01a      	b.n	8005c8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f93e 	bl	8005ee4 <USB_CoreReset>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c7e:	e005      	b.n	8005c8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10b      	bne.n	8005caa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f043 0206 	orr.w	r2, r3, #6
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb6:	b004      	add	sp, #16
 8005cb8:	4770      	bx	lr

08005cba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 0201 	bic.w	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d106      	bne.n	8005d2a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e00b      	b.n	8005d42 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e001      	b.n	8005d42 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e003      	b.n	8005d4a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d42:	2032      	movs	r0, #50	; 0x32
 8005d44:	f7fb f8ee 	bl	8000f24 <HAL_Delay>

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <USB_FlushTxFifo+0x48>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d0f0      	beq.n	8005d6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	00030d40 	.word	0x00030d40

08005da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2210      	movs	r2, #16
 8005db0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <USB_FlushRxFifo+0x40>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e006      	b.n	8005dd2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d0f0      	beq.n	8005db2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	00030d40 	.word	0x00030d40

08005de4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	; 0x24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	71fb      	strb	r3, [r7, #7]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11a      	bne.n	8005e40 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e0a:	88bb      	ldrh	r3, [r7, #4]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e00f      	b.n	8005e38 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	031a      	lsls	r2, r3, #12
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e24:	461a      	mov	r2, r3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	3301      	adds	r3, #1
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3eb      	bcc.n	8005e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b089      	sub	sp, #36	; 0x24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	3303      	adds	r3, #3
 8005e68:	089b      	lsrs	r3, r3, #2
 8005e6a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e00b      	b.n	8005e8a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3304      	adds	r3, #4
 8005e82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	3301      	adds	r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d3ef      	bcc.n	8005e72 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e92:	69fb      	ldr	r3, [r7, #28]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3724      	adds	r7, #36	; 0x24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <USB_CoreReset+0x64>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e01b      	b.n	8005f3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	daf2      	bge.n	8005ef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <USB_CoreReset+0x64>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e006      	b.n	8005f3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d0f0      	beq.n	8005f1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	00030d40 	.word	0x00030d40

08005f4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	f107 001c 	add.w	r0, r7, #28
 8005f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d10a      	bne.n	8005fba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e014      	b.n	8005fe4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fc8:	f023 0304 	bic.w	r3, r3, #4
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e009      	b.n	8005fe4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005fe4:	2110      	movs	r1, #16
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff feb4 	bl	8005d54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fed7 	bl	8005da0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e015      	b.n	8006024 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	461a      	mov	r2, r3
 8006006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800600a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3301      	adds	r3, #1
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	429a      	cmp	r2, r3
 800602a:	d3e5      	bcc.n	8005ff8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800602c:	2101      	movs	r1, #1
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8ac 	bl	800618c <USB_DriveVbus>

  HAL_Delay(200U);
 8006034:	20c8      	movs	r0, #200	; 0xc8
 8006036:	f7fa ff75 	bl	8000f24 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006046:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <USB_HostInit+0x164>)
 8006060:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <USB_HostInit+0x168>)
 8006066:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800606a:	e009      	b.n	8006080 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <USB_HostInit+0x16c>)
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a10      	ldr	r2, [pc, #64]	; (80060bc <USB_HostInit+0x170>)
 800607c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 0210 	orr.w	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <USB_HostInit+0x174>)
 8006098:	4313      	orrs	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060aa:	b004      	add	sp, #16
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	01000200 	.word	0x01000200
 80060b4:	00e00300 	.word	0x00e00300
 80060b8:	00600080 	.word	0x00600080
 80060bc:	004000e0 	.word	0x004000e0
 80060c0:	a3200008 	.word	0xa3200008

080060c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d107      	bne.n	8006116 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610c:	461a      	mov	r2, r3
 800610e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006112:	6053      	str	r3, [r2, #4]
 8006114:	e009      	b.n	800612a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d106      	bne.n	800612a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006122:	461a      	mov	r2, r3
 8006124:	f241 7370 	movw	r3, #6000	; 0x1770
 8006128:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006158:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006166:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006168:	2064      	movs	r0, #100	; 0x64
 800616a:	f7fa fedb 	bl	8000f24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800617a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800617c:	200a      	movs	r0, #10
 800617e:	f7fa fed1 	bl	8000f24 <HAL_Delay>

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <USB_DriveVbus+0x44>
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d106      	bne.n	80061d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d109      	bne.n	80061f0 <USB_DriveVbus+0x64>
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	0c5b      	lsrs	r3, r3, #17
 800621c:	f003 0303 	and.w	r3, r3, #3
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	b29b      	uxth	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	4608      	mov	r0, r1
 800625a:	4611      	mov	r1, r2
 800625c:	461a      	mov	r2, r3
 800625e:	4603      	mov	r3, r0
 8006260:	70fb      	strb	r3, [r7, #3]
 8006262:	460b      	mov	r3, r1
 8006264:	70bb      	strb	r3, [r7, #2]
 8006266:	4613      	mov	r3, r2
 8006268:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006284:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006286:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800628a:	2b03      	cmp	r3, #3
 800628c:	d87e      	bhi.n	800638c <USB_HC_Init+0x13c>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USB_HC_Init+0x44>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	0800634f 	.word	0x0800634f
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	08006311 	.word	0x08006311
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	461a      	mov	r2, r3
 80062b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80062b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da10      	bge.n	80062e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062de:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80062e0:	e057      	b.n	8006392 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d051      	beq.n	8006392 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	440a      	add	r2, r1
 8006304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800630c:	60d3      	str	r3, [r2, #12]
      break;
 800630e:	e040      	b.n	8006392 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	461a      	mov	r2, r3
 800631e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006322:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006324:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	da34      	bge.n	8006396 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	78fa      	ldrb	r2, [r7, #3]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	440a      	add	r2, r1
 8006342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800634c:	e023      	b.n	8006396 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	461a      	mov	r2, r3
 800635c:	f240 2325 	movw	r3, #549	; 0x225
 8006360:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006362:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006366:	2b00      	cmp	r3, #0
 8006368:	da17      	bge.n	800639a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006388:	60d3      	str	r3, [r2, #12]
      }
      break;
 800638a:	e006      	b.n	800639a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	e004      	b.n	800639c <USB_HC_Init+0x14c>
      break;
 8006392:	bf00      	nop
 8006394:	e002      	b.n	800639c <USB_HC_Init+0x14c>
      break;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <USB_HC_Init+0x14c>
      break;
 800639a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	2101      	movs	r1, #1
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063b6:	4313      	orrs	r3, r2
 80063b8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da03      	bge.n	80063d6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	e001      	b.n	80063da <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80063da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d103      	bne.n	80063ea <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e001      	b.n	80063ee <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063ee:	787b      	ldrb	r3, [r7, #1]
 80063f0:	059b      	lsls	r3, r3, #22
 80063f2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063f6:	78bb      	ldrb	r3, [r7, #2]
 80063f8:	02db      	lsls	r3, r3, #11
 80063fa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006404:	049b      	lsls	r3, r3, #18
 8006406:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800640a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800640c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800640e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006412:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	0159      	lsls	r1, r3, #5
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	440b      	add	r3, r1
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800642a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800642c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006430:	2b03      	cmp	r3, #3
 8006432:	d10f      	bne.n	8006454 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	440a      	add	r2, r1
 800644a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006452:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800647c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006480:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d028      	beq.n	80064e0 <USB_HC_StartXfer+0x7c>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d124      	bne.n	80064e0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10b      	bne.n	80064b4 <USB_HC_StartXfer+0x50>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	795b      	ldrb	r3, [r3, #5]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d107      	bne.n	80064b4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fa2e 	bl	800690c <USB_DoPing>
      return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e112      	b.n	80066da <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d112      	bne.n	80064e0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80064d8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	8912      	ldrh	r2, [r2, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	3b01      	subs	r3, #1
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	8912      	ldrh	r2, [r2, #8]
 80064f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064fc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006500:	8b7b      	ldrh	r3, [r7, #26]
 8006502:	429a      	cmp	r2, r3
 8006504:	d90b      	bls.n	800651e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006506:	8b7b      	ldrh	r3, [r7, #26]
 8006508:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800650a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	8912      	ldrh	r2, [r2, #8]
 8006510:	fb02 f203 	mul.w	r2, r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	611a      	str	r2, [r3, #16]
 8006518:	e001      	b.n	800651e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800651a:	2301      	movs	r3, #1
 800651c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	78db      	ldrb	r3, [r3, #3]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	8912      	ldrh	r2, [r2, #8]
 800652c:	fb02 f203 	mul.w	r2, r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800653c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800653e:	04d9      	lsls	r1, r3, #19
 8006540:	4b68      	ldr	r3, [pc, #416]	; (80066e4 <USB_HC_StartXfer+0x280>)
 8006542:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006544:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	7a9b      	ldrb	r3, [r3, #10]
 800654a:	075b      	lsls	r3, r3, #29
 800654c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006550:	69f9      	ldr	r1, [r7, #28]
 8006552:	0148      	lsls	r0, r1, #5
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	4401      	add	r1, r0
 8006558:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800655c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800655e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	460a      	mov	r2, r1
 8006578:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	7e7b      	ldrb	r3, [r7, #25]
 80065c2:	075b      	lsls	r3, r3, #29
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	0148      	lsls	r0, r1, #5
 80065c8:	6a39      	ldr	r1, [r7, #32]
 80065ca:	4401      	add	r1, r0
 80065cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a41      	ldr	r2, [pc, #260]	; (80066e8 <USB_HC_StartXfer+0x284>)
 80065e4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065e6:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <USB_HC_StartXfer+0x284>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ee:	4a3e      	ldr	r2, [pc, #248]	; (80066e8 <USB_HC_StartXfer+0x284>)
 80065f0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	78db      	ldrb	r3, [r3, #3]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065fa:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <USB_HC_StartXfer+0x284>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	4a39      	ldr	r2, [pc, #228]	; (80066e8 <USB_HC_StartXfer+0x284>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e005      	b.n	8006614 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006608:	4b37      	ldr	r3, [pc, #220]	; (80066e8 <USB_HC_StartXfer+0x284>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006610:	4a35      	ldr	r2, [pc, #212]	; (80066e8 <USB_HC_StartXfer+0x284>)
 8006612:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006614:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <USB_HC_StartXfer+0x284>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800661c:	4a32      	ldr	r2, [pc, #200]	; (80066e8 <USB_HC_StartXfer+0x284>)
 800661e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	4413      	add	r3, r2
 8006628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662c:	461a      	mov	r2, r3
 800662e:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <USB_HC_StartXfer+0x284>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d14e      	bne.n	80066d8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	78db      	ldrb	r3, [r3, #3]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d14a      	bne.n	80066d8 <USB_HC_StartXfer+0x274>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d046      	beq.n	80066d8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	79db      	ldrb	r3, [r3, #7]
 800664e:	2b03      	cmp	r3, #3
 8006650:	d830      	bhi.n	80066b4 <USB_HC_StartXfer+0x250>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <USB_HC_StartXfer+0x1f4>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006669 	.word	0x08006669
 800665c:	0800668d 	.word	0x0800668d
 8006660:	08006669 	.word	0x08006669
 8006664:	0800668d 	.word	0x0800668d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	3303      	adds	r3, #3
 800666e:	089b      	lsrs	r3, r3, #2
 8006670:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006672:	8afa      	ldrh	r2, [r7, #22]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	b29b      	uxth	r3, r3
 800667a:	429a      	cmp	r2, r3
 800667c:	d91c      	bls.n	80066b8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	619a      	str	r2, [r3, #24]
          }
          break;
 800668a:	e015      	b.n	80066b8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	3303      	adds	r3, #3
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006696:	8afa      	ldrh	r2, [r7, #22]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d90a      	bls.n	80066bc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	619a      	str	r2, [r3, #24]
          }
          break;
 80066b2:	e003      	b.n	80066bc <USB_HC_StartXfer+0x258>

        default:
          break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <USB_HC_StartXfer+0x25a>
          break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <USB_HC_StartXfer+0x25a>
          break;
 80066bc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	785a      	ldrb	r2, [r3, #1]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	b298      	uxth	r0, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4603      	mov	r3, r0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fb86 	bl	8005de4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3728      	adds	r7, #40	; 0x28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	1ff80000 	.word	0x1ff80000
 80066e8:	200000b8 	.word	0x200000b8

080066ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	b29b      	uxth	r3, r3
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	0c9b      	lsrs	r3, r3, #18
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <USB_HC_Halt+0x3a>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d16c      	bne.n	8006822 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	440a      	add	r2, r1
 800675e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006766:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d143      	bne.n	80067fc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006792:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3301      	adds	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e0:	d81d      	bhi.n	800681e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f8:	d0ec      	beq.n	80067d4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067fa:	e080      	b.n	80068fe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	440a      	add	r2, r1
 8006812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800681a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800681c:	e06f      	b.n	80068fe <USB_HC_Halt+0x1f0>
          break;
 800681e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006820:	e06d      	b.n	80068fe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	440a      	add	r2, r1
 8006838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006840:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d143      	bne.n	80068da <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006870:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	440a      	add	r2, r1
 8006888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006890:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068b0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	3301      	adds	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068be:	d81d      	bhi.n	80068fc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d6:	d0ec      	beq.n	80068b2 <USB_HC_Halt+0x1a4>
 80068d8:	e011      	b.n	80068fe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e000      	b.n	80068fe <USB_HC_Halt+0x1f0>
          break;
 80068fc:	bf00      	nop
    }
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006920:	2301      	movs	r3, #1
 8006922:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	04da      	lsls	r2, r3, #19
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <USB_DoPing+0x74>)
 800692a:	4013      	ands	r3, r2
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	440a      	add	r2, r1
 8006934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800693c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006954:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800695c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	1ff80000 	.word	0x1ff80000

08006984 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff f9a1 	bl	8005cdc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800699a:	2110      	movs	r1, #16
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f9d9 	bl	8005d54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff f9fc 	bl	8005da0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	e01f      	b.n	80069ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e2:	461a      	mov	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d9dc      	bls.n	80069ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	e034      	b.n	8006a64 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3301      	adds	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a40:	d80c      	bhi.n	8006a5c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a58:	d0ec      	beq.n	8006a34 <USB_StopHost+0xb0>
 8006a5a:	e000      	b.n	8006a5e <USB_StopHost+0xda>
        break;
 8006a5c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d9c7      	bls.n	80069fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a70:	461a      	mov	r2, r3
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a76:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a7e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff f91a 	bl	8005cba <USB_EnableGlobalInt>

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006a90:	b590      	push	{r4, r7, lr}
 8006a92:	b089      	sub	sp, #36	; 0x24
 8006a94:	af04      	add	r7, sp, #16
 8006a96:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc3a 	bl	800731c <USBH_FindInterface>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2bff      	cmp	r3, #255	; 0xff
 8006ab0:	f000 812a 	beq.w	8006d08 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fc13 	bl	80072e4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006ac4:	2050      	movs	r0, #80	; 0x50
 8006ac6:	f002 ffdb 	bl	8009a80 <malloc>
 8006aca:	4603      	mov	r3, r0
 8006acc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	211a      	movs	r1, #26
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	b25b      	sxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da15      	bge.n	8006b1c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	211a      	movs	r1, #26
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	211a      	movs	r1, #26
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006b16:	881a      	ldrh	r2, [r3, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fd21 	bl	800856a <USBH_AllocPipe>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	7819      	ldrb	r1, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	7858      	ldrb	r0, [r3, #1]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	8952      	ldrh	r2, [r2, #10]
 8006b48:	9202      	str	r2, [sp, #8]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	9201      	str	r2, [sp, #4]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4623      	mov	r3, r4
 8006b52:	4602      	mov	r2, r0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fcd9 	bl	800850c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f002 feb2 	bl	80098cc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	210a      	movs	r1, #10
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fbd4 	bl	800731c <USBH_FindInterface>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	f000 80c4 	beq.w	8006d08 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	211a      	movs	r1, #26
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	da16      	bge.n	8006bc6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	211a      	movs	r1, #26
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	211a      	movs	r1, #26
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006bbe:	881a      	ldrh	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	835a      	strh	r2, [r3, #26]
 8006bc4:	e015      	b.n	8006bf2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	211a      	movs	r1, #26
 8006bcc:	fb01 f303 	mul.w	r3, r1, r3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	211a      	movs	r1, #26
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006bec:	881a      	ldrh	r2, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	211a      	movs	r1, #26
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	b25b      	sxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da16      	bge.n	8006c38 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	211a      	movs	r1, #26
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	4413      	add	r3, r2
 8006c16:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	211a      	movs	r1, #26
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006c30:	881a      	ldrh	r2, [r3, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	835a      	strh	r2, [r3, #26]
 8006c36:	e015      	b.n	8006c64 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	211a      	movs	r1, #26
 8006c3e:	fb01 f303 	mul.w	r3, r1, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	211a      	movs	r1, #26
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006c5e:	881a      	ldrh	r2, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	7b9b      	ldrb	r3, [r3, #14]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fc7d 	bl	800856a <USBH_AllocPipe>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	7bdb      	ldrb	r3, [r3, #15]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fc73 	bl	800856a <USBH_AllocPipe>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	7b59      	ldrb	r1, [r3, #13]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	7b98      	ldrb	r0, [r3, #14]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	8b12      	ldrh	r2, [r2, #24]
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	9201      	str	r2, [sp, #4]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4623      	mov	r3, r4
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fc2b 	bl	800850c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	7b19      	ldrb	r1, [r3, #12]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	7bd8      	ldrb	r0, [r3, #15]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	8b52      	ldrh	r2, [r2, #26]
 8006cce:	9202      	str	r2, [sp, #8]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	9201      	str	r2, [sp, #4]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fc16 	bl	800850c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	7b5b      	ldrb	r3, [r3, #13]
 8006cec:	2200      	movs	r2, #0
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f002 fdeb 	bl	80098cc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	7b1b      	ldrb	r3, [r3, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f002 fde4 	bl	80098cc <USBH_LL_SetToggle>
      status = USBH_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd90      	pop	{r4, r7, pc}

08006d12 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00e      	beq.n	8006d4a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fc09 	bl	800854a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fc31 	bl	80085a6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	7b1b      	ldrb	r3, [r3, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	7b1b      	ldrb	r3, [r3, #12]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fbf6 	bl	800854a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	7b1b      	ldrb	r3, [r3, #12]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fc1e 	bl	80085a6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	7b5b      	ldrb	r3, [r3, #13]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	7b5b      	ldrb	r3, [r3, #13]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fbe3 	bl	800854a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	7b5b      	ldrb	r3, [r3, #13]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fc0b 	bl	80085a6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f002 fe70 	bl	8009a90 <free>
    phost->pActiveClass->pData = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	3340      	adds	r3, #64	; 0x40
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8b2 	bl	8006f4a <GetLineCoding>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d105      	bne.n	8006dfc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006df6:	2102      	movs	r1, #2
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
  }
  return status;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d877      	bhi.n	8006f1c <USBH_CDC_Process+0x114>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <USBH_CDC_Process+0x2c>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e49 	.word	0x08006e49
 8006e38:	08006e4f 	.word	0x08006e4f
 8006e3c:	08006e7f 	.word	0x08006e7f
 8006e40:	08006ef3 	.word	0x08006ef3
 8006e44:	08006f01 	.word	0x08006f01
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4c:	e06d      	b.n	8006f2a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f897 	bl	8006f88 <SetLineCoding>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006e6c:	e058      	b.n	8006f20 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d055      	beq.n	8006f20 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006e7c:	e050      	b.n	8006f20 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3340      	adds	r3, #64	; 0x40
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f860 	bl	8006f4a <GetLineCoding>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d126      	bne.n	8006ee2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	791b      	ldrb	r3, [r3, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d13b      	bne.n	8006f24 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d133      	bne.n	8006f24 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d12b      	bne.n	8006f24 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d124      	bne.n	8006f24 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f95a 	bl	8007194 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006ee0:	e020      	b.n	8006f24 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d01d      	beq.n	8006f24 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2204      	movs	r2, #4
 8006eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006ef0:	e018      	b.n	8006f24 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f867 	bl	8006fc6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8dc 	bl	80070b6 <CDC_ProcessReception>
    break;
 8006efe:	e014      	b.n	8006f2a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006f00:	2100      	movs	r1, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fece 	bl	8007ca4 <USBH_ClrFeature>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006f1a:	e005      	b.n	8006f28 <USBH_CDC_Process+0x120>

  default:
    break;
 8006f1c:	bf00      	nop
 8006f1e:	e004      	b.n	8006f2a <USBH_CDC_Process+0x122>
    break;
 8006f20:	bf00      	nop
 8006f22:	e002      	b.n	8006f2a <USBH_CDC_Process+0x122>
    break;
 8006f24:	bf00      	nop
 8006f26:	e000      	b.n	8006f2a <USBH_CDC_Process+0x122>
    break;
 8006f28:	bf00      	nop

  }

  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22a1      	movs	r2, #161	; 0xa1
 8006f58:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2221      	movs	r2, #33	; 0x21
 8006f5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2207      	movs	r2, #7
 8006f70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2207      	movs	r2, #7
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f873 	bl	8008064 <USBH_CtlReq>
 8006f7e:	4603      	mov	r3, r0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2207      	movs	r2, #7
 8006fae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f854 	bl	8008064 <USBH_CtlReq>
 8006fbc:	4603      	mov	r3, r0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af02      	add	r7, sp, #8
 8006fcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d002      	beq.n	8006fec <CDC_ProcessTransmission+0x26>
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d025      	beq.n	8007036 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006fea:	e060      	b.n	80070ae <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	8b12      	ldrh	r2, [r2, #24]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d90c      	bls.n	8007012 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	69d9      	ldr	r1, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8b1a      	ldrh	r2, [r3, #24]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	7b58      	ldrb	r0, [r3, #13]
 8007004:	2301      	movs	r3, #1
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4603      	mov	r3, r0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fa3b 	bl	8008486 <USBH_BulkSendData>
 8007010:	e00c      	b.n	800702c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	7b58      	ldrb	r0, [r3, #13]
 8007020:	2301      	movs	r3, #1
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4603      	mov	r3, r0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa2d 	bl	8008486 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007034:	e03b      	b.n	80070ae <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7b5b      	ldrb	r3, [r3, #13]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f002 fc1b 	bl	8009878 <USBH_LL_GetURBState>
 8007042:	4603      	mov	r3, r0
 8007044:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d128      	bne.n	800709e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	8b12      	ldrh	r2, [r2, #24]
 8007054:	4293      	cmp	r3, r2
 8007056:	d90e      	bls.n	8007076 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	8b12      	ldrh	r2, [r2, #24]
 8007060:	1a9a      	subs	r2, r3, r2
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	8b12      	ldrh	r2, [r2, #24]
 800706e:	441a      	add	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	61da      	str	r2, [r3, #28]
 8007074:	e002      	b.n	800707c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800708c:	e00e      	b.n	80070ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f868 	bl	800716c <USBH_CDC_TransmitCallback>
    break;
 800709c:	e006      	b.n	80070ac <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d103      	bne.n	80070ac <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80070ac:	bf00      	nop
  }
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b086      	sub	sp, #24
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d002      	beq.n	80070dc <CDC_ProcessReception+0x26>
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d00e      	beq.n	80070f8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80070da:	e043      	b.n	8007164 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	6a19      	ldr	r1, [r3, #32]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	8b5a      	ldrh	r2, [r3, #26]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	7b1b      	ldrb	r3, [r3, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f9f1 	bl	80084d0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2204      	movs	r2, #4
 80070f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80070f6:	e035      	b.n	8007164 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	7b1b      	ldrb	r3, [r3, #12]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fbba 	bl	8009878 <USBH_LL_GetURBState>
 8007104:	4603      	mov	r3, r0
 8007106:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8007108:	7cfb      	ldrb	r3, [r7, #19]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d129      	bne.n	8007162 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	7b1b      	ldrb	r3, [r3, #12]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f002 fb1d 	bl	8009754 <USBH_LL_GetLastXferSize>
 800711a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	429a      	cmp	r2, r3
 8007124:	d016      	beq.n	8007154 <CDC_ProcessReception+0x9e>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	8b5b      	ldrh	r3, [r3, #26]
 800712a:	461a      	mov	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4293      	cmp	r3, r2
 8007130:	d910      	bls.n	8007154 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	441a      	add	r2, r3
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2203      	movs	r2, #3
 800714e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007152:	e006      	b.n	8007162 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f80f 	bl	8007180 <USBH_CDC_ReceiveCallback>
    break;
 8007162:	bf00      	nop
  }
}
 8007164:	bf00      	nop
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	e019      	b.n	80071f4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	79fa      	ldrb	r2, [r7, #7]
 80071c4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f80f 	bl	80071fc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f002 f9ff 	bl	80095f0 <USBH_LL_Init>

  return USBH_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007208:	e008      	b.n	800721c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	32e0      	adds	r2, #224	; 0xe0
 8007210:	2100      	movs	r1, #0
 8007212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b0e      	cmp	r3, #14
 8007220:	d9f3      	bls.n	800720a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e009      	b.n	800723c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007242:	d3f1      	bcc.n	8007228 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d017      	beq.n	80072d2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10f      	bne.n	80072cc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b2:	1c59      	adds	r1, r3, #1
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	33dc      	adds	r3, #220	; 0xdc
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
 80072ca:	e004      	b.n	80072d6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072cc:	2302      	movs	r3, #2
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e001      	b.n	80072d6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80072fa:	78fa      	ldrb	r2, [r7, #3]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d204      	bcs.n	800730a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007308:	e001      	b.n	800730e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	70fb      	strb	r3, [r7, #3]
 800732e:	460b      	mov	r3, r1
 8007330:	70bb      	strb	r3, [r7, #2]
 8007332:	4613      	mov	r3, r2
 8007334:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007344:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007346:	e025      	b.n	8007394 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	221a      	movs	r2, #26
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	3308      	adds	r3, #8
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	3302      	adds	r3, #2
 8007358:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	429a      	cmp	r2, r3
 8007362:	d002      	beq.n	800736a <USBH_FindInterface+0x4e>
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	2bff      	cmp	r3, #255	; 0xff
 8007368:	d111      	bne.n	800738e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800736e:	78ba      	ldrb	r2, [r7, #2]
 8007370:	429a      	cmp	r2, r3
 8007372:	d002      	beq.n	800737a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007374:	78bb      	ldrb	r3, [r7, #2]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d109      	bne.n	800738e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800737e:	787a      	ldrb	r2, [r7, #1]
 8007380:	429a      	cmp	r2, r3
 8007382:	d002      	beq.n	800738a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007384:	787b      	ldrb	r3, [r7, #1]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d101      	bne.n	800738e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	e006      	b.n	800739c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	3301      	adds	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d9d6      	bls.n	8007348 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800739a:	23ff      	movs	r3, #255	; 0xff
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 f959 	bl	8009668 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 fa70 	bl	800989e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073d0:	2302      	movs	r3, #2
 80073d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 faec 	bl	80079b6 <USBH_IsPortEnabled>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10c      	bne.n	80073fe <USBH_Process+0x36>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d002      	beq.n	80073fe <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2203      	movs	r2, #3
 80073fc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b0b      	cmp	r3, #11
 8007406:	f200 814c 	bhi.w	80076a2 <USBH_Process+0x2da>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USBH_Process+0x48>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007441 	.word	0x08007441
 8007414:	08007463 	.word	0x08007463
 8007418:	08007477 	.word	0x08007477
 800741c:	0800767d 	.word	0x0800767d
 8007420:	080076a3 	.word	0x080076a3
 8007424:	08007505 	.word	0x08007505
 8007428:	08007633 	.word	0x08007633
 800742c:	08007535 	.word	0x08007535
 8007430:	08007555 	.word	0x08007555
 8007434:	08007575 	.word	0x08007575
 8007438:	080075a3 	.word	0x080075a3
 800743c:	08007665 	.word	0x08007665
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 812c 	beq.w	80076a6 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007454:	20c8      	movs	r0, #200	; 0xc8
 8007456:	f002 fa6c 	bl	8009932 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f002 f95f 	bl	800971e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007460:	e121      	b.n	80076a6 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007468:	2b01      	cmp	r3, #1
 800746a:	f040 811e 	bne.w	80076aa <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007474:	e119      	b.n	80076aa <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007476:	2064      	movs	r0, #100	; 0x64
 8007478:	f002 fa5b 	bl	8009932 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f002 f929 	bl	80096d4 <USBH_LL_GetSpeed>
 8007482:	4603      	mov	r3, r0
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2205      	movs	r2, #5
 8007490:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f868 	bl	800856a <USBH_AllocPipe>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f860 	bl	800856a <USBH_AllocPipe>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7919      	ldrb	r1, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80074c6:	b292      	uxth	r2, r2
 80074c8:	9202      	str	r2, [sp, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	9201      	str	r2, [sp, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4603      	mov	r3, r0
 80074d2:	2280      	movs	r2, #128	; 0x80
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 f819 	bl	800850c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7959      	ldrb	r1, [r3, #5]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80074ee:	b292      	uxth	r2, r2
 80074f0:	9202      	str	r2, [sp, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	9201      	str	r2, [sp, #4]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	4603      	mov	r3, r0
 80074fa:	2200      	movs	r2, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f805 	bl	800850c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007502:	e0e3      	b.n	80076cc <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8e7 	bl	80076d8 <USBH_HandleEnum>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 80ce 	bne.w	80076ae <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007520:	2b01      	cmp	r3, #1
 8007522:	d103      	bne.n	800752c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2208      	movs	r2, #8
 8007528:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800752a:	e0c0      	b.n	80076ae <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2207      	movs	r2, #7
 8007530:	701a      	strb	r2, [r3, #0]
    break;
 8007532:	e0bc      	b.n	80076ae <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80b9 	beq.w	80076b2 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007546:	2101      	movs	r1, #1
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2208      	movs	r2, #8
 8007550:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007552:	e0ae      	b.n	80076b2 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800755a:	b29b      	uxth	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb59 	bl	8007c16 <USBH_SetCfg>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 80a5 	bne.w	80076b6 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2209      	movs	r2, #9
 8007570:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007572:	e0a0      	b.n	80076b6 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007582:	2101      	movs	r1, #1
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb69 	bl	8007c5c <USBH_SetFeature>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 8094 	bne.w	80076ba <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	220a      	movs	r2, #10
 8007596:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007598:	e08f      	b.n	80076ba <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220a      	movs	r2, #10
 800759e:	701a      	strb	r2, [r3, #0]
    break;
 80075a0:	e08b      	b.n	80076ba <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8088 	beq.w	80076be <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e017      	b.n	80075ec <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	33dc      	adds	r3, #220	; 0xdc
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	791a      	ldrb	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d108      	bne.n	80075e6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	33dc      	adds	r3, #220	; 0xdc
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0e4      	beq.n	80075bc <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d016      	beq.n	800762a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2206      	movs	r2, #6
 8007612:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800761a:	2103      	movs	r1, #3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007620:	e04d      	b.n	80076be <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	220d      	movs	r2, #13
 8007626:	701a      	strb	r2, [r3, #0]
    break;
 8007628:	e049      	b.n	80076be <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	220d      	movs	r2, #13
 800762e:	701a      	strb	r2, [r3, #0]
    break;
 8007630:	e045      	b.n	80076be <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00f      	beq.n	800765c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d136      	bne.n	80076c2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	220b      	movs	r2, #11
 8007658:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800765a:	e032      	b.n	80076c2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	220d      	movs	r2, #13
 8007660:	701a      	strb	r2, [r3, #0]
    break;
 8007662:	e02e      	b.n	80076c2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02b      	beq.n	80076c6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
    }
    break;
 800767a:	e024      	b.n	80076c6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fdbd 	bl	80071fc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80076a0:	e013      	b.n	80076ca <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80076a2:	bf00      	nop
 80076a4:	e012      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076a6:	bf00      	nop
 80076a8:	e010      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076aa:	bf00      	nop
 80076ac:	e00e      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076ae:	bf00      	nop
 80076b0:	e00c      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076b2:	bf00      	nop
 80076b4:	e00a      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076b6:	bf00      	nop
 80076b8:	e008      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076ba:	bf00      	nop
 80076bc:	e006      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076be:	bf00      	nop
 80076c0:	e004      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076c2:	bf00      	nop
 80076c4:	e002      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <USBH_Process+0x304>
    break;
 80076ca:	bf00      	nop
  }
 return USBH_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af04      	add	r7, sp, #16
 80076de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b07      	cmp	r3, #7
 80076ea:	f200 80f8 	bhi.w	80078de <USBH_HandleEnum+0x206>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <USBH_HandleEnum+0x1c>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007715 	.word	0x08007715
 80076f8:	08007787 	.word	0x08007787
 80076fc:	0800779f 	.word	0x0800779f
 8007700:	08007815 	.word	0x08007815
 8007704:	0800782b 	.word	0x0800782b
 8007708:	08007847 	.word	0x08007847
 800770c:	0800787b 	.word	0x0800787b
 8007710:	080078af 	.word	0x080078af
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007714:	2108      	movs	r1, #8
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9ad 	bl	8007a76 <USBH_Get_DevDesc>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	f040 80df 	bne.w	80078e2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7919      	ldrb	r1, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007748:	b292      	uxth	r2, r2
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	4603      	mov	r3, r0
 8007754:	2280      	movs	r2, #128	; 0x80
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fed8 	bl	800850c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7959      	ldrb	r1, [r3, #5]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007770:	b292      	uxth	r2, r2
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	9201      	str	r2, [sp, #4]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	4603      	mov	r3, r0
 800777c:	2200      	movs	r2, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fec4 	bl	800850c <USBH_OpenPipe>

    }
    break;
 8007784:	e0ad      	b.n	80078e2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007786:	2112      	movs	r1, #18
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f974 	bl	8007a76 <USBH_Get_DevDesc>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	f040 80a8 	bne.w	80078e6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2202      	movs	r2, #2
 800779a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800779c:	e0a3      	b.n	80078e6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800779e:	2101      	movs	r1, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa14 	bl	8007bce <USBH_SetAddress>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 809e 	bne.w	80078ea <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80077ae:	2002      	movs	r0, #2
 80077b0:	f002 f8bf 	bl	8009932 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2203      	movs	r2, #3
 80077c0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	7919      	ldrb	r1, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80077d6:	b292      	uxth	r2, r2
 80077d8:	9202      	str	r2, [sp, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	9201      	str	r2, [sp, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4603      	mov	r3, r0
 80077e2:	2280      	movs	r2, #128	; 0x80
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fe91 	bl	800850c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	7959      	ldrb	r1, [r3, #5]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80077fe:	b292      	uxth	r2, r2
 8007800:	9202      	str	r2, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4603      	mov	r3, r0
 800780a:	2200      	movs	r2, #0
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe7d 	bl	800850c <USBH_OpenPipe>
    }
    break;
 8007812:	e06a      	b.n	80078ea <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007814:	2109      	movs	r1, #9
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f955 	bl	8007ac6 <USBH_Get_CfgDesc>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d165      	bne.n	80078ee <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007828:	e061      	b.n	80078ee <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f947 	bl	8007ac6 <USBH_Get_CfgDesc>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d159      	bne.n	80078f2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2205      	movs	r2, #5
 8007842:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007844:	e055      	b.n	80078f2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800784c:	2b00      	cmp	r3, #0
 800784e:	d010      	beq.n	8007872 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800785c:	23ff      	movs	r3, #255	; 0xff
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f955 	bl	8007b0e <USBH_Get_StringDesc>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d145      	bne.n	80078f6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2206      	movs	r2, #6
 800786e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007870:	e041      	b.n	80078f6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2206      	movs	r2, #6
 8007876:	705a      	strb	r2, [r3, #1]
    break;
 8007878:	e03d      	b.n	80078f6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007880:	2b00      	cmp	r3, #0
 8007882:	d010      	beq.n	80078a6 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007890:	23ff      	movs	r3, #255	; 0xff
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f93b 	bl	8007b0e <USBH_Get_StringDesc>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d12d      	bne.n	80078fa <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2207      	movs	r2, #7
 80078a2:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078a4:	e029      	b.n	80078fa <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2207      	movs	r2, #7
 80078aa:	705a      	strb	r2, [r3, #1]
    break;
 80078ac:	e025      	b.n	80078fa <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80078c4:	23ff      	movs	r3, #255	; 0xff
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f921 	bl	8007b0e <USBH_Get_StringDesc>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d115      	bne.n	80078fe <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078d6:	e012      	b.n	80078fe <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
    break;
 80078dc:	e00f      	b.n	80078fe <USBH_HandleEnum+0x226>

  default:
    break;
 80078de:	bf00      	nop
 80078e0:	e00e      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078e2:	bf00      	nop
 80078e4:	e00c      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078e6:	bf00      	nop
 80078e8:	e00a      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078ea:	bf00      	nop
 80078ec:	e008      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078ee:	bf00      	nop
 80078f0:	e006      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078f2:	bf00      	nop
 80078f4:	e004      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078f6:	bf00      	nop
 80078f8:	e002      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <USBH_HandleEnum+0x228>
    break;
 80078fe:	bf00      	nop
  }
  return Status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop

0800790c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f804 	bl	800794e <USBH_HandleSof>
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b0b      	cmp	r3, #11
 800795e:	d10a      	bne.n	8007976 <USBH_HandleSof+0x28>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
  }
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800798e:	bf00      	nop
}
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80079aa:	bf00      	nop
}
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10f      	bne.n	8007a02 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00e      	beq.n	8007a12 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079fa:	2104      	movs	r1, #4
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	e007      	b.n	8007a12 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d102      	bne.n	8007a12 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fe3a 	bl	800969e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	791b      	ldrb	r3, [r3, #4]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fdb8 	bl	80085a6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fdb2 	bl	80085a6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a5a:	2105      	movs	r1, #5
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fe01 	bl	8009668 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2203      	movs	r2, #3
 8007a6a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af02      	add	r7, sp, #8
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f864 	bl	8007b64 <USBH_GetDescriptor>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	b292      	uxth	r2, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f000 f918 	bl	8007cec <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af02      	add	r7, sp, #8
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	331c      	adds	r3, #28
 8007ad6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007ad8:	887b      	ldrh	r3, [r7, #2]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f83d 	bl	8007b64 <USBH_GetDescriptor>
 8007aea:	4603      	mov	r3, r0
 8007aec:	72fb      	strb	r3, [r7, #11]
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d107      	bne.n	8007b04 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f964 	bl	8007dcc <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b088      	sub	sp, #32
 8007b12:	af02      	add	r7, sp, #8
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	72fb      	strb	r3, [r7, #11]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b2a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007b32:	893b      	ldrh	r3, [r7, #8]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	460b      	mov	r3, r1
 8007b38:	2100      	movs	r1, #0
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f812 	bl	8007b64 <USBH_GetDescriptor>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b50:	893a      	ldrh	r2, [r7, #8]
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fa37 	bl	8007fc8 <USBH_ParseStringDesc>
  }
  return status;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	72fb      	strb	r3, [r7, #11]
 8007b72:	4613      	mov	r3, r2
 8007b74:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d11c      	bne.n	8007bb8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2206      	movs	r2, #6
 8007b8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	893a      	ldrh	r2, [r7, #8]
 8007b94:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b96:	893b      	ldrh	r3, [r7, #8]
 8007b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba0:	d104      	bne.n	8007bac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f240 4209 	movw	r2, #1033	; 0x409
 8007ba8:	829a      	strh	r2, [r3, #20]
 8007baa:	e002      	b.n	8007bb2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8b3a      	ldrh	r2, [r7, #24]
 8007bb6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007bb8:	8b3b      	ldrh	r3, [r7, #24]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fa50 	bl	8008064 <USBH_CtlReq>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	789b      	ldrb	r3, [r3, #2]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d10f      	bne.n	8007c02 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2205      	movs	r2, #5
 8007bec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007c02:	2200      	movs	r2, #0
 8007c04:	2100      	movs	r1, #0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa2c 	bl	8008064 <USBH_CtlReq>
 8007c0c:	4603      	mov	r3, r0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	789b      	ldrb	r3, [r3, #2]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d10e      	bne.n	8007c48 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2209      	movs	r2, #9
 8007c34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa09 	bl	8008064 <USBH_CtlReq>
 8007c52:	4603      	mov	r3, r0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	789b      	ldrb	r3, [r3, #2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10f      	bne.n	8007c90 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c90:	2200      	movs	r2, #0
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9e5 	bl	8008064 <USBH_CtlReq>
 8007c9a:	4603      	mov	r3, r0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	789b      	ldrb	r3, [r3, #2]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10f      	bne.n	8007cd8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f9c1 	bl	8008064 <USBH_CtlReq>
 8007ce2:	4603      	mov	r3, r0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	785a      	ldrb	r2, [r3, #1]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3303      	adds	r3, #3
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	791a      	ldrb	r2, [r3, #4]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	795a      	ldrb	r2, [r3, #5]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	799a      	ldrb	r2, [r3, #6]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	79da      	ldrb	r2, [r3, #7]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d939      	bls.n	8007dc0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3309      	adds	r3, #9
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	330a      	adds	r3, #10
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	330b      	adds	r3, #11
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	330c      	adds	r3, #12
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	330d      	adds	r3, #13
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	7b9a      	ldrb	r2, [r3, #14]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	7bda      	ldrb	r2, [r3, #15]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	7c1a      	ldrb	r2, [r3, #16]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	7c5a      	ldrb	r2, [r3, #17]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	745a      	strb	r2, [r3, #17]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785a      	ldrb	r2, [r3, #1]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	3302      	adds	r3, #2
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3303      	adds	r3, #3
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	791a      	ldrb	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	795a      	ldrb	r2, [r3, #5]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	799a      	ldrb	r2, [r3, #6]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	79da      	ldrb	r2, [r3, #7]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	7a1a      	ldrb	r2, [r3, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d95f      	bls.n	8007f08 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e48:	2309      	movs	r3, #9
 8007e4a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e50:	e051      	b.n	8007ef6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e52:	f107 0316 	add.w	r3, r7, #22
 8007e56:	4619      	mov	r1, r3
 8007e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e5a:	f000 f8e8 	bl	800802e <USBH_GetNextDesc>
 8007e5e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d146      	bne.n	8007ef6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6c:	221a      	movs	r2, #26
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	3308      	adds	r3, #8
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	3302      	adds	r3, #2
 8007e7a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7e:	69f8      	ldr	r0, [r7, #28]
 8007e80:	f000 f846 	bl	8007f10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e8e:	e022      	b.n	8007ed6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007e90:	f107 0316 	add.w	r3, r7, #22
 8007e94:	4619      	mov	r1, r3
 8007e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e98:	f000 f8c9 	bl	800802e <USBH_GetNextDesc>
 8007e9c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d117      	bne.n	8007ed6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eaa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007eae:	3201      	adds	r2, #1
 8007eb0:	00d2      	lsls	r2, r2, #3
 8007eb2:	211a      	movs	r1, #26
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	3308      	adds	r3, #8
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ec6:	69b8      	ldr	r0, [r7, #24]
 8007ec8:	f000 f851 	bl	8007f6e <USBH_ParseEPDesc>
            ep_ix++;
 8007ecc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d204      	bcs.n	8007eec <USBH_ParseCfgDesc+0x120>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	885a      	ldrh	r2, [r3, #2]
 8007ee6:	8afb      	ldrh	r3, [r7, #22]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d8d1      	bhi.n	8007e90 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d804      	bhi.n	8007f08 <USBH_ParseCfgDesc+0x13c>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	885a      	ldrh	r2, [r3, #2]
 8007f02:	8afb      	ldrh	r3, [r7, #22]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d8a4      	bhi.n	8007e52 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3728      	adds	r7, #40	; 0x28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	785a      	ldrb	r2, [r3, #1]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	789a      	ldrb	r2, [r3, #2]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	78da      	ldrb	r2, [r3, #3]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	791a      	ldrb	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	795a      	ldrb	r2, [r3, #5]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	799a      	ldrb	r2, [r3, #6]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	79da      	ldrb	r2, [r3, #7]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	7a1a      	ldrb	r2, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	721a      	strb	r2, [r3, #8]
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785a      	ldrb	r2, [r3, #1]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	789a      	ldrb	r2, [r3, #2]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	78da      	ldrb	r2, [r3, #3]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3305      	adds	r3, #5
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4313      	orrs	r3, r2
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	799a      	ldrb	r2, [r3, #6]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	719a      	strb	r2, [r3, #6]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d120      	bne.n	8008022 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	1e9a      	subs	r2, r3, #2
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	bf28      	it	cs
 8007fec:	4613      	movcs	r3, r2
 8007fee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	82fb      	strh	r3, [r7, #22]
 8007ffa:	e00b      	b.n	8008014 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ffc:	8afb      	ldrh	r3, [r7, #22]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3301      	adds	r3, #1
 800800c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800800e:	8afb      	ldrh	r3, [r7, #22]
 8008010:	3302      	adds	r3, #2
 8008012:	82fb      	strh	r3, [r7, #22]
 8008014:	8afa      	ldrh	r2, [r7, #22]
 8008016:	8abb      	ldrh	r3, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3ef      	bcc.n	8007ffc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
  }
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	4413      	add	r3, r2
 8008044:	b29a      	uxth	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008056:	68fb      	ldr	r3, [r7, #12]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008072:	2301      	movs	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	789b      	ldrb	r3, [r3, #2]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d002      	beq.n	8008084 <USBH_CtlReq+0x20>
 800807e:	2b02      	cmp	r3, #2
 8008080:	d00f      	beq.n	80080a2 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008082:	e034      	b.n	80080ee <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	88fa      	ldrh	r2, [r7, #6]
 800808e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2202      	movs	r2, #2
 800809a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800809c:	2301      	movs	r3, #1
 800809e:	75fb      	strb	r3, [r7, #23]
    break;
 80080a0:	e025      	b.n	80080ee <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f828 	bl	80080f8 <USBH_HandleControl>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d108      	bne.n	80080c4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
    break;
 80080c2:	e013      	b.n	80080ec <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d108      	bne.n	80080dc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80080d6:	2303      	movs	r3, #3
 80080d8:	75fb      	strb	r3, [r7, #23]
    break;
 80080da:	e007      	b.n	80080ec <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d104      	bne.n	80080ec <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	75fb      	strb	r3, [r7, #23]
    break;
 80080ec:	bf00      	nop
  }
  return status;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008104:	2300      	movs	r3, #0
 8008106:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7e1b      	ldrb	r3, [r3, #24]
 800810c:	3b01      	subs	r3, #1
 800810e:	2b0a      	cmp	r3, #10
 8008110:	f200 814c 	bhi.w	80083ac <USBH_HandleControl+0x2b4>
 8008114:	a201      	add	r2, pc, #4	; (adr r2, 800811c <USBH_HandleControl+0x24>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	08008149 	.word	0x08008149
 8008120:	08008163 	.word	0x08008163
 8008124:	080081cd 	.word	0x080081cd
 8008128:	080081f3 	.word	0x080081f3
 800812c:	0800822b 	.word	0x0800822b
 8008130:	08008257 	.word	0x08008257
 8008134:	080082a9 	.word	0x080082a9
 8008138:	080082cb 	.word	0x080082cb
 800813c:	08008307 	.word	0x08008307
 8008140:	0800832f 	.word	0x0800832f
 8008144:	0800836d 	.word	0x0800836d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f103 0110 	add.w	r1, r3, #16
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	795b      	ldrb	r3, [r3, #5]
 8008152:	461a      	mov	r2, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f939 	bl	80083cc <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	761a      	strb	r2, [r3, #24]
    break;
 8008160:	e12f      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	795b      	ldrb	r3, [r3, #5]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fb85 	bl	8009878 <USBH_LL_GetURBState>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d11e      	bne.n	80081b6 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7c1b      	ldrb	r3, [r3, #16]
 800817c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008180:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	8adb      	ldrh	r3, [r3, #22]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800818a:	7b7b      	ldrb	r3, [r7, #13]
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d103      	bne.n	8008198 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2203      	movs	r2, #3
 8008194:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008196:	e10b      	b.n	80083b0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2205      	movs	r2, #5
 800819c:	761a      	strb	r2, [r3, #24]
    break;
 800819e:	e107      	b.n	80083b0 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80081a0:	7b7b      	ldrb	r3, [r7, #13]
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d103      	bne.n	80081ae <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2209      	movs	r2, #9
 80081aa:	761a      	strb	r2, [r3, #24]
    break;
 80081ac:	e100      	b.n	80083b0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2207      	movs	r2, #7
 80081b2:	761a      	strb	r2, [r3, #24]
    break;
 80081b4:	e0fc      	b.n	80083b0 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d003      	beq.n	80081c4 <USBH_HandleControl+0xcc>
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	f040 80f6 	bne.w	80083b0 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	220b      	movs	r2, #11
 80081c8:	761a      	strb	r2, [r3, #24]
    break;
 80081ca:	e0f1      	b.n	80083b0 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6899      	ldr	r1, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	899a      	ldrh	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	791b      	ldrb	r3, [r3, #4]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f930 	bl	800844a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2204      	movs	r2, #4
 80081ee:	761a      	strb	r2, [r3, #24]
    break;
 80081f0:	e0e7      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	791b      	ldrb	r3, [r3, #4]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fb3d 	bl	8009878 <USBH_LL_GetURBState>
 80081fe:	4603      	mov	r3, r0
 8008200:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d102      	bne.n	800820e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2209      	movs	r2, #9
 800820c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b05      	cmp	r3, #5
 8008212:	d102      	bne.n	800821a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008214:	2303      	movs	r3, #3
 8008216:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008218:	e0cc      	b.n	80083b4 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b04      	cmp	r3, #4
 800821e:	f040 80c9 	bne.w	80083b4 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	220b      	movs	r2, #11
 8008226:	761a      	strb	r2, [r3, #24]
    break;
 8008228:	e0c4      	b.n	80083b4 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6899      	ldr	r1, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	899a      	ldrh	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7958      	ldrb	r0, [r3, #5]
 8008236:	2301      	movs	r3, #1
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4603      	mov	r3, r0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8df 	bl	8008400 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2206      	movs	r2, #6
 8008252:	761a      	strb	r2, [r3, #24]
    break;
 8008254:	e0b5      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fb0b 	bl	8009878 <USBH_LL_GetURBState>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d103      	bne.n	8008274 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2207      	movs	r2, #7
 8008270:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008272:	e0a1      	b.n	80083b8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b05      	cmp	r3, #5
 8008278:	d105      	bne.n	8008286 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220c      	movs	r2, #12
 800827e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008280:	2303      	movs	r3, #3
 8008282:	73fb      	strb	r3, [r7, #15]
    break;
 8008284:	e098      	b.n	80083b8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d103      	bne.n	8008294 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	761a      	strb	r2, [r3, #24]
    break;
 8008292:	e091      	b.n	80083b8 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b04      	cmp	r3, #4
 8008298:	f040 808e 	bne.w	80083b8 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	220b      	movs	r2, #11
 80082a0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80082a2:	2302      	movs	r3, #2
 80082a4:	73fb      	strb	r3, [r7, #15]
    break;
 80082a6:	e087      	b.n	80083b8 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	791b      	ldrb	r3, [r3, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	2100      	movs	r1, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f8ca 	bl	800844a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2208      	movs	r2, #8
 80082c6:	761a      	strb	r2, [r3, #24]

    break;
 80082c8:	e07b      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	791b      	ldrb	r3, [r3, #4]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fad1 	bl	8009878 <USBH_LL_GetURBState>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d105      	bne.n	80082ec <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	220d      	movs	r2, #13
 80082e4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082ea:	e067      	b.n	80083bc <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d103      	bne.n	80082fa <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	220b      	movs	r2, #11
 80082f6:	761a      	strb	r2, [r3, #24]
    break;
 80082f8:	e060      	b.n	80083bc <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d15d      	bne.n	80083bc <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8008300:	2303      	movs	r3, #3
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e05a      	b.n	80083bc <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	795a      	ldrb	r2, [r3, #5]
 800830a:	2301      	movs	r3, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4613      	mov	r3, r2
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f873 	bl	8008400 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220a      	movs	r2, #10
 800832a:	761a      	strb	r2, [r3, #24]
    break;
 800832c:	e049      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	795b      	ldrb	r3, [r3, #5]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fa9f 	bl	8009878 <USBH_LL_GetURBState>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d105      	bne.n	8008350 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220d      	movs	r2, #13
 800834c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800834e:	e037      	b.n	80083c0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d103      	bne.n	800835e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2209      	movs	r2, #9
 800835a:	761a      	strb	r2, [r3, #24]
    break;
 800835c:	e030      	b.n	80083c0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d12d      	bne.n	80083c0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	220b      	movs	r2, #11
 8008368:	761a      	strb	r2, [r3, #24]
    break;
 800836a:	e029      	b.n	80083c0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	7e5b      	ldrb	r3, [r3, #25]
 8008370:	3301      	adds	r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	765a      	strb	r2, [r3, #25]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7e5b      	ldrb	r3, [r3, #25]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d809      	bhi.n	8008394 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 f98c 	bl	800969e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008392:	e016      	b.n	80083c2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800839a:	2106      	movs	r1, #6
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80083a6:	2302      	movs	r3, #2
 80083a8:	73fb      	strb	r3, [r7, #15]
    break;
 80083aa:	e00a      	b.n	80083c2 <USBH_HandleControl+0x2ca>

  default:
    break;
 80083ac:	bf00      	nop
 80083ae:	e008      	b.n	80083c2 <USBH_HandleControl+0x2ca>
    break;
 80083b0:	bf00      	nop
 80083b2:	e006      	b.n	80083c2 <USBH_HandleControl+0x2ca>
    break;
 80083b4:	bf00      	nop
 80083b6:	e004      	b.n	80083c2 <USBH_HandleControl+0x2ca>
    break;
 80083b8:	bf00      	nop
 80083ba:	e002      	b.n	80083c2 <USBH_HandleControl+0x2ca>
    break;
 80083bc:	bf00      	nop
 80083be:	e000      	b.n	80083c2 <USBH_HandleControl+0x2ca>
    break;
 80083c0:	bf00      	nop
  }
  return status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af04      	add	r7, sp, #16
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80083da:	79f9      	ldrb	r1, [r7, #7]
 80083dc:	2300      	movs	r3, #0
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	2308      	movs	r3, #8
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	2300      	movs	r3, #0
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f001 fa10 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af04      	add	r7, sp, #16
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	460b      	mov	r3, r1
 8008410:	80fb      	strh	r3, [r7, #6]
 8008412:	4613      	mov	r3, r2
 8008414:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008424:	7979      	ldrb	r1, [r7, #5]
 8008426:	7e3b      	ldrb	r3, [r7, #24]
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	2200      	movs	r2, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 f9eb 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af04      	add	r7, sp, #16
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	4611      	mov	r1, r2
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	80fb      	strh	r3, [r7, #6]
 800845c:	4613      	mov	r3, r2
 800845e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008460:	7979      	ldrb	r1, [r7, #5]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	2301      	movs	r3, #1
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	2201      	movs	r2, #1
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f9cd 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800847c:	2300      	movs	r3, #0

}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af04      	add	r7, sp, #16
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	4611      	mov	r1, r2
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	80fb      	strh	r3, [r7, #6]
 8008498:	4613      	mov	r3, r2
 800849a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80084aa:	7979      	ldrb	r1, [r7, #5]
 80084ac:	7e3b      	ldrb	r3, [r7, #24]
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	2301      	movs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2302      	movs	r3, #2
 80084be:	2200      	movs	r2, #0
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 f9a8 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	460b      	mov	r3, r1
 80084e0:	80fb      	strh	r3, [r7, #6]
 80084e2:	4613      	mov	r3, r2
 80084e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80084e6:	7979      	ldrb	r1, [r7, #5]
 80084e8:	2300      	movs	r3, #0
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	2301      	movs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2302      	movs	r3, #2
 80084fa:	2201      	movs	r2, #1
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 f98a 	bl	8009816 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af04      	add	r7, sp, #16
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	461a      	mov	r2, r3
 800851a:	4603      	mov	r3, r0
 800851c:	70fb      	strb	r3, [r7, #3]
 800851e:	460b      	mov	r3, r1
 8008520:	70bb      	strb	r3, [r7, #2]
 8008522:	4613      	mov	r3, r2
 8008524:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008526:	7878      	ldrb	r0, [r7, #1]
 8008528:	78ba      	ldrb	r2, [r7, #2]
 800852a:	78f9      	ldrb	r1, [r7, #3]
 800852c:	8b3b      	ldrh	r3, [r7, #24]
 800852e:	9302      	str	r3, [sp, #8]
 8008530:	7d3b      	ldrb	r3, [r7, #20]
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	7c3b      	ldrb	r3, [r7, #16]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 f91d 	bl	800977a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008540:	2300      	movs	r3, #0

}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f93c 	bl	80097d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008560:	2300      	movs	r3, #0

}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f831 	bl	80085de <USBH_GetFreePipe>
 800857c:	4603      	mov	r3, r0
 800857e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	89fa      	ldrh	r2, [r7, #14]
 800858e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32e0      	adds	r2, #224	; 0xe0
 8008596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800859a:	89fb      	ldrh	r3, [r7, #14]
 800859c:	b2db      	uxtb	r3, r3
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	2b0a      	cmp	r3, #10
 80085b6:	d80b      	bhi.n	80085d0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	32e0      	adds	r2, #224	; 0xe0
 80085be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	32e0      	adds	r2, #224	; 0xe0
 80085cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80085de:	b480      	push	{r7}
 80085e0:	b085      	sub	sp, #20
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
 80085ee:	e00e      	b.n	800860e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085f0:	7bfa      	ldrb	r2, [r7, #15]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	32e0      	adds	r2, #224	; 0xe0
 80085f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	b29b      	uxth	r3, r3
 8008606:	e007      	b.n	8008618 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	3301      	adds	r3, #1
 800860c:	73fb      	strb	r3, [r7, #15]
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b0a      	cmp	r3, #10
 8008612:	d9ed      	bls.n	80085f0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008614:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <MPU6050_init>:
int fall = 0;
int time = 0;
char sendfall[1] = "f";
char sendnotfall[1] = "n";
int t = 0;
void MPU6050_init(void){
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800862a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	2301      	movs	r3, #1
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	1dfb      	adds	r3, r7, #7
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2301      	movs	r3, #1
 800863a:	2275      	movs	r2, #117	; 0x75
 800863c:	21d0      	movs	r1, #208	; 0xd0
 800863e:	4823      	ldr	r0, [pc, #140]	; (80086cc <MPU6050_init+0xa8>)
 8008640:	f7fa fe0c 	bl	800325c <HAL_I2C_Mem_Read>

	if(check == 104){
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b68      	cmp	r3, #104	; 0x68
 8008648:	d13b      	bne.n	80086c2 <MPU6050_init+0x9e>
		Data = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG,1,&Data,1,1000);
 800864e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	2301      	movs	r3, #1
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	1dbb      	adds	r3, r7, #6
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2301      	movs	r3, #1
 800865e:	226b      	movs	r2, #107	; 0x6b
 8008660:	21d0      	movs	r1, #208	; 0xd0
 8008662:	481a      	ldr	r0, [pc, #104]	; (80086cc <MPU6050_init+0xa8>)
 8008664:	f7fa fd00 	bl	8003068 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8008668:	2307      	movs	r3, #7
 800866a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG,1,&Data,1,1000);
 800866c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008670:	9302      	str	r3, [sp, #8]
 8008672:	2301      	movs	r3, #1
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	1dbb      	adds	r3, r7, #6
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	2301      	movs	r3, #1
 800867c:	2219      	movs	r2, #25
 800867e:	21d0      	movs	r1, #208	; 0xd0
 8008680:	4812      	ldr	r0, [pc, #72]	; (80086cc <MPU6050_init+0xa8>)
 8008682:	f7fa fcf1 	bl	8003068 <HAL_I2C_Mem_Write>

		Data = 0x00;
 8008686:	2300      	movs	r3, #0
 8008688:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG,1,&Data,1,1000);
 800868a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	2301      	movs	r3, #1
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	1dbb      	adds	r3, r7, #6
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2301      	movs	r3, #1
 800869a:	221c      	movs	r2, #28
 800869c:	21d0      	movs	r1, #208	; 0xd0
 800869e:	480b      	ldr	r0, [pc, #44]	; (80086cc <MPU6050_init+0xa8>)
 80086a0:	f7fa fce2 	bl	8003068 <HAL_I2C_Mem_Write>

		Data = 0x00;
 80086a4:	2300      	movs	r3, #0
 80086a6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG,1,&Data,1,1000);
 80086a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	2301      	movs	r3, #1
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	1dbb      	adds	r3, r7, #6
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	2301      	movs	r3, #1
 80086b8:	221b      	movs	r2, #27
 80086ba:	21d0      	movs	r1, #208	; 0xd0
 80086bc:	4803      	ldr	r0, [pc, #12]	; (80086cc <MPU6050_init+0xa8>)
 80086be:	f7fa fcd3 	bl	8003068 <HAL_I2C_Mem_Write>
	}
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200000e8 	.word	0x200000e8

080086d0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void){
 80086d0:	b590      	push	{r4, r7, lr}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80086d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	2306      	movs	r3, #6
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	463b      	mov	r3, r7
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2301      	movs	r3, #1
 80086e6:	223b      	movs	r2, #59	; 0x3b
 80086e8:	21d0      	movs	r1, #208	; 0xd0
 80086ea:	482f      	ldr	r0, [pc, #188]	; (80087a8 <MPU6050_Read_Accel+0xd8>)
 80086ec:	f7fa fdb6 	bl	800325c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80086f0:	783b      	ldrb	r3, [r7, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	b21a      	sxth	r2, r3
 80086f6:	787b      	ldrb	r3, [r7, #1]
 80086f8:	b21b      	sxth	r3, r3
 80086fa:	4313      	orrs	r3, r2
 80086fc:	b21a      	sxth	r2, r3
 80086fe:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <MPU6050_Read_Accel+0xdc>)
 8008700:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8008702:	78bb      	ldrb	r3, [r7, #2]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	b21a      	sxth	r2, r3
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	b21b      	sxth	r3, r3
 800870c:	4313      	orrs	r3, r2
 800870e:	b21a      	sxth	r2, r3
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <MPU6050_Read_Accel+0xe0>)
 8008712:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8008714:	793b      	ldrb	r3, [r7, #4]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	b21a      	sxth	r2, r3
 800871a:	797b      	ldrb	r3, [r7, #5]
 800871c:	b21b      	sxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b21a      	sxth	r2, r3
 8008722:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <MPU6050_Read_Accel+0xe4>)
 8008724:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW/16384.0;  // get the float g
 8008726:	4b21      	ldr	r3, [pc, #132]	; (80087ac <MPU6050_Read_Accel+0xdc>)
 8008728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800872c:	4618      	mov	r0, r3
 800872e:	f7f7 fe9d 	bl	800046c <__aeabi_i2d>
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <MPU6050_Read_Accel+0xe8>)
 8008738:	f7f8 f82c 	bl	8000794 <__aeabi_ddiv>
 800873c:	4603      	mov	r3, r0
 800873e:	460c      	mov	r4, r1
 8008740:	4618      	mov	r0, r3
 8008742:	4621      	mov	r1, r4
 8008744:	f7f8 f9ac 	bl	8000aa0 <__aeabi_d2f>
 8008748:	4602      	mov	r2, r0
 800874a:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <MPU6050_Read_Accel+0xec>)
 800874c:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800874e:	4b18      	ldr	r3, [pc, #96]	; (80087b0 <MPU6050_Read_Accel+0xe0>)
 8008750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008754:	4618      	mov	r0, r3
 8008756:	f7f7 fe89 	bl	800046c <__aeabi_i2d>
 800875a:	f04f 0200 	mov.w	r2, #0
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <MPU6050_Read_Accel+0xe8>)
 8008760:	f7f8 f818 	bl	8000794 <__aeabi_ddiv>
 8008764:	4603      	mov	r3, r0
 8008766:	460c      	mov	r4, r1
 8008768:	4618      	mov	r0, r3
 800876a:	4621      	mov	r1, r4
 800876c:	f7f8 f998 	bl	8000aa0 <__aeabi_d2f>
 8008770:	4602      	mov	r2, r0
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <MPU6050_Read_Accel+0xf0>)
 8008774:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <MPU6050_Read_Accel+0xe4>)
 8008778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fe75 	bl	800046c <__aeabi_i2d>
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <MPU6050_Read_Accel+0xe8>)
 8008788:	f7f8 f804 	bl	8000794 <__aeabi_ddiv>
 800878c:	4603      	mov	r3, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4618      	mov	r0, r3
 8008792:	4621      	mov	r1, r4
 8008794:	f7f8 f984 	bl	8000aa0 <__aeabi_d2f>
 8008798:	4602      	mov	r2, r0
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <MPU6050_Read_Accel+0xf4>)
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd90      	pop	{r4, r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200000e8 	.word	0x200000e8
 80087ac:	200000e4 	.word	0x200000e4
 80087b0:	2000013e 	.word	0x2000013e
 80087b4:	20000144 	.word	0x20000144
 80087b8:	40d00000 	.word	0x40d00000
 80087bc:	20000150 	.word	0x20000150
 80087c0:	20000140 	.word	0x20000140
 80087c4:	2000015c 	.word	0x2000015c

080087c8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void){
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80087ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	2306      	movs	r3, #6
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	463b      	mov	r3, r7
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2301      	movs	r3, #1
 80087de:	2243      	movs	r2, #67	; 0x43
 80087e0:	21d0      	movs	r1, #208	; 0xd0
 80087e2:	4831      	ldr	r0, [pc, #196]	; (80088a8 <MPU6050_Read_Gyro+0xe0>)
 80087e4:	f7fa fd3a 	bl	800325c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80087e8:	783b      	ldrb	r3, [r7, #0]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	b21a      	sxth	r2, r3
 80087ee:	787b      	ldrb	r3, [r7, #1]
 80087f0:	b21b      	sxth	r3, r3
 80087f2:	4313      	orrs	r3, r2
 80087f4:	b21a      	sxth	r2, r3
 80087f6:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <MPU6050_Read_Gyro+0xe4>)
 80087f8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80087fa:	78bb      	ldrb	r3, [r7, #2]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	b21a      	sxth	r2, r3
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b21b      	sxth	r3, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	b21a      	sxth	r2, r3
 8008808:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <MPU6050_Read_Gyro+0xe8>)
 800880a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800880c:	793b      	ldrb	r3, [r7, #4]
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	b21a      	sxth	r2, r3
 8008812:	797b      	ldrb	r3, [r7, #5]
 8008814:	b21b      	sxth	r3, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	b21a      	sxth	r2, r3
 800881a:	4b26      	ldr	r3, [pc, #152]	; (80088b4 <MPU6050_Read_Gyro+0xec>)
 800881c:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW/131.0;
 800881e:	4b23      	ldr	r3, [pc, #140]	; (80088ac <MPU6050_Read_Gyro+0xe4>)
 8008820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008824:	4618      	mov	r0, r3
 8008826:	f7f7 fe21 	bl	800046c <__aeabi_i2d>
 800882a:	a31d      	add	r3, pc, #116	; (adr r3, 80088a0 <MPU6050_Read_Gyro+0xd8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 ffb0 	bl	8000794 <__aeabi_ddiv>
 8008834:	4603      	mov	r3, r0
 8008836:	460c      	mov	r4, r1
 8008838:	4618      	mov	r0, r3
 800883a:	4621      	mov	r1, r4
 800883c:	f7f8 f930 	bl	8000aa0 <__aeabi_d2f>
 8008840:	4602      	mov	r2, r0
 8008842:	4b1d      	ldr	r3, [pc, #116]	; (80088b8 <MPU6050_Read_Gyro+0xf0>)
 8008844:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <MPU6050_Read_Gyro+0xe8>)
 8008848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800884c:	4618      	mov	r0, r3
 800884e:	f7f7 fe0d 	bl	800046c <__aeabi_i2d>
 8008852:	a313      	add	r3, pc, #76	; (adr r3, 80088a0 <MPU6050_Read_Gyro+0xd8>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 ff9c 	bl	8000794 <__aeabi_ddiv>
 800885c:	4603      	mov	r3, r0
 800885e:	460c      	mov	r4, r1
 8008860:	4618      	mov	r0, r3
 8008862:	4621      	mov	r1, r4
 8008864:	f7f8 f91c 	bl	8000aa0 <__aeabi_d2f>
 8008868:	4602      	mov	r2, r0
 800886a:	4b14      	ldr	r3, [pc, #80]	; (80088bc <MPU6050_Read_Gyro+0xf4>)
 800886c:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <MPU6050_Read_Gyro+0xec>)
 8008870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008874:	4618      	mov	r0, r3
 8008876:	f7f7 fdf9 	bl	800046c <__aeabi_i2d>
 800887a:	a309      	add	r3, pc, #36	; (adr r3, 80088a0 <MPU6050_Read_Gyro+0xd8>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 ff88 	bl	8000794 <__aeabi_ddiv>
 8008884:	4603      	mov	r3, r0
 8008886:	460c      	mov	r4, r1
 8008888:	4618      	mov	r0, r3
 800888a:	4621      	mov	r1, r4
 800888c:	f7f8 f908 	bl	8000aa0 <__aeabi_d2f>
 8008890:	4602      	mov	r2, r0
 8008892:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <MPU6050_Read_Gyro+0xf8>)
 8008894:	601a      	str	r2, [r3, #0]
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
 800889e:	bf00      	nop
 80088a0:	00000000 	.word	0x00000000
 80088a4:	40606000 	.word	0x40606000
 80088a8:	200000e8 	.word	0x200000e8
 80088ac:	2000013c 	.word	0x2000013c
 80088b0:	200001f8 	.word	0x200001f8
 80088b4:	20000158 	.word	0x20000158
 80088b8:	200000dc 	.word	0x200000dc
 80088bc:	20000148 	.word	0x20000148
 80088c0:	20000200 	.word	0x20000200
 80088c4:	00000000 	.word	0x00000000

080088c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088c8:	b5b0      	push	{r4, r5, r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088cc:	f7f8 fab8 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088d0:	f000 f952 	bl	8008b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088d4:	f000 fa90 	bl	8008df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80088d8:	f000 f9d0 	bl	8008c7c <MX_I2C1_Init>
  MX_I2S3_Init();
 80088dc:	f000 f9fc 	bl	8008cd8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80088e0:	f000 fa2a 	bl	8008d38 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80088e4:	f000 fd70 	bl	80093c8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80088e8:	f000 fa5c 	bl	8008da4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_init();
 80088ec:	f7ff fe9a 	bl	8008624 <MPU6050_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lastAtotal = 0;
 80088f0:	4b8f      	ldr	r3, [pc, #572]	; (8008b30 <main+0x268>)
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  MPU6050_Read_Accel();
 80088f8:	f7ff feea 	bl	80086d0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80088fc:	f7ff ff64 	bl	80087c8 <MPU6050_Read_Gyro>
	  if(fall == 0 || count < 100){
 8008900:	4b8c      	ldr	r3, [pc, #560]	; (8008b34 <main+0x26c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <main+0x48>
 8008908:	4b8b      	ldr	r3, [pc, #556]	; (8008b38 <main+0x270>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b63      	cmp	r3, #99	; 0x63
 800890e:	dc0d      	bgt.n	800892c <main+0x64>
		  if(time == 10){
 8008910:	4b8a      	ldr	r3, [pc, #552]	; (8008b3c <main+0x274>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b0a      	cmp	r3, #10
 8008916:	d11e      	bne.n	8008956 <main+0x8e>
			  HAL_UART_Transmit(&huart2, sendnotfall, sizeof(sendnotfall), 100);
 8008918:	2364      	movs	r3, #100	; 0x64
 800891a:	2201      	movs	r2, #1
 800891c:	4988      	ldr	r1, [pc, #544]	; (8008b40 <main+0x278>)
 800891e:	4889      	ldr	r0, [pc, #548]	; (8008b44 <main+0x27c>)
 8008920:	f7fc fd0b 	bl	800533a <HAL_UART_Transmit>
			  time = 0;
 8008924:	4b85      	ldr	r3, [pc, #532]	; (8008b3c <main+0x274>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
		  if(time == 10){
 800892a:	e014      	b.n	8008956 <main+0x8e>
		  }
	  }else if(fall == 1 && count >= 100){
 800892c:	4b81      	ldr	r3, [pc, #516]	; (8008b34 <main+0x26c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d110      	bne.n	8008956 <main+0x8e>
 8008934:	4b80      	ldr	r3, [pc, #512]	; (8008b38 <main+0x270>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b63      	cmp	r3, #99	; 0x63
 800893a:	dd0c      	ble.n	8008956 <main+0x8e>
		  if(time == 10){
 800893c:	4b7f      	ldr	r3, [pc, #508]	; (8008b3c <main+0x274>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b0a      	cmp	r3, #10
 8008942:	d108      	bne.n	8008956 <main+0x8e>
			  HAL_UART_Transmit(&huart2, sendfall, sizeof(sendfall), 100);
 8008944:	2364      	movs	r3, #100	; 0x64
 8008946:	2201      	movs	r2, #1
 8008948:	497f      	ldr	r1, [pc, #508]	; (8008b48 <main+0x280>)
 800894a:	487e      	ldr	r0, [pc, #504]	; (8008b44 <main+0x27c>)
 800894c:	f7fc fcf5 	bl	800533a <HAL_UART_Transmit>
			  time = 0;
 8008950:	4b7a      	ldr	r3, [pc, #488]	; (8008b3c <main+0x274>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
		  }
	  }
	  //HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
	  Atotal = sqrt( pow(Ax,2) + pow(Ay,2) + pow(Az,2) );
 8008956:	4b7d      	ldr	r3, [pc, #500]	; (8008b4c <main+0x284>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4618      	mov	r0, r3
 800895c:	f7f7 fd98 	bl	8000490 <__aeabi_f2d>
 8008960:	4603      	mov	r3, r0
 8008962:	460c      	mov	r4, r1
 8008964:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8008b28 <main+0x260>
 8008968:	ec44 3b10 	vmov	d0, r3, r4
 800896c:	f001 f95a 	bl	8009c24 <pow>
 8008970:	ec55 4b10 	vmov	r4, r5, d0
 8008974:	4b76      	ldr	r3, [pc, #472]	; (8008b50 <main+0x288>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f7f7 fd89 	bl	8000490 <__aeabi_f2d>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8008b28 <main+0x260>
 8008986:	ec43 2b10 	vmov	d0, r2, r3
 800898a:	f001 f94b 	bl	8009c24 <pow>
 800898e:	ec53 2b10 	vmov	r2, r3, d0
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fc1d 	bl	80001d4 <__adddf3>
 800899a:	4603      	mov	r3, r0
 800899c:	460c      	mov	r4, r1
 800899e:	4625      	mov	r5, r4
 80089a0:	461c      	mov	r4, r3
 80089a2:	4b6c      	ldr	r3, [pc, #432]	; (8008b54 <main+0x28c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7f7 fd72 	bl	8000490 <__aeabi_f2d>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8008b28 <main+0x260>
 80089b4:	ec43 2b10 	vmov	d0, r2, r3
 80089b8:	f001 f934 	bl	8009c24 <pow>
 80089bc:	ec53 2b10 	vmov	r2, r3, d0
 80089c0:	4620      	mov	r0, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	f7f7 fc06 	bl	80001d4 <__adddf3>
 80089c8:	4603      	mov	r3, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	ec44 3b17 	vmov	d7, r3, r4
 80089d0:	eeb0 0a47 	vmov.f32	s0, s14
 80089d4:	eef0 0a67 	vmov.f32	s1, s15
 80089d8:	f001 fa94 	bl	8009f04 <sqrt>
 80089dc:	ec54 3b10 	vmov	r3, r4, d0
 80089e0:	4618      	mov	r0, r3
 80089e2:	4621      	mov	r1, r4
 80089e4:	f7f8 f85c 	bl	8000aa0 <__aeabi_d2f>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b5b      	ldr	r3, [pc, #364]	; (8008b58 <main+0x290>)
 80089ec:	601a      	str	r2, [r3, #0]
	  deltaAtotal = (Atotal - lastAtotal);
 80089ee:	4b5a      	ldr	r3, [pc, #360]	; (8008b58 <main+0x290>)
 80089f0:	ed93 7a00 	vldr	s14, [r3]
 80089f4:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <main+0x268>)
 80089f6:	edd3 7a00 	vldr	s15, [r3]
 80089fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089fe:	4b57      	ldr	r3, [pc, #348]	; (8008b5c <main+0x294>)
 8008a00:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(100);
 8008a04:	2064      	movs	r0, #100	; 0x64
 8008a06:	f7f8 fa8d 	bl	8000f24 <HAL_Delay>
	  time++;
 8008a0a:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <main+0x274>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	4a4a      	ldr	r2, [pc, #296]	; (8008b3c <main+0x274>)
 8008a12:	6013      	str	r3, [r2, #0]
	  lastAtotal = Atotal;
 8008a14:	4b50      	ldr	r3, [pc, #320]	; (8008b58 <main+0x290>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a45      	ldr	r2, [pc, #276]	; (8008b30 <main+0x268>)
 8008a1a:	6013      	str	r3, [r2, #0]
	  Gtotal = sqrt( pow(Gx,2) + pow(Gy,2) + pow(Gz,2) );
 8008a1c:	4b50      	ldr	r3, [pc, #320]	; (8008b60 <main+0x298>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f7 fd35 	bl	8000490 <__aeabi_f2d>
 8008a26:	4603      	mov	r3, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8008b28 <main+0x260>
 8008a2e:	ec44 3b10 	vmov	d0, r3, r4
 8008a32:	f001 f8f7 	bl	8009c24 <pow>
 8008a36:	ec55 4b10 	vmov	r4, r5, d0
 8008a3a:	4b4a      	ldr	r3, [pc, #296]	; (8008b64 <main+0x29c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fd26 	bl	8000490 <__aeabi_f2d>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8008b28 <main+0x260>
 8008a4c:	ec43 2b10 	vmov	d0, r2, r3
 8008a50:	f001 f8e8 	bl	8009c24 <pow>
 8008a54:	ec53 2b10 	vmov	r2, r3, d0
 8008a58:	4620      	mov	r0, r4
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f7f7 fbba 	bl	80001d4 <__adddf3>
 8008a60:	4603      	mov	r3, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4625      	mov	r5, r4
 8008a66:	461c      	mov	r4, r3
 8008a68:	4b3f      	ldr	r3, [pc, #252]	; (8008b68 <main+0x2a0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fd0f 	bl	8000490 <__aeabi_f2d>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8008b28 <main+0x260>
 8008a7a:	ec43 2b10 	vmov	d0, r2, r3
 8008a7e:	f001 f8d1 	bl	8009c24 <pow>
 8008a82:	ec53 2b10 	vmov	r2, r3, d0
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fba3 	bl	80001d4 <__adddf3>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	ec44 3b17 	vmov	d7, r3, r4
 8008a96:	eeb0 0a47 	vmov.f32	s0, s14
 8008a9a:	eef0 0a67 	vmov.f32	s1, s15
 8008a9e:	f001 fa31 	bl	8009f04 <sqrt>
 8008aa2:	ec54 3b10 	vmov	r3, r4, d0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7f7 fff9 	bl	8000aa0 <__aeabi_d2f>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <main+0x2a4>)
 8008ab2:	601a      	str	r2, [r3, #0]
	  if(Gtotal >= 250 && deltaAtotal >= 1){
 8008ab4:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <main+0x2a4>)
 8008ab6:	edd3 7a00 	vldr	s15, [r3]
 8008aba:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8008b70 <main+0x2a8>
 8008abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac6:	db0c      	blt.n	8008ae2 <main+0x21a>
 8008ac8:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <main+0x294>)
 8008aca:	edd3 7a00 	vldr	s15, [r3]
 8008ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	db02      	blt.n	8008ae2 <main+0x21a>
		  fall = 1;
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <main+0x26c>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
	  }
	  if(fall == 1){
 8008ae2:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <main+0x26c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d118      	bne.n	8008b1c <main+0x254>
		  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8008aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008aee:	4821      	ldr	r0, [pc, #132]	; (8008b74 <main+0x2ac>)
 8008af0:	f7f8 fcff 	bl	80014f2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8008af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008af8:	481e      	ldr	r0, [pc, #120]	; (8008b74 <main+0x2ac>)
 8008afa:	f7f8 fcfa 	bl	80014f2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8008afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b02:	481c      	ldr	r0, [pc, #112]	; (8008b74 <main+0x2ac>)
 8008b04:	f7f8 fcf5 	bl	80014f2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8008b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b0c:	4819      	ldr	r0, [pc, #100]	; (8008b74 <main+0x2ac>)
 8008b0e:	f7f8 fcf0 	bl	80014f2 <HAL_GPIO_TogglePin>
	      count++;
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <main+0x270>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <main+0x270>)
 8008b1a:	6013      	str	r3, [r2, #0]
	    	  //fall = 0;
	    	  //count = 0;
	      //}
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008b1c:	f000 fc7a 	bl	8009414 <MX_USB_HOST_Process>
  {
 8008b20:	e6ea      	b.n	80088f8 <main+0x30>
 8008b22:	bf00      	nop
 8008b24:	f3af 8000 	nop.w
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	40000000 	.word	0x40000000
 8008b30:	2000014c 	.word	0x2000014c
 8008b34:	200000c0 	.word	0x200000c0
 8008b38:	200000bc 	.word	0x200000bc
 8008b3c:	200000c4 	.word	0x200000c4
 8008b40:	2000002c 	.word	0x2000002c
 8008b44:	200001b8 	.word	0x200001b8
 8008b48:	20000028 	.word	0x20000028
 8008b4c:	20000150 	.word	0x20000150
 8008b50:	20000140 	.word	0x20000140
 8008b54:	2000015c 	.word	0x2000015c
 8008b58:	200000e0 	.word	0x200000e0
 8008b5c:	20000154 	.word	0x20000154
 8008b60:	200000dc 	.word	0x200000dc
 8008b64:	20000148 	.word	0x20000148
 8008b68:	20000200 	.word	0x20000200
 8008b6c:	200001fc 	.word	0x200001fc
 8008b70:	437a0000 	.word	0x437a0000
 8008b74:	40020c00 	.word	0x40020c00

08008b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b098      	sub	sp, #96	; 0x60
 8008b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b82:	2230      	movs	r2, #48	; 0x30
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 ff8a 	bl	8009aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b8c:	f107 031c 	add.w	r3, r7, #28
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	609a      	str	r2, [r3, #8]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	609a      	str	r2, [r3, #8]
 8008ba8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008baa:	2300      	movs	r3, #0
 8008bac:	60bb      	str	r3, [r7, #8]
 8008bae:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <SystemClock_Config+0xfc>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	4a30      	ldr	r2, [pc, #192]	; (8008c74 <SystemClock_Config+0xfc>)
 8008bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bba:	4b2e      	ldr	r3, [pc, #184]	; (8008c74 <SystemClock_Config+0xfc>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bc2:	60bb      	str	r3, [r7, #8]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	4b2b      	ldr	r3, [pc, #172]	; (8008c78 <SystemClock_Config+0x100>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a2a      	ldr	r2, [pc, #168]	; (8008c78 <SystemClock_Config+0x100>)
 8008bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	4b28      	ldr	r3, [pc, #160]	; (8008c78 <SystemClock_Config+0x100>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008bec:	2302      	movs	r3, #2
 8008bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008bfa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008bfe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008c00:	2302      	movs	r3, #2
 8008c02:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008c04:	2307      	movs	r3, #7
 8008c06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fb fd43 	bl	8004698 <HAL_RCC_OscConfig>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8008c18:	f000 f9ec 	bl	8008ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c1c:	230f      	movs	r3, #15
 8008c1e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c20:	2302      	movs	r3, #2
 8008c22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c24:	2300      	movs	r3, #0
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008c34:	f107 031c 	add.w	r3, r7, #28
 8008c38:	2105      	movs	r1, #5
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fb ff9c 	bl	8004b78 <HAL_RCC_ClockConfig>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8008c46:	f000 f9d5 	bl	8008ff4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8008c4e:	23c0      	movs	r3, #192	; 0xc0
 8008c50:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008c52:	2302      	movs	r3, #2
 8008c54:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c56:	f107 030c 	add.w	r3, r7, #12
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fc f97e 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008c66:	f000 f9c5 	bl	8008ff4 <Error_Handler>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3760      	adds	r7, #96	; 0x60
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	40023800 	.word	0x40023800
 8008c78:	40007000 	.word	0x40007000

08008c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008c80:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008c82:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <MX_I2C1_Init+0x54>)
 8008c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008c86:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008c88:	4a12      	ldr	r2, [pc, #72]	; (8008cd4 <MX_I2C1_Init+0x58>)
 8008c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008c8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008c92:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008cac:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008cb2:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008cb8:	4804      	ldr	r0, [pc, #16]	; (8008ccc <MX_I2C1_Init+0x50>)
 8008cba:	f7fa f89d 	bl	8002df8 <HAL_I2C_Init>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008cc4:	f000 f996 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	200000e8 	.word	0x200000e8
 8008cd0:	40005400 	.word	0x40005400
 8008cd4:	00061a80 	.word	0x00061a80

08008cd8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008cdc:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008cde:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <MX_I2S3_Init+0x58>)
 8008ce0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cfc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008d00:	4a0c      	ldr	r2, [pc, #48]	; (8008d34 <MX_I2S3_Init+0x5c>)
 8008d02:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <MX_I2S3_Init+0x54>)
 8008d18:	f7fb f81e 	bl	8003d58 <HAL_I2S_Init>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008d22:	f000 f967 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000204 	.word	0x20000204
 8008d30:	40003c00 	.word	0x40003c00
 8008d34:	00017700 	.word	0x00017700

08008d38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008d3c:	4b17      	ldr	r3, [pc, #92]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <MX_SPI1_Init+0x68>)
 8008d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008d4a:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d84:	220a      	movs	r2, #10
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008d88:	4804      	ldr	r0, [pc, #16]	; (8008d9c <MX_SPI1_Init+0x64>)
 8008d8a:	f7fc fa25 	bl	80051d8 <HAL_SPI_Init>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008d94:	f000 f92e 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008d98:	bf00      	nop
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000160 	.word	0x20000160
 8008da0:	40013000 	.word	0x40013000

08008da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008da8:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008daa:	4a12      	ldr	r2, [pc, #72]	; (8008df4 <MX_USART2_UART_Init+0x50>)
 8008dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008dae:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008dca:	220c      	movs	r2, #12
 8008dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008dda:	4805      	ldr	r0, [pc, #20]	; (8008df0 <MX_USART2_UART_Init+0x4c>)
 8008ddc:	f7fc fa60 	bl	80052a0 <HAL_UART_Init>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008de6:	f000 f905 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200001b8 	.word	0x200001b8
 8008df4:	40004400 	.word	0x40004400

08008df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08c      	sub	sp, #48	; 0x30
 8008dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dfe:	f107 031c 	add.w	r3, r7, #28
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	605a      	str	r2, [r3, #4]
 8008e08:	609a      	str	r2, [r3, #8]
 8008e0a:	60da      	str	r2, [r3, #12]
 8008e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	4b71      	ldr	r3, [pc, #452]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	4a70      	ldr	r2, [pc, #448]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e18:	f043 0310 	orr.w	r3, r3, #16
 8008e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e1e:	4b6e      	ldr	r3, [pc, #440]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	4b6a      	ldr	r3, [pc, #424]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	4a69      	ldr	r2, [pc, #420]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	6313      	str	r3, [r2, #48]	; 0x30
 8008e3a:	4b67      	ldr	r3, [pc, #412]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	4b63      	ldr	r3, [pc, #396]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	4a62      	ldr	r2, [pc, #392]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e54:	6313      	str	r3, [r2, #48]	; 0x30
 8008e56:	4b60      	ldr	r3, [pc, #384]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	613b      	str	r3, [r7, #16]
 8008e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	4b5c      	ldr	r3, [pc, #368]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	4a5b      	ldr	r2, [pc, #364]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e6c:	f043 0301 	orr.w	r3, r3, #1
 8008e70:	6313      	str	r3, [r2, #48]	; 0x30
 8008e72:	4b59      	ldr	r3, [pc, #356]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]
 8008e82:	4b55      	ldr	r3, [pc, #340]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	4a54      	ldr	r2, [pc, #336]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e88:	f043 0302 	orr.w	r3, r3, #2
 8008e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e8e:	4b52      	ldr	r3, [pc, #328]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	60bb      	str	r3, [r7, #8]
 8008e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	4b4e      	ldr	r3, [pc, #312]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	4a4d      	ldr	r2, [pc, #308]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008ea4:	f043 0308 	orr.w	r3, r3, #8
 8008ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8008eaa:	4b4b      	ldr	r3, [pc, #300]	; (8008fd8 <MX_GPIO_Init+0x1e0>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2108      	movs	r1, #8
 8008eba:	4848      	ldr	r0, [pc, #288]	; (8008fdc <MX_GPIO_Init+0x1e4>)
 8008ebc:	f7f8 fb00 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	4846      	ldr	r0, [pc, #280]	; (8008fe0 <MX_GPIO_Init+0x1e8>)
 8008ec6:	f7f8 fafb 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008ed0:	4844      	ldr	r0, [pc, #272]	; (8008fe4 <MX_GPIO_Init+0x1ec>)
 8008ed2:	f7f8 faf5 	bl	80014c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008eda:	2301      	movs	r3, #1
 8008edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008ee6:	f107 031c 	add.w	r3, r7, #28
 8008eea:	4619      	mov	r1, r3
 8008eec:	483b      	ldr	r0, [pc, #236]	; (8008fdc <MX_GPIO_Init+0x1e4>)
 8008eee:	f7f8 f94d 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efe:	2300      	movs	r3, #0
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008f02:	f107 031c 	add.w	r3, r7, #28
 8008f06:	4619      	mov	r1, r3
 8008f08:	4835      	ldr	r0, [pc, #212]	; (8008fe0 <MX_GPIO_Init+0x1e8>)
 8008f0a:	f7f8 f93f 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008f0e:	2308      	movs	r3, #8
 8008f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f12:	2302      	movs	r3, #2
 8008f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008f1e:	2305      	movs	r3, #5
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008f22:	f107 031c 	add.w	r3, r7, #28
 8008f26:	4619      	mov	r1, r3
 8008f28:	482d      	ldr	r0, [pc, #180]	; (8008fe0 <MX_GPIO_Init+0x1e8>)
 8008f2a:	f7f8 f92f 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008f32:	4b2d      	ldr	r3, [pc, #180]	; (8008fe8 <MX_GPIO_Init+0x1f0>)
 8008f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008f3a:	f107 031c 	add.w	r3, r7, #28
 8008f3e:	4619      	mov	r1, r3
 8008f40:	482a      	ldr	r0, [pc, #168]	; (8008fec <MX_GPIO_Init+0x1f4>)
 8008f42:	f7f8 f923 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008f46:	2304      	movs	r3, #4
 8008f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008f52:	f107 031c 	add.w	r3, r7, #28
 8008f56:	4619      	mov	r1, r3
 8008f58:	4825      	ldr	r0, [pc, #148]	; (8008ff0 <MX_GPIO_Init+0x1f8>)
 8008f5a:	f7f8 f917 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f64:	2302      	movs	r3, #2
 8008f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008f70:	2305      	movs	r3, #5
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008f74:	f107 031c 	add.w	r3, r7, #28
 8008f78:	4619      	mov	r1, r3
 8008f7a:	481d      	ldr	r0, [pc, #116]	; (8008ff0 <MX_GPIO_Init+0x1f8>)
 8008f7c:	f7f8 f906 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8008f80:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008f84:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f86:	2301      	movs	r3, #1
 8008f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f92:	f107 031c 	add.w	r3, r7, #28
 8008f96:	4619      	mov	r1, r3
 8008f98:	4812      	ldr	r0, [pc, #72]	; (8008fe4 <MX_GPIO_Init+0x1ec>)
 8008f9a:	f7f8 f8f7 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008f9e:	2320      	movs	r3, #32
 8008fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008faa:	f107 031c 	add.w	r3, r7, #28
 8008fae:	4619      	mov	r1, r3
 8008fb0:	480c      	ldr	r0, [pc, #48]	; (8008fe4 <MX_GPIO_Init+0x1ec>)
 8008fb2:	f7f8 f8eb 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008fba:	4b0b      	ldr	r3, [pc, #44]	; (8008fe8 <MX_GPIO_Init+0x1f0>)
 8008fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008fc2:	f107 031c 	add.w	r3, r7, #28
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4804      	ldr	r0, [pc, #16]	; (8008fdc <MX_GPIO_Init+0x1e4>)
 8008fca:	f7f8 f8df 	bl	800118c <HAL_GPIO_Init>

}
 8008fce:	bf00      	nop
 8008fd0:	3730      	adds	r7, #48	; 0x30
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	40021000 	.word	0x40021000
 8008fe0:	40020800 	.word	0x40020800
 8008fe4:	40020c00 	.word	0x40020c00
 8008fe8:	10120000 	.word	0x10120000
 8008fec:	40020000 	.word	0x40020000
 8008ff0:	40020400 	.word	0x40020400

08008ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ff8:	bf00      	nop
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800900a:	2300      	movs	r3, #0
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <HAL_MspInit+0x4c>)
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <HAL_MspInit+0x4c>)
 8009014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009018:	6453      	str	r3, [r2, #68]	; 0x44
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <HAL_MspInit+0x4c>)
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4b09      	ldr	r3, [pc, #36]	; (8009050 <HAL_MspInit+0x4c>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	4a08      	ldr	r2, [pc, #32]	; (8009050 <HAL_MspInit+0x4c>)
 8009030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009034:	6413      	str	r3, [r2, #64]	; 0x40
 8009036:	4b06      	ldr	r3, [pc, #24]	; (8009050 <HAL_MspInit+0x4c>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009042:	2007      	movs	r0, #7
 8009044:	f7f8 f860 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40023800 	.word	0x40023800

08009054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	; 0x28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800905c:	f107 0314 	add.w	r3, r7, #20
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	60da      	str	r2, [r3, #12]
 800906a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <HAL_I2C_MspInit+0x84>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d12c      	bne.n	80090d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	4b18      	ldr	r3, [pc, #96]	; (80090dc <HAL_I2C_MspInit+0x88>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	4a17      	ldr	r2, [pc, #92]	; (80090dc <HAL_I2C_MspInit+0x88>)
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	6313      	str	r3, [r2, #48]	; 0x30
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <HAL_I2C_MspInit+0x88>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8009092:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009098:	2312      	movs	r3, #18
 800909a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800909c:	2301      	movs	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090a0:	2300      	movs	r3, #0
 80090a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80090a4:	2304      	movs	r3, #4
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	4619      	mov	r1, r3
 80090ae:	480c      	ldr	r0, [pc, #48]	; (80090e0 <HAL_I2C_MspInit+0x8c>)
 80090b0:	f7f8 f86c 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <HAL_I2C_MspInit+0x88>)
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	4a07      	ldr	r2, [pc, #28]	; (80090dc <HAL_I2C_MspInit+0x88>)
 80090be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090c2:	6413      	str	r3, [r2, #64]	; 0x40
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <HAL_I2C_MspInit+0x88>)
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80090d0:	bf00      	nop
 80090d2:	3728      	adds	r7, #40	; 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40005400 	.word	0x40005400
 80090dc:	40023800 	.word	0x40023800
 80090e0:	40020400 	.word	0x40020400

080090e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08a      	sub	sp, #40	; 0x28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090ec:	f107 0314 	add.w	r3, r7, #20
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	605a      	str	r2, [r3, #4]
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a28      	ldr	r2, [pc, #160]	; (80091a4 <HAL_I2S_MspInit+0xc0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d14a      	bne.n	800919c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009106:	2300      	movs	r3, #0
 8009108:	613b      	str	r3, [r7, #16]
 800910a:	4b27      	ldr	r3, [pc, #156]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	4a26      	ldr	r2, [pc, #152]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009114:	6413      	str	r3, [r2, #64]	; 0x40
 8009116:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	4a1f      	ldr	r2, [pc, #124]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6313      	str	r3, [r2, #48]	; 0x30
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009148:	f043 0304 	orr.w	r3, r3, #4
 800914c:	6313      	str	r3, [r2, #48]	; 0x30
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <HAL_I2S_MspInit+0xc4>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	60bb      	str	r3, [r7, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800915a:	2310      	movs	r3, #16
 800915c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915e:	2302      	movs	r3, #2
 8009160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009166:	2300      	movs	r3, #0
 8009168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800916a:	2306      	movs	r3, #6
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	4619      	mov	r1, r3
 8009174:	480d      	ldr	r0, [pc, #52]	; (80091ac <HAL_I2S_MspInit+0xc8>)
 8009176:	f7f8 f809 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800917a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800917e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009180:	2302      	movs	r3, #2
 8009182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009188:	2300      	movs	r3, #0
 800918a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800918c:	2306      	movs	r3, #6
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009190:	f107 0314 	add.w	r3, r7, #20
 8009194:	4619      	mov	r1, r3
 8009196:	4806      	ldr	r0, [pc, #24]	; (80091b0 <HAL_I2S_MspInit+0xcc>)
 8009198:	f7f7 fff8 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800919c:	bf00      	nop
 800919e:	3728      	adds	r7, #40	; 0x28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40003c00 	.word	0x40003c00
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40020000 	.word	0x40020000
 80091b0:	40020800 	.word	0x40020800

080091b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	609a      	str	r2, [r3, #8]
 80091c8:	60da      	str	r2, [r3, #12]
 80091ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a19      	ldr	r2, [pc, #100]	; (8009238 <HAL_SPI_MspInit+0x84>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d12b      	bne.n	800922e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	4b18      	ldr	r3, [pc, #96]	; (800923c <HAL_SPI_MspInit+0x88>)
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <HAL_SPI_MspInit+0x88>)
 80091e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091e4:	6453      	str	r3, [r2, #68]	; 0x44
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <HAL_SPI_MspInit+0x88>)
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	4b11      	ldr	r3, [pc, #68]	; (800923c <HAL_SPI_MspInit+0x88>)
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	4a10      	ldr	r2, [pc, #64]	; (800923c <HAL_SPI_MspInit+0x88>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	6313      	str	r3, [r2, #48]	; 0x30
 8009202:	4b0e      	ldr	r3, [pc, #56]	; (800923c <HAL_SPI_MspInit+0x88>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800920e:	23e0      	movs	r3, #224	; 0xe0
 8009210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009212:	2302      	movs	r3, #2
 8009214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009216:	2300      	movs	r3, #0
 8009218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800921a:	2300      	movs	r3, #0
 800921c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800921e:	2305      	movs	r3, #5
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009222:	f107 0314 	add.w	r3, r7, #20
 8009226:	4619      	mov	r1, r3
 8009228:	4805      	ldr	r0, [pc, #20]	; (8009240 <HAL_SPI_MspInit+0x8c>)
 800922a:	f7f7 ffaf 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800922e:	bf00      	nop
 8009230:	3728      	adds	r7, #40	; 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	40013000 	.word	0x40013000
 800923c:	40023800 	.word	0x40023800
 8009240:	40020000 	.word	0x40020000

08009244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	; 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <HAL_UART_MspInit+0x84>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d12b      	bne.n	80092be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	4b18      	ldr	r3, [pc, #96]	; (80092cc <HAL_UART_MspInit+0x88>)
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	4a17      	ldr	r2, [pc, #92]	; (80092cc <HAL_UART_MspInit+0x88>)
 8009270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009274:	6413      	str	r3, [r2, #64]	; 0x40
 8009276:	4b15      	ldr	r3, [pc, #84]	; (80092cc <HAL_UART_MspInit+0x88>)
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <HAL_UART_MspInit+0x88>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	4a10      	ldr	r2, [pc, #64]	; (80092cc <HAL_UART_MspInit+0x88>)
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	6313      	str	r3, [r2, #48]	; 0x30
 8009292:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <HAL_UART_MspInit+0x88>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800929e:	230c      	movs	r3, #12
 80092a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a2:	2302      	movs	r3, #2
 80092a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092a6:	2301      	movs	r3, #1
 80092a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092aa:	2303      	movs	r3, #3
 80092ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80092ae:	2307      	movs	r3, #7
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092b2:	f107 0314 	add.w	r3, r7, #20
 80092b6:	4619      	mov	r1, r3
 80092b8:	4805      	ldr	r0, [pc, #20]	; (80092d0 <HAL_UART_MspInit+0x8c>)
 80092ba:	f7f7 ff67 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80092be:	bf00      	nop
 80092c0:	3728      	adds	r7, #40	; 0x28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	40004400 	.word	0x40004400
 80092cc:	40023800 	.word	0x40023800
 80092d0:	40020000 	.word	0x40020000

080092d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80092d8:	bf00      	nop
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092e2:	b480      	push	{r7}
 80092e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092e6:	e7fe      	b.n	80092e6 <HardFault_Handler+0x4>

080092e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092ec:	e7fe      	b.n	80092ec <MemManage_Handler+0x4>

080092ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092ee:	b480      	push	{r7}
 80092f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092f2:	e7fe      	b.n	80092f2 <BusFault_Handler+0x4>

080092f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092f8:	e7fe      	b.n	80092f8 <UsageFault_Handler+0x4>

080092fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092fa:	b480      	push	{r7}
 80092fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092fe:	bf00      	nop
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800930c:	bf00      	nop
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009316:	b480      	push	{r7}
 8009318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800931a:	bf00      	nop
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009328:	f7f7 fddc 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800932c:	bf00      	nop
 800932e:	bd80      	pop	{r7, pc}

08009330 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009334:	4802      	ldr	r0, [pc, #8]	; (8009340 <OTG_FS_IRQHandler+0x10>)
 8009336:	f7f8 fb7d 	bl	8001a34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000618 	.word	0x20000618

08009344 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800934c:	4b11      	ldr	r3, [pc, #68]	; (8009394 <_sbrk+0x50>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <_sbrk+0x16>
		heap_end = &end;
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <_sbrk+0x50>)
 8009356:	4a10      	ldr	r2, [pc, #64]	; (8009398 <_sbrk+0x54>)
 8009358:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800935a:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <_sbrk+0x50>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009360:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <_sbrk+0x50>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4413      	add	r3, r2
 8009368:	466a      	mov	r2, sp
 800936a:	4293      	cmp	r3, r2
 800936c:	d907      	bls.n	800937e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800936e:	f000 fb5d 	bl	8009a2c <__errno>
 8009372:	4602      	mov	r2, r0
 8009374:	230c      	movs	r3, #12
 8009376:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800937c:	e006      	b.n	800938c <_sbrk+0x48>
	}

	heap_end += incr;
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <_sbrk+0x50>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	4a03      	ldr	r2, [pc, #12]	; (8009394 <_sbrk+0x50>)
 8009388:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800938a:	68fb      	ldr	r3, [r7, #12]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	200000c8 	.word	0x200000c8
 8009398:	200008e0 	.word	0x200008e0

0800939c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800939c:	b480      	push	{r7}
 800939e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <SystemInit+0x28>)
 80093a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a6:	4a07      	ldr	r2, [pc, #28]	; (80093c4 <SystemInit+0x28>)
 80093a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80093b0:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <SystemInit+0x28>)
 80093b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093b6:	609a      	str	r2, [r3, #8]
#endif
}
 80093b8:	bf00      	nop
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	e000ed00 	.word	0xe000ed00

080093c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80093cc:	2201      	movs	r2, #1
 80093ce:	490e      	ldr	r1, [pc, #56]	; (8009408 <MX_USB_HOST_Init+0x40>)
 80093d0:	480e      	ldr	r0, [pc, #56]	; (800940c <MX_USB_HOST_Init+0x44>)
 80093d2:	f7fd fee9 	bl	80071a8 <USBH_Init>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80093dc:	f7ff fe0a 	bl	8008ff4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80093e0:	490b      	ldr	r1, [pc, #44]	; (8009410 <MX_USB_HOST_Init+0x48>)
 80093e2:	480a      	ldr	r0, [pc, #40]	; (800940c <MX_USB_HOST_Init+0x44>)
 80093e4:	f7fd ff53 	bl	800728e <USBH_RegisterClass>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093ee:	f7ff fe01 	bl	8008ff4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093f2:	4806      	ldr	r0, [pc, #24]	; (800940c <MX_USB_HOST_Init+0x44>)
 80093f4:	f7fd ffd8 	bl	80073a8 <USBH_Start>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093fe:	f7ff fdf9 	bl	8008ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009402:	bf00      	nop
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	08009429 	.word	0x08009429
 800940c:	2000024c 	.word	0x2000024c
 8009410:	20000008 	.word	0x20000008

08009414 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009418:	4802      	ldr	r0, [pc, #8]	; (8009424 <MX_USB_HOST_Process+0x10>)
 800941a:	f7fd ffd5 	bl	80073c8 <USBH_Process>
}
 800941e:	bf00      	nop
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	2000024c 	.word	0x2000024c

08009428 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	3b01      	subs	r3, #1
 8009438:	2b04      	cmp	r3, #4
 800943a:	d819      	bhi.n	8009470 <USBH_UserProcess+0x48>
 800943c:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBH_UserProcess+0x1c>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	08009471 	.word	0x08009471
 8009448:	08009461 	.word	0x08009461
 800944c:	08009471 	.word	0x08009471
 8009450:	08009469 	.word	0x08009469
 8009454:	08009459 	.word	0x08009459
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009458:	4b09      	ldr	r3, [pc, #36]	; (8009480 <USBH_UserProcess+0x58>)
 800945a:	2203      	movs	r2, #3
 800945c:	701a      	strb	r2, [r3, #0]
  break;
 800945e:	e008      	b.n	8009472 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <USBH_UserProcess+0x58>)
 8009462:	2202      	movs	r2, #2
 8009464:	701a      	strb	r2, [r3, #0]
  break;
 8009466:	e004      	b.n	8009472 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009468:	4b05      	ldr	r3, [pc, #20]	; (8009480 <USBH_UserProcess+0x58>)
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
  break;
 800946e:	e000      	b.n	8009472 <USBH_UserProcess+0x4a>

  default:
  break;
 8009470:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	200000cc 	.word	0x200000cc

08009484 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	609a      	str	r2, [r3, #8]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a4:	d147      	bne.n	8009536 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	4b25      	ldr	r3, [pc, #148]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	4a24      	ldr	r2, [pc, #144]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	6313      	str	r3, [r2, #48]	; 0x30
 80094b6:	4b22      	ldr	r3, [pc, #136]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80094c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80094d0:	f107 0314 	add.w	r3, r7, #20
 80094d4:	4619      	mov	r1, r3
 80094d6:	481b      	ldr	r0, [pc, #108]	; (8009544 <HAL_HCD_MspInit+0xc0>)
 80094d8:	f7f7 fe58 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80094e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094e2:	2302      	movs	r3, #2
 80094e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ea:	2300      	movs	r3, #0
 80094ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094ee:	230a      	movs	r3, #10
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f2:	f107 0314 	add.w	r3, r7, #20
 80094f6:	4619      	mov	r1, r3
 80094f8:	4812      	ldr	r0, [pc, #72]	; (8009544 <HAL_HCD_MspInit+0xc0>)
 80094fa:	f7f7 fe47 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094fe:	4b10      	ldr	r3, [pc, #64]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 8009504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009508:	6353      	str	r3, [r2, #52]	; 0x34
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
 800950e:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	4a0b      	ldr	r2, [pc, #44]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 8009514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009518:	6453      	str	r3, [r2, #68]	; 0x44
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <HAL_HCD_MspInit+0xbc>)
 800951c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	2100      	movs	r1, #0
 800952a:	2043      	movs	r0, #67	; 0x43
 800952c:	f7f7 fdf7 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009530:	2043      	movs	r0, #67	; 0x43
 8009532:	f7f7 fe10 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009536:	bf00      	nop
 8009538:	3728      	adds	r7, #40	; 0x28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	40023800 	.word	0x40023800
 8009544:	40020000 	.word	0x40020000

08009548 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe f9e7 	bl	800792a <USBH_LL_IncTimer>
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fa2c 	bl	80079d0 <USBH_LL_Connect>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fa44 	bl	8007a1c <USBH_LL_Disconnect>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
 80095a8:	4613      	mov	r3, r2
 80095aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe f9d9 	bl	800797e <USBH_LL_PortEnabled>
} 
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe f9d9 	bl	800799a <USBH_LL_PortDisabled>
} 
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d12a      	bne.n	8009658 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009602:	4a18      	ldr	r2, [pc, #96]	; (8009664 <USBH_LL_Init+0x74>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a15      	ldr	r2, [pc, #84]	; (8009664 <USBH_LL_Init+0x74>)
 800960e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <USBH_LL_Init+0x74>)
 8009614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009618:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <USBH_LL_Init+0x74>)
 800961c:	2208      	movs	r2, #8
 800961e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009620:	4b10      	ldr	r3, [pc, #64]	; (8009664 <USBH_LL_Init+0x74>)
 8009622:	2201      	movs	r2, #1
 8009624:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009626:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <USBH_LL_Init+0x74>)
 8009628:	2200      	movs	r2, #0
 800962a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800962c:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <USBH_LL_Init+0x74>)
 800962e:	2202      	movs	r2, #2
 8009630:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009632:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <USBH_LL_Init+0x74>)
 8009634:	2200      	movs	r2, #0
 8009636:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009638:	480a      	ldr	r0, [pc, #40]	; (8009664 <USBH_LL_Init+0x74>)
 800963a:	f7f7 ff75 	bl	8001528 <HAL_HCD_Init>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009644:	f7ff fcd6 	bl	8008ff4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009648:	4806      	ldr	r0, [pc, #24]	; (8009664 <USBH_LL_Init+0x74>)
 800964a:	f7f8 fb71 	bl	8001d30 <HAL_HCD_GetCurrentFrame>
 800964e:	4603      	mov	r3, r0
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fe f95a 	bl	800790c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000618 	.word	0x20000618

08009668 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800967e:	4618      	mov	r0, r3
 8009680:	f7f8 fade 	bl	8001c40 <HAL_HCD_Start>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f95c 	bl	8009948 <USBH_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7f8 fae6 	bl	8001c86 <HAL_HCD_Stop>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f941 	bl	8009948 <USBH_Get_USB_Status>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80096dc:	2301      	movs	r3, #1
 80096de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f8 fb30 	bl	8001d4c <HAL_HCD_GetCurrentSpeed>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d007      	beq.n	8009702 <USBH_LL_GetSpeed+0x2e>
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d302      	bcc.n	80096fc <USBH_LL_GetSpeed+0x28>
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d006      	beq.n	8009708 <USBH_LL_GetSpeed+0x34>
 80096fa:	e008      	b.n	800970e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009700:	e008      	b.n	8009714 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
    break;
 8009706:	e005      	b.n	8009714 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009708:	2302      	movs	r3, #2
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e002      	b.n	8009714 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	bf00      	nop
  }
  return  speed;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009734:	4618      	mov	r0, r3
 8009736:	f7f8 fac3 	bl	8001cc0 <HAL_HCD_ResetPort>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f901 	bl	8009948 <USBH_Get_USB_Status>
 8009746:	4603      	mov	r3, r0
 8009748:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800974a:	7bbb      	ldrb	r3, [r7, #14]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7f8 facb 	bl	8001d06 <HAL_HCD_HC_GetXferCount>
 8009770:	4603      	mov	r3, r0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800977a:	b590      	push	{r4, r7, lr}
 800977c:	b089      	sub	sp, #36	; 0x24
 800977e:	af04      	add	r7, sp, #16
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	461a      	mov	r2, r3
 8009788:	4603      	mov	r3, r0
 800978a:	70fb      	strb	r3, [r7, #3]
 800978c:	460b      	mov	r3, r1
 800978e:	70bb      	strb	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80097a2:	787c      	ldrb	r4, [r7, #1]
 80097a4:	78ba      	ldrb	r2, [r7, #2]
 80097a6:	78f9      	ldrb	r1, [r7, #3]
 80097a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097aa:	9302      	str	r3, [sp, #8]
 80097ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	4623      	mov	r3, r4
 80097ba:	f7f7 ff17 	bl	80015ec <HAL_HCD_HC_Init>
 80097be:	4603      	mov	r3, r0
 80097c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 f8bf 	bl	8009948 <USBH_Get_USB_Status>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f7 ff90 	bl	800171c <HAL_HCD_HC_Halt>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f8a0 	bl	8009948 <USBH_Get_USB_Status>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800980c:	7bbb      	ldrb	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009816:	b590      	push	{r4, r7, lr}
 8009818:	b089      	sub	sp, #36	; 0x24
 800981a:	af04      	add	r7, sp, #16
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	4608      	mov	r0, r1
 8009820:	4611      	mov	r1, r2
 8009822:	461a      	mov	r2, r3
 8009824:	4603      	mov	r3, r0
 8009826:	70fb      	strb	r3, [r7, #3]
 8009828:	460b      	mov	r3, r1
 800982a:	70bb      	strb	r3, [r7, #2]
 800982c:	4613      	mov	r3, r2
 800982e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800983e:	787c      	ldrb	r4, [r7, #1]
 8009840:	78ba      	ldrb	r2, [r7, #2]
 8009842:	78f9      	ldrb	r1, [r7, #3]
 8009844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800984c:	9302      	str	r3, [sp, #8]
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4623      	mov	r3, r4
 800985a:	f7f7 ff83 	bl	8001764 <HAL_HCD_HC_SubmitRequest>
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f86f 	bl	8009948 <USBH_Get_USB_Status>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800986e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f8 fa24 	bl	8001cdc <HAL_HCD_HC_GetURBState>
 8009894:	4603      	mov	r3, r0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d103      	bne.n	80098bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f872 	bl	80099a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80098bc:	20c8      	movs	r0, #200	; 0xc8
 80098be:	f7f7 fb31 	bl	8000f24 <HAL_Delay>
  return USBH_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
 80098d8:	4613      	mov	r3, r2
 80098da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	440b      	add	r3, r1
 80098f2:	333b      	adds	r3, #59	; 0x3b
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	68f9      	ldr	r1, [r7, #12]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	440b      	add	r3, r1
 8009908:	3350      	adds	r3, #80	; 0x50
 800990a:	78ba      	ldrb	r2, [r7, #2]
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e009      	b.n	8009924 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	440b      	add	r3, r1
 800991e:	3351      	adds	r3, #81	; 0x51
 8009920:	78ba      	ldrb	r2, [r7, #2]
 8009922:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f7 faf2 	bl	8000f24 <HAL_Delay>
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	2b03      	cmp	r3, #3
 800995a:	d817      	bhi.n	800998c <USBH_Get_USB_Status+0x44>
 800995c:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <USBH_Get_USB_Status+0x1c>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009975 	.word	0x08009975
 8009968:	0800997b 	.word	0x0800997b
 800996c:	08009981 	.word	0x08009981
 8009970:	08009987 	.word	0x08009987
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
    break;
 8009978:	e00b      	b.n	8009992 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	73fb      	strb	r3, [r7, #15]
    break;
 800997e:	e008      	b.n	8009992 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009980:	2301      	movs	r3, #1
 8009982:	73fb      	strb	r3, [r7, #15]
    break;
 8009984:	e005      	b.n	8009992 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	73fb      	strb	r3, [r7, #15]
    break;
 800998a:	e002      	b.n	8009992 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800998c:	2302      	movs	r3, #2
 800998e:	73fb      	strb	r3, [r7, #15]
    break;
 8009990:	bf00      	nop
  }
  return usb_status;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	e001      	b.n	80099be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	461a      	mov	r2, r3
 80099c2:	2101      	movs	r1, #1
 80099c4:	4803      	ldr	r0, [pc, #12]	; (80099d4 <MX_DriverVbusFS+0x34>)
 80099c6:	f7f7 fd7b 	bl	80014c0 <HAL_GPIO_WritePin>
}
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	40020800 	.word	0x40020800

080099d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80099d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80099dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80099de:	e003      	b.n	80099e8 <LoopCopyDataInit>

080099e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80099e0:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80099e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80099e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80099e6:	3104      	adds	r1, #4

080099e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80099e8:	480b      	ldr	r0, [pc, #44]	; (8009a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80099ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80099ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80099f0:	d3f6      	bcc.n	80099e0 <CopyDataInit>
  ldr  r2, =_sbss
 80099f2:	4a0b      	ldr	r2, [pc, #44]	; (8009a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80099f4:	e002      	b.n	80099fc <LoopFillZerobss>

080099f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80099f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80099f8:	f842 3b04 	str.w	r3, [r2], #4

080099fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80099fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009a00:	d3f9      	bcc.n	80099f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009a02:	f7ff fccb 	bl	800939c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a06:	f000 f817 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009a0a:	f7fe ff5d 	bl	80088c8 <main>
  bx  lr    
 8009a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009a14:	0800ae18 	.word	0x0800ae18
  ldr  r0, =_sdata
 8009a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009a1c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8009a20:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8009a24:	200008e0 	.word	0x200008e0

08009a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009a28:	e7fe      	b.n	8009a28 <ADC_IRQHandler>
	...

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000034 	.word	0x20000034

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f001 f99a 	bl	800ad84 <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800ae10 	.word	0x0800ae10
 8009a74:	0800ae10 	.word	0x0800ae10
 8009a78:	0800ae10 	.word	0x0800ae10
 8009a7c:	0800ae14 	.word	0x0800ae14

08009a80 <malloc>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <malloc+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f000 b861 	b.w	8009b4c <_malloc_r>
 8009a8a:	bf00      	nop
 8009a8c:	20000034 	.word	0x20000034

08009a90 <free>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <free+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f000 b80b 	b.w	8009ab0 <_free_r>
 8009a9a:	bf00      	nop
 8009a9c:	20000034 	.word	0x20000034

08009aa0 <memset>:
 8009aa0:	4402      	add	r2, r0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d100      	bne.n	8009aaa <memset+0xa>
 8009aa8:	4770      	bx	lr
 8009aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009aae:	e7f9      	b.n	8009aa4 <memset+0x4>

08009ab0 <_free_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d045      	beq.n	8009b44 <_free_r+0x94>
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f0c      	subs	r4, r1, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	18e4      	addlt	r4, r4, r3
 8009ac4:	f000 f8ac 	bl	8009c20 <__malloc_lock>
 8009ac8:	4a1f      	ldr	r2, [pc, #124]	; (8009b48 <_free_r+0x98>)
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	4610      	mov	r0, r2
 8009ace:	b933      	cbnz	r3, 8009ade <_free_r+0x2e>
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	6014      	str	r4, [r2, #0]
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ada:	f000 b8a2 	b.w	8009c22 <__malloc_unlock>
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	d90c      	bls.n	8009afc <_free_r+0x4c>
 8009ae2:	6821      	ldr	r1, [r4, #0]
 8009ae4:	1862      	adds	r2, r4, r1
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bf04      	itt	eq
 8009aea:	681a      	ldreq	r2, [r3, #0]
 8009aec:	685b      	ldreq	r3, [r3, #4]
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	bf04      	itt	eq
 8009af2:	1852      	addeq	r2, r2, r1
 8009af4:	6022      	streq	r2, [r4, #0]
 8009af6:	6004      	str	r4, [r0, #0]
 8009af8:	e7ec      	b.n	8009ad4 <_free_r+0x24>
 8009afa:	4613      	mov	r3, r2
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	b10a      	cbz	r2, 8009b04 <_free_r+0x54>
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	d9fa      	bls.n	8009afa <_free_r+0x4a>
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	1858      	adds	r0, r3, r1
 8009b08:	42a0      	cmp	r0, r4
 8009b0a:	d10b      	bne.n	8009b24 <_free_r+0x74>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	4401      	add	r1, r0
 8009b10:	1858      	adds	r0, r3, r1
 8009b12:	4282      	cmp	r2, r0
 8009b14:	6019      	str	r1, [r3, #0]
 8009b16:	d1dd      	bne.n	8009ad4 <_free_r+0x24>
 8009b18:	6810      	ldr	r0, [r2, #0]
 8009b1a:	6852      	ldr	r2, [r2, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	4401      	add	r1, r0
 8009b20:	6019      	str	r1, [r3, #0]
 8009b22:	e7d7      	b.n	8009ad4 <_free_r+0x24>
 8009b24:	d902      	bls.n	8009b2c <_free_r+0x7c>
 8009b26:	230c      	movs	r3, #12
 8009b28:	602b      	str	r3, [r5, #0]
 8009b2a:	e7d3      	b.n	8009ad4 <_free_r+0x24>
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	1821      	adds	r1, r4, r0
 8009b30:	428a      	cmp	r2, r1
 8009b32:	bf04      	itt	eq
 8009b34:	6811      	ldreq	r1, [r2, #0]
 8009b36:	6852      	ldreq	r2, [r2, #4]
 8009b38:	6062      	str	r2, [r4, #4]
 8009b3a:	bf04      	itt	eq
 8009b3c:	1809      	addeq	r1, r1, r0
 8009b3e:	6021      	streq	r1, [r4, #0]
 8009b40:	605c      	str	r4, [r3, #4]
 8009b42:	e7c7      	b.n	8009ad4 <_free_r+0x24>
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	200000d0 	.word	0x200000d0

08009b4c <_malloc_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	1ccd      	adds	r5, r1, #3
 8009b50:	f025 0503 	bic.w	r5, r5, #3
 8009b54:	3508      	adds	r5, #8
 8009b56:	2d0c      	cmp	r5, #12
 8009b58:	bf38      	it	cc
 8009b5a:	250c      	movcc	r5, #12
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	db01      	blt.n	8009b66 <_malloc_r+0x1a>
 8009b62:	42a9      	cmp	r1, r5
 8009b64:	d903      	bls.n	8009b6e <_malloc_r+0x22>
 8009b66:	230c      	movs	r3, #12
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	f000 f857 	bl	8009c20 <__malloc_lock>
 8009b72:	4a21      	ldr	r2, [pc, #132]	; (8009bf8 <_malloc_r+0xac>)
 8009b74:	6814      	ldr	r4, [r2, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	b991      	cbnz	r1, 8009ba0 <_malloc_r+0x54>
 8009b7a:	4c20      	ldr	r4, [pc, #128]	; (8009bfc <_malloc_r+0xb0>)
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	b91b      	cbnz	r3, 8009b88 <_malloc_r+0x3c>
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 f83d 	bl	8009c00 <_sbrk_r>
 8009b86:	6020      	str	r0, [r4, #0]
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 f838 	bl	8009c00 <_sbrk_r>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d124      	bne.n	8009bde <_malloc_r+0x92>
 8009b94:	230c      	movs	r3, #12
 8009b96:	6033      	str	r3, [r6, #0]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 f842 	bl	8009c22 <__malloc_unlock>
 8009b9e:	e7e4      	b.n	8009b6a <_malloc_r+0x1e>
 8009ba0:	680b      	ldr	r3, [r1, #0]
 8009ba2:	1b5b      	subs	r3, r3, r5
 8009ba4:	d418      	bmi.n	8009bd8 <_malloc_r+0x8c>
 8009ba6:	2b0b      	cmp	r3, #11
 8009ba8:	d90f      	bls.n	8009bca <_malloc_r+0x7e>
 8009baa:	600b      	str	r3, [r1, #0]
 8009bac:	50cd      	str	r5, [r1, r3]
 8009bae:	18cc      	adds	r4, r1, r3
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 f836 	bl	8009c22 <__malloc_unlock>
 8009bb6:	f104 000b 	add.w	r0, r4, #11
 8009bba:	1d23      	adds	r3, r4, #4
 8009bbc:	f020 0007 	bic.w	r0, r0, #7
 8009bc0:	1ac3      	subs	r3, r0, r3
 8009bc2:	d0d3      	beq.n	8009b6c <_malloc_r+0x20>
 8009bc4:	425a      	negs	r2, r3
 8009bc6:	50e2      	str	r2, [r4, r3]
 8009bc8:	e7d0      	b.n	8009b6c <_malloc_r+0x20>
 8009bca:	428c      	cmp	r4, r1
 8009bcc:	684b      	ldr	r3, [r1, #4]
 8009bce:	bf16      	itet	ne
 8009bd0:	6063      	strne	r3, [r4, #4]
 8009bd2:	6013      	streq	r3, [r2, #0]
 8009bd4:	460c      	movne	r4, r1
 8009bd6:	e7eb      	b.n	8009bb0 <_malloc_r+0x64>
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6849      	ldr	r1, [r1, #4]
 8009bdc:	e7cc      	b.n	8009b78 <_malloc_r+0x2c>
 8009bde:	1cc4      	adds	r4, r0, #3
 8009be0:	f024 0403 	bic.w	r4, r4, #3
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d005      	beq.n	8009bf4 <_malloc_r+0xa8>
 8009be8:	1a21      	subs	r1, r4, r0
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 f808 	bl	8009c00 <_sbrk_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d0cf      	beq.n	8009b94 <_malloc_r+0x48>
 8009bf4:	6025      	str	r5, [r4, #0]
 8009bf6:	e7db      	b.n	8009bb0 <_malloc_r+0x64>
 8009bf8:	200000d0 	.word	0x200000d0
 8009bfc:	200000d4 	.word	0x200000d4

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4c06      	ldr	r4, [pc, #24]	; (8009c1c <_sbrk_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4605      	mov	r5, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	f7ff fb9a 	bl	8009344 <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	602b      	str	r3, [r5, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	200008dc 	.word	0x200008dc

08009c20 <__malloc_lock>:
 8009c20:	4770      	bx	lr

08009c22 <__malloc_unlock>:
 8009c22:	4770      	bx	lr

08009c24 <pow>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	ed2d 8b04 	vpush	{d8-d9}
 8009c2c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009f00 <pow+0x2dc>
 8009c30:	b08d      	sub	sp, #52	; 0x34
 8009c32:	ec57 6b10 	vmov	r6, r7, d0
 8009c36:	ec55 4b11 	vmov	r4, r5, d1
 8009c3a:	f000 f9bd 	bl	8009fb8 <__ieee754_pow>
 8009c3e:	f999 3000 	ldrsb.w	r3, [r9]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	eeb0 8a40 	vmov.f32	s16, s0
 8009c4a:	eef0 8a60 	vmov.f32	s17, s1
 8009c4e:	46c8      	mov	r8, r9
 8009c50:	d05f      	beq.n	8009d12 <pow+0xee>
 8009c52:	4622      	mov	r2, r4
 8009c54:	462b      	mov	r3, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7f6 ff0b 	bl	8000a74 <__aeabi_dcmpun>
 8009c5e:	4683      	mov	fp, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d156      	bne.n	8009d12 <pow+0xee>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 ff02 	bl	8000a74 <__aeabi_dcmpun>
 8009c70:	9001      	str	r0, [sp, #4]
 8009c72:	b1e8      	cbz	r0, 8009cb0 <pow+0x8c>
 8009c74:	2200      	movs	r2, #0
 8009c76:	2300      	movs	r3, #0
 8009c78:	4620      	mov	r0, r4
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	f7f6 fec8 	bl	8000a10 <__aeabi_dcmpeq>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d046      	beq.n	8009d12 <pow+0xee>
 8009c84:	2301      	movs	r3, #1
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	4b96      	ldr	r3, [pc, #600]	; (8009ee4 <pow+0x2c0>)
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	4b96      	ldr	r3, [pc, #600]	; (8009ee8 <pow+0x2c4>)
 8009c8e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009c92:	2200      	movs	r2, #0
 8009c94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c98:	9b00      	ldr	r3, [sp, #0]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ca0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ca4:	d033      	beq.n	8009d0e <pow+0xea>
 8009ca6:	a802      	add	r0, sp, #8
 8009ca8:	f000 ff55 	bl	800ab56 <matherr>
 8009cac:	bb48      	cbnz	r0, 8009d02 <pow+0xde>
 8009cae:	e05d      	b.n	8009d6c <pow+0x148>
 8009cb0:	f04f 0a00 	mov.w	sl, #0
 8009cb4:	f04f 0b00 	mov.w	fp, #0
 8009cb8:	4652      	mov	r2, sl
 8009cba:	465b      	mov	r3, fp
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 fea6 	bl	8000a10 <__aeabi_dcmpeq>
 8009cc4:	ec4b ab19 	vmov	d9, sl, fp
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d054      	beq.n	8009d76 <pow+0x152>
 8009ccc:	4652      	mov	r2, sl
 8009cce:	465b      	mov	r3, fp
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	f7f6 fe9c 	bl	8000a10 <__aeabi_dcmpeq>
 8009cd8:	4680      	mov	r8, r0
 8009cda:	b318      	cbz	r0, 8009d24 <pow+0x100>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	4b80      	ldr	r3, [pc, #512]	; (8009ee4 <pow+0x2c0>)
 8009ce2:	9303      	str	r3, [sp, #12]
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009cf2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0d5      	beq.n	8009ca6 <pow+0x82>
 8009cfa:	4b7b      	ldr	r3, [pc, #492]	; (8009ee8 <pow+0x2c4>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d04:	b11b      	cbz	r3, 8009d0e <pow+0xea>
 8009d06:	f7ff fe91 	bl	8009a2c <__errno>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009d12:	eeb0 0a48 	vmov.f32	s0, s16
 8009d16:	eef0 0a68 	vmov.f32	s1, s17
 8009d1a:	b00d      	add	sp, #52	; 0x34
 8009d1c:	ecbd 8b04 	vpop	{d8-d9}
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	ec45 4b10 	vmov	d0, r4, r5
 8009d28:	f000 ff0d 	bl	800ab46 <finite>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d0f0      	beq.n	8009d12 <pow+0xee>
 8009d30:	4652      	mov	r2, sl
 8009d32:	465b      	mov	r3, fp
 8009d34:	4620      	mov	r0, r4
 8009d36:	4629      	mov	r1, r5
 8009d38:	f7f6 fe74 	bl	8000a24 <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0e8      	beq.n	8009d12 <pow+0xee>
 8009d40:	2301      	movs	r3, #1
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	4b67      	ldr	r3, [pc, #412]	; (8009ee4 <pow+0x2c0>)
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	f999 3000 	ldrsb.w	r3, [r9]
 8009d4c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009d50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d58:	b913      	cbnz	r3, 8009d60 <pow+0x13c>
 8009d5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d5e:	e7a2      	b.n	8009ca6 <pow+0x82>
 8009d60:	4962      	ldr	r1, [pc, #392]	; (8009eec <pow+0x2c8>)
 8009d62:	2000      	movs	r0, #0
 8009d64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d19c      	bne.n	8009ca6 <pow+0x82>
 8009d6c:	f7ff fe5e 	bl	8009a2c <__errno>
 8009d70:	2321      	movs	r3, #33	; 0x21
 8009d72:	6003      	str	r3, [r0, #0]
 8009d74:	e7c5      	b.n	8009d02 <pow+0xde>
 8009d76:	eeb0 0a48 	vmov.f32	s0, s16
 8009d7a:	eef0 0a68 	vmov.f32	s1, s17
 8009d7e:	f000 fee2 	bl	800ab46 <finite>
 8009d82:	9000      	str	r0, [sp, #0]
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f040 8081 	bne.w	8009e8c <pow+0x268>
 8009d8a:	ec47 6b10 	vmov	d0, r6, r7
 8009d8e:	f000 feda 	bl	800ab46 <finite>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d07a      	beq.n	8009e8c <pow+0x268>
 8009d96:	ec45 4b10 	vmov	d0, r4, r5
 8009d9a:	f000 fed4 	bl	800ab46 <finite>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d074      	beq.n	8009e8c <pow+0x268>
 8009da2:	ec53 2b18 	vmov	r2, r3, d8
 8009da6:	ee18 0a10 	vmov	r0, s16
 8009daa:	4619      	mov	r1, r3
 8009dac:	f7f6 fe62 	bl	8000a74 <__aeabi_dcmpun>
 8009db0:	f999 9000 	ldrsb.w	r9, [r9]
 8009db4:	4b4b      	ldr	r3, [pc, #300]	; (8009ee4 <pow+0x2c0>)
 8009db6:	b1b0      	cbz	r0, 8009de6 <pow+0x1c2>
 8009db8:	2201      	movs	r2, #1
 8009dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009dc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	d0c4      	beq.n	8009d5a <pow+0x136>
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	f7f6 fcdc 	bl	8000794 <__aeabi_ddiv>
 8009ddc:	f1b9 0f02 	cmp.w	r9, #2
 8009de0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009de4:	e7c1      	b.n	8009d6a <pow+0x146>
 8009de6:	2203      	movs	r2, #3
 8009de8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dec:	900a      	str	r0, [sp, #40]	; 0x28
 8009dee:	4629      	mov	r1, r5
 8009df0:	4620      	mov	r0, r4
 8009df2:	2200      	movs	r2, #0
 8009df4:	4b3e      	ldr	r3, [pc, #248]	; (8009ef0 <pow+0x2cc>)
 8009df6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009dfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009dfe:	f7f6 fb9f 	bl	8000540 <__aeabi_dmul>
 8009e02:	4604      	mov	r4, r0
 8009e04:	460d      	mov	r5, r1
 8009e06:	f1b9 0f00 	cmp.w	r9, #0
 8009e0a:	d124      	bne.n	8009e56 <pow+0x232>
 8009e0c:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <pow+0x2d0>)
 8009e0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e16:	4630      	mov	r0, r6
 8009e18:	4652      	mov	r2, sl
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fe01 	bl	8000a24 <__aeabi_dcmplt>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d056      	beq.n	8009ed4 <pow+0x2b0>
 8009e26:	ec45 4b10 	vmov	d0, r4, r5
 8009e2a:	f000 fea1 	bl	800ab70 <rint>
 8009e2e:	4622      	mov	r2, r4
 8009e30:	462b      	mov	r3, r5
 8009e32:	ec51 0b10 	vmov	r0, r1, d0
 8009e36:	f7f6 fdeb 	bl	8000a10 <__aeabi_dcmpeq>
 8009e3a:	b920      	cbnz	r0, 8009e46 <pow+0x222>
 8009e3c:	4b2e      	ldr	r3, [pc, #184]	; (8009ef8 <pow+0x2d4>)
 8009e3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e46:	f998 3000 	ldrsb.w	r3, [r8]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d142      	bne.n	8009ed4 <pow+0x2b0>
 8009e4e:	f7ff fded 	bl	8009a2c <__errno>
 8009e52:	2322      	movs	r3, #34	; 0x22
 8009e54:	e78d      	b.n	8009d72 <pow+0x14e>
 8009e56:	4b29      	ldr	r3, [pc, #164]	; (8009efc <pow+0x2d8>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4652      	mov	r2, sl
 8009e62:	465b      	mov	r3, fp
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fddd 	bl	8000a24 <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d0eb      	beq.n	8009e46 <pow+0x222>
 8009e6e:	ec45 4b10 	vmov	d0, r4, r5
 8009e72:	f000 fe7d 	bl	800ab70 <rint>
 8009e76:	4622      	mov	r2, r4
 8009e78:	462b      	mov	r3, r5
 8009e7a:	ec51 0b10 	vmov	r0, r1, d0
 8009e7e:	f7f6 fdc7 	bl	8000a10 <__aeabi_dcmpeq>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d1df      	bne.n	8009e46 <pow+0x222>
 8009e86:	2200      	movs	r2, #0
 8009e88:	4b18      	ldr	r3, [pc, #96]	; (8009eec <pow+0x2c8>)
 8009e8a:	e7da      	b.n	8009e42 <pow+0x21e>
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	ec51 0b18 	vmov	r0, r1, d8
 8009e94:	f7f6 fdbc 	bl	8000a10 <__aeabi_dcmpeq>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f43f af3a 	beq.w	8009d12 <pow+0xee>
 8009e9e:	ec47 6b10 	vmov	d0, r6, r7
 8009ea2:	f000 fe50 	bl	800ab46 <finite>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f43f af33 	beq.w	8009d12 <pow+0xee>
 8009eac:	ec45 4b10 	vmov	d0, r4, r5
 8009eb0:	f000 fe49 	bl	800ab46 <finite>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f43f af2c 	beq.w	8009d12 <pow+0xee>
 8009eba:	2304      	movs	r3, #4
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <pow+0x2c0>)
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009eca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ece:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009ed2:	e7b8      	b.n	8009e46 <pow+0x222>
 8009ed4:	a802      	add	r0, sp, #8
 8009ed6:	f000 fe3e 	bl	800ab56 <matherr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f47f af11 	bne.w	8009d02 <pow+0xde>
 8009ee0:	e7b5      	b.n	8009e4e <pow+0x22a>
 8009ee2:	bf00      	nop
 8009ee4:	0800adbc 	.word	0x0800adbc
 8009ee8:	3ff00000 	.word	0x3ff00000
 8009eec:	fff00000 	.word	0xfff00000
 8009ef0:	3fe00000 	.word	0x3fe00000
 8009ef4:	47efffff 	.word	0x47efffff
 8009ef8:	c7efffff 	.word	0xc7efffff
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	20000098 	.word	0x20000098

08009f04 <sqrt>:
 8009f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f08:	ed2d 8b02 	vpush	{d8}
 8009f0c:	b08b      	sub	sp, #44	; 0x2c
 8009f0e:	ec55 4b10 	vmov	r4, r5, d0
 8009f12:	f000 fd5f 	bl	800a9d4 <__ieee754_sqrt>
 8009f16:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <sqrt+0xac>)
 8009f18:	eeb0 8a40 	vmov.f32	s16, s0
 8009f1c:	eef0 8a60 	vmov.f32	s17, s1
 8009f20:	f993 6000 	ldrsb.w	r6, [r3]
 8009f24:	1c73      	adds	r3, r6, #1
 8009f26:	d02a      	beq.n	8009f7e <sqrt+0x7a>
 8009f28:	4622      	mov	r2, r4
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fda0 	bl	8000a74 <__aeabi_dcmpun>
 8009f34:	4607      	mov	r7, r0
 8009f36:	bb10      	cbnz	r0, 8009f7e <sqrt+0x7a>
 8009f38:	f04f 0800 	mov.w	r8, #0
 8009f3c:	f04f 0900 	mov.w	r9, #0
 8009f40:	4642      	mov	r2, r8
 8009f42:	464b      	mov	r3, r9
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 fd6c 	bl	8000a24 <__aeabi_dcmplt>
 8009f4c:	b1b8      	cbz	r0, 8009f7e <sqrt+0x7a>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4b18      	ldr	r3, [pc, #96]	; (8009fb4 <sqrt+0xb0>)
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	9708      	str	r7, [sp, #32]
 8009f58:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009f5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f60:	b9b6      	cbnz	r6, 8009f90 <sqrt+0x8c>
 8009f62:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009f66:	4668      	mov	r0, sp
 8009f68:	f000 fdf5 	bl	800ab56 <matherr>
 8009f6c:	b1d0      	cbz	r0, 8009fa4 <sqrt+0xa0>
 8009f6e:	9b08      	ldr	r3, [sp, #32]
 8009f70:	b11b      	cbz	r3, 8009f7a <sqrt+0x76>
 8009f72:	f7ff fd5b 	bl	8009a2c <__errno>
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8009f82:	eef0 0a68 	vmov.f32	s1, s17
 8009f86:	b00b      	add	sp, #44	; 0x2c
 8009f88:	ecbd 8b02 	vpop	{d8}
 8009f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f90:	4642      	mov	r2, r8
 8009f92:	464b      	mov	r3, r9
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 fbfc 	bl	8000794 <__aeabi_ddiv>
 8009f9c:	2e02      	cmp	r6, #2
 8009f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fa2:	d1e0      	bne.n	8009f66 <sqrt+0x62>
 8009fa4:	f7ff fd42 	bl	8009a2c <__errno>
 8009fa8:	2321      	movs	r3, #33	; 0x21
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	e7df      	b.n	8009f6e <sqrt+0x6a>
 8009fae:	bf00      	nop
 8009fb0:	20000098 	.word	0x20000098
 8009fb4:	0800adc0 	.word	0x0800adc0

08009fb8 <__ieee754_pow>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	b091      	sub	sp, #68	; 0x44
 8009fbe:	ed8d 1b00 	vstr	d1, [sp]
 8009fc2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009fc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009fca:	ea58 0302 	orrs.w	r3, r8, r2
 8009fce:	ec57 6b10 	vmov	r6, r7, d0
 8009fd2:	f000 84be 	beq.w	800a952 <__ieee754_pow+0x99a>
 8009fd6:	4b7a      	ldr	r3, [pc, #488]	; (800a1c0 <__ieee754_pow+0x208>)
 8009fd8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	463d      	mov	r5, r7
 8009fe0:	ee10 aa10 	vmov	sl, s0
 8009fe4:	dc09      	bgt.n	8009ffa <__ieee754_pow+0x42>
 8009fe6:	d103      	bne.n	8009ff0 <__ieee754_pow+0x38>
 8009fe8:	b93e      	cbnz	r6, 8009ffa <__ieee754_pow+0x42>
 8009fea:	45a0      	cmp	r8, r4
 8009fec:	dc0d      	bgt.n	800a00a <__ieee754_pow+0x52>
 8009fee:	e001      	b.n	8009ff4 <__ieee754_pow+0x3c>
 8009ff0:	4598      	cmp	r8, r3
 8009ff2:	dc02      	bgt.n	8009ffa <__ieee754_pow+0x42>
 8009ff4:	4598      	cmp	r8, r3
 8009ff6:	d10e      	bne.n	800a016 <__ieee754_pow+0x5e>
 8009ff8:	b16a      	cbz	r2, 800a016 <__ieee754_pow+0x5e>
 8009ffa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ffe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a002:	ea54 030a 	orrs.w	r3, r4, sl
 800a006:	f000 84a4 	beq.w	800a952 <__ieee754_pow+0x99a>
 800a00a:	486e      	ldr	r0, [pc, #440]	; (800a1c4 <__ieee754_pow+0x20c>)
 800a00c:	b011      	add	sp, #68	; 0x44
 800a00e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a012:	f000 bda5 	b.w	800ab60 <nan>
 800a016:	2d00      	cmp	r5, #0
 800a018:	da53      	bge.n	800a0c2 <__ieee754_pow+0x10a>
 800a01a:	4b6b      	ldr	r3, [pc, #428]	; (800a1c8 <__ieee754_pow+0x210>)
 800a01c:	4598      	cmp	r8, r3
 800a01e:	dc4d      	bgt.n	800a0bc <__ieee754_pow+0x104>
 800a020:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a024:	4598      	cmp	r8, r3
 800a026:	dd4c      	ble.n	800a0c2 <__ieee754_pow+0x10a>
 800a028:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a02c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a030:	2b14      	cmp	r3, #20
 800a032:	dd26      	ble.n	800a082 <__ieee754_pow+0xca>
 800a034:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a038:	fa22 f103 	lsr.w	r1, r2, r3
 800a03c:	fa01 f303 	lsl.w	r3, r1, r3
 800a040:	4293      	cmp	r3, r2
 800a042:	d13e      	bne.n	800a0c2 <__ieee754_pow+0x10a>
 800a044:	f001 0101 	and.w	r1, r1, #1
 800a048:	f1c1 0b02 	rsb	fp, r1, #2
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d15b      	bne.n	800a108 <__ieee754_pow+0x150>
 800a050:	4b5b      	ldr	r3, [pc, #364]	; (800a1c0 <__ieee754_pow+0x208>)
 800a052:	4598      	cmp	r8, r3
 800a054:	d124      	bne.n	800a0a0 <__ieee754_pow+0xe8>
 800a056:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a05a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a05e:	ea53 030a 	orrs.w	r3, r3, sl
 800a062:	f000 8476 	beq.w	800a952 <__ieee754_pow+0x99a>
 800a066:	4b59      	ldr	r3, [pc, #356]	; (800a1cc <__ieee754_pow+0x214>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	dd2d      	ble.n	800a0c8 <__ieee754_pow+0x110>
 800a06c:	f1b9 0f00 	cmp.w	r9, #0
 800a070:	f280 8473 	bge.w	800a95a <__ieee754_pow+0x9a2>
 800a074:	2000      	movs	r0, #0
 800a076:	2100      	movs	r1, #0
 800a078:	ec41 0b10 	vmov	d0, r0, r1
 800a07c:	b011      	add	sp, #68	; 0x44
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	2a00      	cmp	r2, #0
 800a084:	d13e      	bne.n	800a104 <__ieee754_pow+0x14c>
 800a086:	f1c3 0314 	rsb	r3, r3, #20
 800a08a:	fa48 f103 	asr.w	r1, r8, r3
 800a08e:	fa01 f303 	lsl.w	r3, r1, r3
 800a092:	4543      	cmp	r3, r8
 800a094:	f040 8469 	bne.w	800a96a <__ieee754_pow+0x9b2>
 800a098:	f001 0101 	and.w	r1, r1, #1
 800a09c:	f1c1 0b02 	rsb	fp, r1, #2
 800a0a0:	4b4b      	ldr	r3, [pc, #300]	; (800a1d0 <__ieee754_pow+0x218>)
 800a0a2:	4598      	cmp	r8, r3
 800a0a4:	d118      	bne.n	800a0d8 <__ieee754_pow+0x120>
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	f280 845a 	bge.w	800a962 <__ieee754_pow+0x9aa>
 800a0ae:	4948      	ldr	r1, [pc, #288]	; (800a1d0 <__ieee754_pow+0x218>)
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f7f6 fb6d 	bl	8000794 <__aeabi_ddiv>
 800a0ba:	e7dd      	b.n	800a078 <__ieee754_pow+0xc0>
 800a0bc:	f04f 0b02 	mov.w	fp, #2
 800a0c0:	e7c4      	b.n	800a04c <__ieee754_pow+0x94>
 800a0c2:	f04f 0b00 	mov.w	fp, #0
 800a0c6:	e7c1      	b.n	800a04c <__ieee754_pow+0x94>
 800a0c8:	f1b9 0f00 	cmp.w	r9, #0
 800a0cc:	dad2      	bge.n	800a074 <__ieee754_pow+0xbc>
 800a0ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a0d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a0d6:	e7cf      	b.n	800a078 <__ieee754_pow+0xc0>
 800a0d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a0dc:	d106      	bne.n	800a0ec <__ieee754_pow+0x134>
 800a0de:	4632      	mov	r2, r6
 800a0e0:	463b      	mov	r3, r7
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f7f6 fa2b 	bl	8000540 <__aeabi_dmul>
 800a0ea:	e7c5      	b.n	800a078 <__ieee754_pow+0xc0>
 800a0ec:	4b39      	ldr	r3, [pc, #228]	; (800a1d4 <__ieee754_pow+0x21c>)
 800a0ee:	4599      	cmp	r9, r3
 800a0f0:	d10a      	bne.n	800a108 <__ieee754_pow+0x150>
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	db08      	blt.n	800a108 <__ieee754_pow+0x150>
 800a0f6:	ec47 6b10 	vmov	d0, r6, r7
 800a0fa:	b011      	add	sp, #68	; 0x44
 800a0fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	f000 bc68 	b.w	800a9d4 <__ieee754_sqrt>
 800a104:	f04f 0b00 	mov.w	fp, #0
 800a108:	ec47 6b10 	vmov	d0, r6, r7
 800a10c:	f000 fd12 	bl	800ab34 <fabs>
 800a110:	ec51 0b10 	vmov	r0, r1, d0
 800a114:	f1ba 0f00 	cmp.w	sl, #0
 800a118:	d127      	bne.n	800a16a <__ieee754_pow+0x1b2>
 800a11a:	b124      	cbz	r4, 800a126 <__ieee754_pow+0x16e>
 800a11c:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <__ieee754_pow+0x218>)
 800a11e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a122:	429a      	cmp	r2, r3
 800a124:	d121      	bne.n	800a16a <__ieee754_pow+0x1b2>
 800a126:	f1b9 0f00 	cmp.w	r9, #0
 800a12a:	da05      	bge.n	800a138 <__ieee754_pow+0x180>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	2000      	movs	r0, #0
 800a132:	4927      	ldr	r1, [pc, #156]	; (800a1d0 <__ieee754_pow+0x218>)
 800a134:	f7f6 fb2e 	bl	8000794 <__aeabi_ddiv>
 800a138:	2d00      	cmp	r5, #0
 800a13a:	da9d      	bge.n	800a078 <__ieee754_pow+0xc0>
 800a13c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a144:	ea54 030b 	orrs.w	r3, r4, fp
 800a148:	d108      	bne.n	800a15c <__ieee754_pow+0x1a4>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4610      	mov	r0, r2
 800a150:	4619      	mov	r1, r3
 800a152:	f7f6 f83d 	bl	80001d0 <__aeabi_dsub>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	e7ac      	b.n	800a0b6 <__ieee754_pow+0xfe>
 800a15c:	f1bb 0f01 	cmp.w	fp, #1
 800a160:	d18a      	bne.n	800a078 <__ieee754_pow+0xc0>
 800a162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a166:	4619      	mov	r1, r3
 800a168:	e786      	b.n	800a078 <__ieee754_pow+0xc0>
 800a16a:	0fed      	lsrs	r5, r5, #31
 800a16c:	1e6b      	subs	r3, r5, #1
 800a16e:	930d      	str	r3, [sp, #52]	; 0x34
 800a170:	ea5b 0303 	orrs.w	r3, fp, r3
 800a174:	d102      	bne.n	800a17c <__ieee754_pow+0x1c4>
 800a176:	4632      	mov	r2, r6
 800a178:	463b      	mov	r3, r7
 800a17a:	e7e8      	b.n	800a14e <__ieee754_pow+0x196>
 800a17c:	4b16      	ldr	r3, [pc, #88]	; (800a1d8 <__ieee754_pow+0x220>)
 800a17e:	4598      	cmp	r8, r3
 800a180:	f340 80fe 	ble.w	800a380 <__ieee754_pow+0x3c8>
 800a184:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a188:	4598      	cmp	r8, r3
 800a18a:	dd0a      	ble.n	800a1a2 <__ieee754_pow+0x1ea>
 800a18c:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <__ieee754_pow+0x214>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	dc0d      	bgt.n	800a1ae <__ieee754_pow+0x1f6>
 800a192:	f1b9 0f00 	cmp.w	r9, #0
 800a196:	f6bf af6d 	bge.w	800a074 <__ieee754_pow+0xbc>
 800a19a:	a307      	add	r3, pc, #28	; (adr r3, 800a1b8 <__ieee754_pow+0x200>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	e79f      	b.n	800a0e2 <__ieee754_pow+0x12a>
 800a1a2:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <__ieee754_pow+0x224>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	ddf4      	ble.n	800a192 <__ieee754_pow+0x1da>
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <__ieee754_pow+0x218>)
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	dd18      	ble.n	800a1e0 <__ieee754_pow+0x228>
 800a1ae:	f1b9 0f00 	cmp.w	r9, #0
 800a1b2:	dcf2      	bgt.n	800a19a <__ieee754_pow+0x1e2>
 800a1b4:	e75e      	b.n	800a074 <__ieee754_pow+0xbc>
 800a1b6:	bf00      	nop
 800a1b8:	8800759c 	.word	0x8800759c
 800a1bc:	7e37e43c 	.word	0x7e37e43c
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800adc4 	.word	0x0800adc4
 800a1c8:	433fffff 	.word	0x433fffff
 800a1cc:	3fefffff 	.word	0x3fefffff
 800a1d0:	3ff00000 	.word	0x3ff00000
 800a1d4:	3fe00000 	.word	0x3fe00000
 800a1d8:	41e00000 	.word	0x41e00000
 800a1dc:	3feffffe 	.word	0x3feffffe
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4b63      	ldr	r3, [pc, #396]	; (800a370 <__ieee754_pow+0x3b8>)
 800a1e4:	f7f5 fff4 	bl	80001d0 <__aeabi_dsub>
 800a1e8:	a355      	add	r3, pc, #340	; (adr r3, 800a340 <__ieee754_pow+0x388>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	f7f6 f9a5 	bl	8000540 <__aeabi_dmul>
 800a1f6:	a354      	add	r3, pc, #336	; (adr r3, 800a348 <__ieee754_pow+0x390>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	4620      	mov	r0, r4
 800a202:	4629      	mov	r1, r5
 800a204:	f7f6 f99c 	bl	8000540 <__aeabi_dmul>
 800a208:	2200      	movs	r2, #0
 800a20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20e:	4b59      	ldr	r3, [pc, #356]	; (800a374 <__ieee754_pow+0x3bc>)
 800a210:	4620      	mov	r0, r4
 800a212:	4629      	mov	r1, r5
 800a214:	f7f6 f994 	bl	8000540 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	a14c      	add	r1, pc, #304	; (adr r1, 800a350 <__ieee754_pow+0x398>)
 800a21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a222:	f7f5 ffd5 	bl	80001d0 <__aeabi_dsub>
 800a226:	4622      	mov	r2, r4
 800a228:	462b      	mov	r3, r5
 800a22a:	f7f6 f989 	bl	8000540 <__aeabi_dmul>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	2000      	movs	r0, #0
 800a234:	4950      	ldr	r1, [pc, #320]	; (800a378 <__ieee754_pow+0x3c0>)
 800a236:	f7f5 ffcb 	bl	80001d0 <__aeabi_dsub>
 800a23a:	4622      	mov	r2, r4
 800a23c:	462b      	mov	r3, r5
 800a23e:	4680      	mov	r8, r0
 800a240:	4689      	mov	r9, r1
 800a242:	4620      	mov	r0, r4
 800a244:	4629      	mov	r1, r5
 800a246:	f7f6 f97b 	bl	8000540 <__aeabi_dmul>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	f7f6 f975 	bl	8000540 <__aeabi_dmul>
 800a256:	a340      	add	r3, pc, #256	; (adr r3, 800a358 <__ieee754_pow+0x3a0>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f6 f970 	bl	8000540 <__aeabi_dmul>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a268:	f7f5 ffb2 	bl	80001d0 <__aeabi_dsub>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f7f5 ffac 	bl	80001d4 <__adddf3>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a282:	4632      	mov	r2, r6
 800a284:	463b      	mov	r3, r7
 800a286:	f7f5 ffa3 	bl	80001d0 <__aeabi_dsub>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f7f5 ff9d 	bl	80001d0 <__aeabi_dsub>
 800a296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a298:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a29c:	4313      	orrs	r3, r2
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f040 81eb 	bne.w	800a67c <__ieee754_pow+0x6c4>
 800a2a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a360 <__ieee754_pow+0x3a8>
 800a2aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a2ae:	2400      	movs	r4, #0
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2bc:	f7f5 ff88 	bl	80001d0 <__aeabi_dsub>
 800a2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c4:	f7f6 f93c 	bl	8000540 <__aeabi_dmul>
 800a2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4689      	mov	r9, r1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 f934 	bl	8000540 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f5 ff78 	bl	80001d4 <__adddf3>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	4689      	mov	r9, r1
 800a2ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f0:	f7f6 f926 	bl	8000540 <__aeabi_dmul>
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	4640      	mov	r0, r8
 800a300:	e9cd 4500 	strd	r4, r5, [sp]
 800a304:	f7f5 ff66 	bl	80001d4 <__adddf3>
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <__ieee754_pow+0x3c4>)
 800a30a:	4299      	cmp	r1, r3
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	468b      	mov	fp, r1
 800a312:	f340 82f7 	ble.w	800a904 <__ieee754_pow+0x94c>
 800a316:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a31a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a31e:	4303      	orrs	r3, r0
 800a320:	f000 81ea 	beq.w	800a6f8 <__ieee754_pow+0x740>
 800a324:	a310      	add	r3, pc, #64	; (adr r3, 800a368 <__ieee754_pow+0x3b0>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32e:	f7f6 f907 	bl	8000540 <__aeabi_dmul>
 800a332:	a30d      	add	r3, pc, #52	; (adr r3, 800a368 <__ieee754_pow+0x3b0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	e6d5      	b.n	800a0e6 <__ieee754_pow+0x12e>
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w
 800a340:	60000000 	.word	0x60000000
 800a344:	3ff71547 	.word	0x3ff71547
 800a348:	f85ddf44 	.word	0xf85ddf44
 800a34c:	3e54ae0b 	.word	0x3e54ae0b
 800a350:	55555555 	.word	0x55555555
 800a354:	3fd55555 	.word	0x3fd55555
 800a358:	652b82fe 	.word	0x652b82fe
 800a35c:	3ff71547 	.word	0x3ff71547
 800a360:	00000000 	.word	0x00000000
 800a364:	bff00000 	.word	0xbff00000
 800a368:	8800759c 	.word	0x8800759c
 800a36c:	7e37e43c 	.word	0x7e37e43c
 800a370:	3ff00000 	.word	0x3ff00000
 800a374:	3fd00000 	.word	0x3fd00000
 800a378:	3fe00000 	.word	0x3fe00000
 800a37c:	408fffff 	.word	0x408fffff
 800a380:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	da05      	bge.n	800a396 <__ieee754_pow+0x3de>
 800a38a:	4bd3      	ldr	r3, [pc, #844]	; (800a6d8 <__ieee754_pow+0x720>)
 800a38c:	f7f6 f8d8 	bl	8000540 <__aeabi_dmul>
 800a390:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a394:	460c      	mov	r4, r1
 800a396:	1523      	asrs	r3, r4, #20
 800a398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a39c:	4413      	add	r3, r2
 800a39e:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a0:	4bce      	ldr	r3, [pc, #824]	; (800a6dc <__ieee754_pow+0x724>)
 800a3a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a3a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a3b0:	dd08      	ble.n	800a3c4 <__ieee754_pow+0x40c>
 800a3b2:	4bcb      	ldr	r3, [pc, #812]	; (800a6e0 <__ieee754_pow+0x728>)
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	f340 815e 	ble.w	800a676 <__ieee754_pow+0x6be>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	3301      	adds	r3, #1
 800a3be:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a3c4:	f04f 0a00 	mov.w	sl, #0
 800a3c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a3cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a3ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d0:	4bc4      	ldr	r3, [pc, #784]	; (800a6e4 <__ieee754_pow+0x72c>)
 800a3d2:	4413      	add	r3, r2
 800a3d4:	ed93 7b00 	vldr	d7, [r3]
 800a3d8:	4629      	mov	r1, r5
 800a3da:	ec53 2b17 	vmov	r2, r3, d7
 800a3de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3e6:	f7f5 fef3 	bl	80001d0 <__aeabi_dsub>
 800a3ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3f6:	f7f5 feed 	bl	80001d4 <__adddf3>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	2000      	movs	r0, #0
 800a400:	49b9      	ldr	r1, [pc, #740]	; (800a6e8 <__ieee754_pow+0x730>)
 800a402:	f7f6 f9c7 	bl	8000794 <__aeabi_ddiv>
 800a406:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4630      	mov	r0, r6
 800a410:	4639      	mov	r1, r7
 800a412:	f7f6 f895 	bl	8000540 <__aeabi_dmul>
 800a416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a41a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a41e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a422:	2300      	movs	r3, #0
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a42a:	106d      	asrs	r5, r5, #1
 800a42c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a430:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a434:	2200      	movs	r2, #0
 800a436:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a43a:	4640      	mov	r0, r8
 800a43c:	4649      	mov	r1, r9
 800a43e:	4614      	mov	r4, r2
 800a440:	461d      	mov	r5, r3
 800a442:	f7f6 f87d 	bl	8000540 <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f5 febf 	bl	80001d0 <__aeabi_dsub>
 800a452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a456:	4606      	mov	r6, r0
 800a458:	460f      	mov	r7, r1
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7f5 feb7 	bl	80001d0 <__aeabi_dsub>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a46a:	f7f5 feb1 	bl	80001d0 <__aeabi_dsub>
 800a46e:	4642      	mov	r2, r8
 800a470:	464b      	mov	r3, r9
 800a472:	f7f6 f865 	bl	8000540 <__aeabi_dmul>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4630      	mov	r0, r6
 800a47c:	4639      	mov	r1, r7
 800a47e:	f7f5 fea7 	bl	80001d0 <__aeabi_dsub>
 800a482:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a486:	f7f6 f85b 	bl	8000540 <__aeabi_dmul>
 800a48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a492:	4610      	mov	r0, r2
 800a494:	4619      	mov	r1, r3
 800a496:	f7f6 f853 	bl	8000540 <__aeabi_dmul>
 800a49a:	a37b      	add	r3, pc, #492	; (adr r3, 800a688 <__ieee754_pow+0x6d0>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	f7f6 f84c 	bl	8000540 <__aeabi_dmul>
 800a4a8:	a379      	add	r3, pc, #484	; (adr r3, 800a690 <__ieee754_pow+0x6d8>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	f7f5 fe91 	bl	80001d4 <__adddf3>
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	f7f6 f843 	bl	8000540 <__aeabi_dmul>
 800a4ba:	a377      	add	r3, pc, #476	; (adr r3, 800a698 <__ieee754_pow+0x6e0>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	f7f5 fe88 	bl	80001d4 <__adddf3>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	462b      	mov	r3, r5
 800a4c8:	f7f6 f83a 	bl	8000540 <__aeabi_dmul>
 800a4cc:	a374      	add	r3, pc, #464	; (adr r3, 800a6a0 <__ieee754_pow+0x6e8>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f5 fe7f 	bl	80001d4 <__adddf3>
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	462b      	mov	r3, r5
 800a4da:	f7f6 f831 	bl	8000540 <__aeabi_dmul>
 800a4de:	a372      	add	r3, pc, #456	; (adr r3, 800a6a8 <__ieee754_pow+0x6f0>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f7f5 fe76 	bl	80001d4 <__adddf3>
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	f7f6 f828 	bl	8000540 <__aeabi_dmul>
 800a4f0:	a36f      	add	r3, pc, #444	; (adr r3, 800a6b0 <__ieee754_pow+0x6f8>)
 800a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f6:	f7f5 fe6d 	bl	80001d4 <__adddf3>
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	462b      	mov	r3, r5
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	f7f6 f81b 	bl	8000540 <__aeabi_dmul>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 f815 	bl	8000540 <__aeabi_dmul>
 800a516:	4642      	mov	r2, r8
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	464b      	mov	r3, r9
 800a51e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a522:	f7f5 fe57 	bl	80001d4 <__adddf3>
 800a526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a52a:	f7f6 f809 	bl	8000540 <__aeabi_dmul>
 800a52e:	4622      	mov	r2, r4
 800a530:	462b      	mov	r3, r5
 800a532:	f7f5 fe4f 	bl	80001d4 <__adddf3>
 800a536:	4642      	mov	r2, r8
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	464b      	mov	r3, r9
 800a53e:	4640      	mov	r0, r8
 800a540:	4649      	mov	r1, r9
 800a542:	f7f5 fffd 	bl	8000540 <__aeabi_dmul>
 800a546:	2200      	movs	r2, #0
 800a548:	4b68      	ldr	r3, [pc, #416]	; (800a6ec <__ieee754_pow+0x734>)
 800a54a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a54e:	f7f5 fe41 	bl	80001d4 <__adddf3>
 800a552:	4632      	mov	r2, r6
 800a554:	463b      	mov	r3, r7
 800a556:	f7f5 fe3d 	bl	80001d4 <__adddf3>
 800a55a:	9802      	ldr	r0, [sp, #8]
 800a55c:	460d      	mov	r5, r1
 800a55e:	4604      	mov	r4, r0
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f5 ffea 	bl	8000540 <__aeabi_dmul>
 800a56c:	2200      	movs	r2, #0
 800a56e:	4680      	mov	r8, r0
 800a570:	4689      	mov	r9, r1
 800a572:	4b5e      	ldr	r3, [pc, #376]	; (800a6ec <__ieee754_pow+0x734>)
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fe2a 	bl	80001d0 <__aeabi_dsub>
 800a57c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a580:	f7f5 fe26 	bl	80001d0 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 fe20 	bl	80001d0 <__aeabi_dsub>
 800a590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a594:	f7f5 ffd4 	bl	8000540 <__aeabi_dmul>
 800a598:	4622      	mov	r2, r4
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	462b      	mov	r3, r5
 800a5a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5a4:	f7f5 ffcc 	bl	8000540 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f5 fe10 	bl	80001d4 <__adddf3>
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4640      	mov	r0, r8
 800a5be:	4649      	mov	r1, r9
 800a5c0:	f7f5 fe08 	bl	80001d4 <__adddf3>
 800a5c4:	9802      	ldr	r0, [sp, #8]
 800a5c6:	a33c      	add	r3, pc, #240	; (adr r3, 800a6b8 <__ieee754_pow+0x700>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	f7f5 ffb6 	bl	8000540 <__aeabi_dmul>
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5da:	464b      	mov	r3, r9
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f5 fdf6 	bl	80001d0 <__aeabi_dsub>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fdf0 	bl	80001d0 <__aeabi_dsub>
 800a5f0:	a333      	add	r3, pc, #204	; (adr r3, 800a6c0 <__ieee754_pow+0x708>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 ffa3 	bl	8000540 <__aeabi_dmul>
 800a5fa:	a333      	add	r3, pc, #204	; (adr r3, 800a6c8 <__ieee754_pow+0x710>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	4606      	mov	r6, r0
 800a602:	460f      	mov	r7, r1
 800a604:	4620      	mov	r0, r4
 800a606:	4629      	mov	r1, r5
 800a608:	f7f5 ff9a 	bl	8000540 <__aeabi_dmul>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f5 fdde 	bl	80001d4 <__adddf3>
 800a618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a61a:	4b35      	ldr	r3, [pc, #212]	; (800a6f0 <__ieee754_pow+0x738>)
 800a61c:	4413      	add	r3, r2
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 fdd7 	bl	80001d4 <__adddf3>
 800a626:	4604      	mov	r4, r0
 800a628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a62a:	460d      	mov	r5, r1
 800a62c:	f7f5 ff1e 	bl	800046c <__aeabi_i2d>
 800a630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a632:	4b30      	ldr	r3, [pc, #192]	; (800a6f4 <__ieee754_pow+0x73c>)
 800a634:	4413      	add	r3, r2
 800a636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a63a:	4606      	mov	r6, r0
 800a63c:	460f      	mov	r7, r1
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a646:	f7f5 fdc5 	bl	80001d4 <__adddf3>
 800a64a:	4642      	mov	r2, r8
 800a64c:	464b      	mov	r3, r9
 800a64e:	f7f5 fdc1 	bl	80001d4 <__adddf3>
 800a652:	4632      	mov	r2, r6
 800a654:	463b      	mov	r3, r7
 800a656:	f7f5 fdbd 	bl	80001d4 <__adddf3>
 800a65a:	9802      	ldr	r0, [sp, #8]
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a664:	f7f5 fdb4 	bl	80001d0 <__aeabi_dsub>
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	f7f5 fdb0 	bl	80001d0 <__aeabi_dsub>
 800a670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a674:	e607      	b.n	800a286 <__ieee754_pow+0x2ce>
 800a676:	f04f 0a01 	mov.w	sl, #1
 800a67a:	e6a5      	b.n	800a3c8 <__ieee754_pow+0x410>
 800a67c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a6d0 <__ieee754_pow+0x718>
 800a680:	e613      	b.n	800a2aa <__ieee754_pow+0x2f2>
 800a682:	bf00      	nop
 800a684:	f3af 8000 	nop.w
 800a688:	4a454eef 	.word	0x4a454eef
 800a68c:	3fca7e28 	.word	0x3fca7e28
 800a690:	93c9db65 	.word	0x93c9db65
 800a694:	3fcd864a 	.word	0x3fcd864a
 800a698:	a91d4101 	.word	0xa91d4101
 800a69c:	3fd17460 	.word	0x3fd17460
 800a6a0:	518f264d 	.word	0x518f264d
 800a6a4:	3fd55555 	.word	0x3fd55555
 800a6a8:	db6fabff 	.word	0xdb6fabff
 800a6ac:	3fdb6db6 	.word	0x3fdb6db6
 800a6b0:	33333303 	.word	0x33333303
 800a6b4:	3fe33333 	.word	0x3fe33333
 800a6b8:	e0000000 	.word	0xe0000000
 800a6bc:	3feec709 	.word	0x3feec709
 800a6c0:	dc3a03fd 	.word	0xdc3a03fd
 800a6c4:	3feec709 	.word	0x3feec709
 800a6c8:	145b01f5 	.word	0x145b01f5
 800a6cc:	be3e2fe0 	.word	0xbe3e2fe0
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	43400000 	.word	0x43400000
 800a6dc:	0003988e 	.word	0x0003988e
 800a6e0:	000bb679 	.word	0x000bb679
 800a6e4:	0800adc8 	.word	0x0800adc8
 800a6e8:	3ff00000 	.word	0x3ff00000
 800a6ec:	40080000 	.word	0x40080000
 800a6f0:	0800ade8 	.word	0x0800ade8
 800a6f4:	0800add8 	.word	0x0800add8
 800a6f8:	a3b4      	add	r3, pc, #720	; (adr r3, 800a9cc <__ieee754_pow+0xa14>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f5 fd67 	bl	80001d4 <__adddf3>
 800a706:	4622      	mov	r2, r4
 800a708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a70c:	462b      	mov	r3, r5
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	f7f5 fd5d 	bl	80001d0 <__aeabi_dsub>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a71e:	f7f6 f99f 	bl	8000a60 <__aeabi_dcmpgt>
 800a722:	2800      	cmp	r0, #0
 800a724:	f47f adfe 	bne.w	800a324 <__ieee754_pow+0x36c>
 800a728:	4aa3      	ldr	r2, [pc, #652]	; (800a9b8 <__ieee754_pow+0xa00>)
 800a72a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a72e:	4293      	cmp	r3, r2
 800a730:	f340 810a 	ble.w	800a948 <__ieee754_pow+0x990>
 800a734:	151b      	asrs	r3, r3, #20
 800a736:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a73a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a73e:	fa4a f303 	asr.w	r3, sl, r3
 800a742:	445b      	add	r3, fp
 800a744:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a748:	4e9c      	ldr	r6, [pc, #624]	; (800a9bc <__ieee754_pow+0xa04>)
 800a74a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a74e:	4116      	asrs	r6, r2
 800a750:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a754:	2000      	movs	r0, #0
 800a756:	ea23 0106 	bic.w	r1, r3, r6
 800a75a:	f1c2 0214 	rsb	r2, r2, #20
 800a75e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a762:	fa4a fa02 	asr.w	sl, sl, r2
 800a766:	f1bb 0f00 	cmp.w	fp, #0
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	bfb8      	it	lt
 800a774:	f1ca 0a00 	rsblt	sl, sl, #0
 800a778:	f7f5 fd2a 	bl	80001d0 <__aeabi_dsub>
 800a77c:	e9cd 0100 	strd	r0, r1, [sp]
 800a780:	4642      	mov	r2, r8
 800a782:	464b      	mov	r3, r9
 800a784:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a788:	f7f5 fd24 	bl	80001d4 <__adddf3>
 800a78c:	2000      	movs	r0, #0
 800a78e:	a378      	add	r3, pc, #480	; (adr r3, 800a970 <__ieee754_pow+0x9b8>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	f7f5 fed2 	bl	8000540 <__aeabi_dmul>
 800a79c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 fd12 	bl	80001d0 <__aeabi_dsub>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f7f5 fd0c 	bl	80001d0 <__aeabi_dsub>
 800a7b8:	a36f      	add	r3, pc, #444	; (adr r3, 800a978 <__ieee754_pow+0x9c0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 febf 	bl	8000540 <__aeabi_dmul>
 800a7c2:	a36f      	add	r3, pc, #444	; (adr r3, 800a980 <__ieee754_pow+0x9c8>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 feb6 	bl	8000540 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 fcfa 	bl	80001d4 <__adddf3>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fcf2 	bl	80001d4 <__adddf3>
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	f7f5 fcea 	bl	80001d0 <__aeabi_dsub>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4620      	mov	r0, r4
 800a802:	4629      	mov	r1, r5
 800a804:	f7f5 fce4 	bl	80001d0 <__aeabi_dsub>
 800a808:	4642      	mov	r2, r8
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	464b      	mov	r3, r9
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f5 fe94 	bl	8000540 <__aeabi_dmul>
 800a818:	a35b      	add	r3, pc, #364	; (adr r3, 800a988 <__ieee754_pow+0x9d0>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	4604      	mov	r4, r0
 800a820:	460d      	mov	r5, r1
 800a822:	f7f5 fe8d 	bl	8000540 <__aeabi_dmul>
 800a826:	a35a      	add	r3, pc, #360	; (adr r3, 800a990 <__ieee754_pow+0x9d8>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fcd0 	bl	80001d0 <__aeabi_dsub>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fe84 	bl	8000540 <__aeabi_dmul>
 800a838:	a357      	add	r3, pc, #348	; (adr r3, 800a998 <__ieee754_pow+0x9e0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fcc9 	bl	80001d4 <__adddf3>
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	f7f5 fe7b 	bl	8000540 <__aeabi_dmul>
 800a84a:	a355      	add	r3, pc, #340	; (adr r3, 800a9a0 <__ieee754_pow+0x9e8>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f7f5 fcbe 	bl	80001d0 <__aeabi_dsub>
 800a854:	4622      	mov	r2, r4
 800a856:	462b      	mov	r3, r5
 800a858:	f7f5 fe72 	bl	8000540 <__aeabi_dmul>
 800a85c:	a352      	add	r3, pc, #328	; (adr r3, 800a9a8 <__ieee754_pow+0x9f0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fcb7 	bl	80001d4 <__adddf3>
 800a866:	4622      	mov	r2, r4
 800a868:	462b      	mov	r3, r5
 800a86a:	f7f5 fe69 	bl	8000540 <__aeabi_dmul>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fcab 	bl	80001d0 <__aeabi_dsub>
 800a87a:	4604      	mov	r4, r0
 800a87c:	460d      	mov	r5, r1
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4640      	mov	r0, r8
 800a884:	4649      	mov	r1, r9
 800a886:	f7f5 fe5b 	bl	8000540 <__aeabi_dmul>
 800a88a:	2200      	movs	r2, #0
 800a88c:	e9cd 0100 	strd	r0, r1, [sp]
 800a890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fc9a 	bl	80001d0 <__aeabi_dsub>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8a4:	f7f5 ff76 	bl	8000794 <__aeabi_ddiv>
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f5 fe44 	bl	8000540 <__aeabi_dmul>
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	f7f5 fc8a 	bl	80001d4 <__adddf3>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fc82 	bl	80001d0 <__aeabi_dsub>
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	464b      	mov	r3, r9
 800a8d0:	f7f5 fc7e 	bl	80001d0 <__aeabi_dsub>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	2000      	movs	r0, #0
 800a8da:	4939      	ldr	r1, [pc, #228]	; (800a9c0 <__ieee754_pow+0xa08>)
 800a8dc:	f7f5 fc78 	bl	80001d0 <__aeabi_dsub>
 800a8e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a8e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	da2f      	bge.n	800a94e <__ieee754_pow+0x996>
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	ec43 2b10 	vmov	d0, r2, r3
 800a8f4:	f000 f9c0 	bl	800ac78 <scalbn>
 800a8f8:	ec51 0b10 	vmov	r0, r1, d0
 800a8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a900:	f7ff bbf1 	b.w	800a0e6 <__ieee754_pow+0x12e>
 800a904:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <__ieee754_pow+0xa0c>)
 800a906:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a90a:	429e      	cmp	r6, r3
 800a90c:	f77f af0c 	ble.w	800a728 <__ieee754_pow+0x770>
 800a910:	4b2d      	ldr	r3, [pc, #180]	; (800a9c8 <__ieee754_pow+0xa10>)
 800a912:	440b      	add	r3, r1
 800a914:	4303      	orrs	r3, r0
 800a916:	d00b      	beq.n	800a930 <__ieee754_pow+0x978>
 800a918:	a325      	add	r3, pc, #148	; (adr r3, 800a9b0 <__ieee754_pow+0x9f8>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a922:	f7f5 fe0d 	bl	8000540 <__aeabi_dmul>
 800a926:	a322      	add	r3, pc, #136	; (adr r3, 800a9b0 <__ieee754_pow+0x9f8>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7ff bbdb 	b.w	800a0e6 <__ieee754_pow+0x12e>
 800a930:	4622      	mov	r2, r4
 800a932:	462b      	mov	r3, r5
 800a934:	f7f5 fc4c 	bl	80001d0 <__aeabi_dsub>
 800a938:	4642      	mov	r2, r8
 800a93a:	464b      	mov	r3, r9
 800a93c:	f7f6 f886 	bl	8000a4c <__aeabi_dcmpge>
 800a940:	2800      	cmp	r0, #0
 800a942:	f43f aef1 	beq.w	800a728 <__ieee754_pow+0x770>
 800a946:	e7e7      	b.n	800a918 <__ieee754_pow+0x960>
 800a948:	f04f 0a00 	mov.w	sl, #0
 800a94c:	e718      	b.n	800a780 <__ieee754_pow+0x7c8>
 800a94e:	4621      	mov	r1, r4
 800a950:	e7d4      	b.n	800a8fc <__ieee754_pow+0x944>
 800a952:	2000      	movs	r0, #0
 800a954:	491a      	ldr	r1, [pc, #104]	; (800a9c0 <__ieee754_pow+0xa08>)
 800a956:	f7ff bb8f 	b.w	800a078 <__ieee754_pow+0xc0>
 800a95a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a95e:	f7ff bb8b 	b.w	800a078 <__ieee754_pow+0xc0>
 800a962:	4630      	mov	r0, r6
 800a964:	4639      	mov	r1, r7
 800a966:	f7ff bb87 	b.w	800a078 <__ieee754_pow+0xc0>
 800a96a:	4693      	mov	fp, r2
 800a96c:	f7ff bb98 	b.w	800a0a0 <__ieee754_pow+0xe8>
 800a970:	00000000 	.word	0x00000000
 800a974:	3fe62e43 	.word	0x3fe62e43
 800a978:	fefa39ef 	.word	0xfefa39ef
 800a97c:	3fe62e42 	.word	0x3fe62e42
 800a980:	0ca86c39 	.word	0x0ca86c39
 800a984:	be205c61 	.word	0xbe205c61
 800a988:	72bea4d0 	.word	0x72bea4d0
 800a98c:	3e663769 	.word	0x3e663769
 800a990:	c5d26bf1 	.word	0xc5d26bf1
 800a994:	3ebbbd41 	.word	0x3ebbbd41
 800a998:	af25de2c 	.word	0xaf25de2c
 800a99c:	3f11566a 	.word	0x3f11566a
 800a9a0:	16bebd93 	.word	0x16bebd93
 800a9a4:	3f66c16c 	.word	0x3f66c16c
 800a9a8:	5555553e 	.word	0x5555553e
 800a9ac:	3fc55555 	.word	0x3fc55555
 800a9b0:	c2f8f359 	.word	0xc2f8f359
 800a9b4:	01a56e1f 	.word	0x01a56e1f
 800a9b8:	3fe00000 	.word	0x3fe00000
 800a9bc:	000fffff 	.word	0x000fffff
 800a9c0:	3ff00000 	.word	0x3ff00000
 800a9c4:	4090cbff 	.word	0x4090cbff
 800a9c8:	3f6f3400 	.word	0x3f6f3400
 800a9cc:	652b82fe 	.word	0x652b82fe
 800a9d0:	3c971547 	.word	0x3c971547

0800a9d4 <__ieee754_sqrt>:
 800a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d8:	4955      	ldr	r1, [pc, #340]	; (800ab30 <__ieee754_sqrt+0x15c>)
 800a9da:	ec55 4b10 	vmov	r4, r5, d0
 800a9de:	43a9      	bics	r1, r5
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	d112      	bne.n	800aa0c <__ieee754_sqrt+0x38>
 800a9e6:	ee10 2a10 	vmov	r2, s0
 800a9ea:	ee10 0a10 	vmov	r0, s0
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fda6 	bl	8000540 <__aeabi_dmul>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	f7f5 fbea 	bl	80001d4 <__adddf3>
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	ec45 4b10 	vmov	d0, r4, r5
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	2d00      	cmp	r5, #0
 800aa0e:	ee10 0a10 	vmov	r0, s0
 800aa12:	4621      	mov	r1, r4
 800aa14:	dc0f      	bgt.n	800aa36 <__ieee754_sqrt+0x62>
 800aa16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aa1a:	4330      	orrs	r0, r6
 800aa1c:	d0f2      	beq.n	800aa04 <__ieee754_sqrt+0x30>
 800aa1e:	b155      	cbz	r5, 800aa36 <__ieee754_sqrt+0x62>
 800aa20:	ee10 2a10 	vmov	r2, s0
 800aa24:	4620      	mov	r0, r4
 800aa26:	4629      	mov	r1, r5
 800aa28:	f7f5 fbd2 	bl	80001d0 <__aeabi_dsub>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	f7f5 feb0 	bl	8000794 <__aeabi_ddiv>
 800aa34:	e7e4      	b.n	800aa00 <__ieee754_sqrt+0x2c>
 800aa36:	151b      	asrs	r3, r3, #20
 800aa38:	d073      	beq.n	800ab22 <__ieee754_sqrt+0x14e>
 800aa3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa3e:	07dd      	lsls	r5, r3, #31
 800aa40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aa44:	bf48      	it	mi
 800aa46:	0fc8      	lsrmi	r0, r1, #31
 800aa48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa4c:	bf44      	itt	mi
 800aa4e:	0049      	lslmi	r1, r1, #1
 800aa50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800aa54:	2500      	movs	r5, #0
 800aa56:	1058      	asrs	r0, r3, #1
 800aa58:	0fcb      	lsrs	r3, r1, #31
 800aa5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800aa5e:	0049      	lsls	r1, r1, #1
 800aa60:	2316      	movs	r3, #22
 800aa62:	462c      	mov	r4, r5
 800aa64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aa68:	19a7      	adds	r7, r4, r6
 800aa6a:	4297      	cmp	r7, r2
 800aa6c:	bfde      	ittt	le
 800aa6e:	19bc      	addle	r4, r7, r6
 800aa70:	1bd2      	suble	r2, r2, r7
 800aa72:	19ad      	addle	r5, r5, r6
 800aa74:	0fcf      	lsrs	r7, r1, #31
 800aa76:	3b01      	subs	r3, #1
 800aa78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800aa7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa84:	d1f0      	bne.n	800aa68 <__ieee754_sqrt+0x94>
 800aa86:	f04f 0c20 	mov.w	ip, #32
 800aa8a:	469e      	mov	lr, r3
 800aa8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa90:	42a2      	cmp	r2, r4
 800aa92:	eb06 070e 	add.w	r7, r6, lr
 800aa96:	dc02      	bgt.n	800aa9e <__ieee754_sqrt+0xca>
 800aa98:	d112      	bne.n	800aac0 <__ieee754_sqrt+0xec>
 800aa9a:	428f      	cmp	r7, r1
 800aa9c:	d810      	bhi.n	800aac0 <__ieee754_sqrt+0xec>
 800aa9e:	2f00      	cmp	r7, #0
 800aaa0:	eb07 0e06 	add.w	lr, r7, r6
 800aaa4:	da42      	bge.n	800ab2c <__ieee754_sqrt+0x158>
 800aaa6:	f1be 0f00 	cmp.w	lr, #0
 800aaaa:	db3f      	blt.n	800ab2c <__ieee754_sqrt+0x158>
 800aaac:	f104 0801 	add.w	r8, r4, #1
 800aab0:	1b12      	subs	r2, r2, r4
 800aab2:	428f      	cmp	r7, r1
 800aab4:	bf88      	it	hi
 800aab6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800aaba:	1bc9      	subs	r1, r1, r7
 800aabc:	4433      	add	r3, r6
 800aabe:	4644      	mov	r4, r8
 800aac0:	0052      	lsls	r2, r2, #1
 800aac2:	f1bc 0c01 	subs.w	ip, ip, #1
 800aac6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800aaca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aace:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aad2:	d1dd      	bne.n	800aa90 <__ieee754_sqrt+0xbc>
 800aad4:	430a      	orrs	r2, r1
 800aad6:	d006      	beq.n	800aae6 <__ieee754_sqrt+0x112>
 800aad8:	1c5c      	adds	r4, r3, #1
 800aada:	bf13      	iteet	ne
 800aadc:	3301      	addne	r3, #1
 800aade:	3501      	addeq	r5, #1
 800aae0:	4663      	moveq	r3, ip
 800aae2:	f023 0301 	bicne.w	r3, r3, #1
 800aae6:	106a      	asrs	r2, r5, #1
 800aae8:	085b      	lsrs	r3, r3, #1
 800aaea:	07e9      	lsls	r1, r5, #31
 800aaec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aaf0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aaf4:	bf48      	it	mi
 800aaf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aafa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800aafe:	461c      	mov	r4, r3
 800ab00:	e780      	b.n	800aa04 <__ieee754_sqrt+0x30>
 800ab02:	0aca      	lsrs	r2, r1, #11
 800ab04:	3815      	subs	r0, #21
 800ab06:	0549      	lsls	r1, r1, #21
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d0fa      	beq.n	800ab02 <__ieee754_sqrt+0x12e>
 800ab0c:	02d6      	lsls	r6, r2, #11
 800ab0e:	d50a      	bpl.n	800ab26 <__ieee754_sqrt+0x152>
 800ab10:	f1c3 0420 	rsb	r4, r3, #32
 800ab14:	fa21 f404 	lsr.w	r4, r1, r4
 800ab18:	1e5d      	subs	r5, r3, #1
 800ab1a:	4099      	lsls	r1, r3
 800ab1c:	4322      	orrs	r2, r4
 800ab1e:	1b43      	subs	r3, r0, r5
 800ab20:	e78b      	b.n	800aa3a <__ieee754_sqrt+0x66>
 800ab22:	4618      	mov	r0, r3
 800ab24:	e7f0      	b.n	800ab08 <__ieee754_sqrt+0x134>
 800ab26:	0052      	lsls	r2, r2, #1
 800ab28:	3301      	adds	r3, #1
 800ab2a:	e7ef      	b.n	800ab0c <__ieee754_sqrt+0x138>
 800ab2c:	46a0      	mov	r8, r4
 800ab2e:	e7bf      	b.n	800aab0 <__ieee754_sqrt+0xdc>
 800ab30:	7ff00000 	.word	0x7ff00000

0800ab34 <fabs>:
 800ab34:	ec51 0b10 	vmov	r0, r1, d0
 800ab38:	ee10 2a10 	vmov	r2, s0
 800ab3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab40:	ec43 2b10 	vmov	d0, r2, r3
 800ab44:	4770      	bx	lr

0800ab46 <finite>:
 800ab46:	ee10 3a90 	vmov	r3, s1
 800ab4a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ab4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ab52:	0fc0      	lsrs	r0, r0, #31
 800ab54:	4770      	bx	lr

0800ab56 <matherr>:
 800ab56:	2000      	movs	r0, #0
 800ab58:	4770      	bx	lr
 800ab5a:	0000      	movs	r0, r0
 800ab5c:	0000      	movs	r0, r0
	...

0800ab60 <nan>:
 800ab60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab68 <nan+0x8>
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	7ff80000 	.word	0x7ff80000

0800ab70 <rint>:
 800ab70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab72:	ec51 0b10 	vmov	r0, r1, d0
 800ab76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ab7e:	2e13      	cmp	r6, #19
 800ab80:	460b      	mov	r3, r1
 800ab82:	ee10 4a10 	vmov	r4, s0
 800ab86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ab8a:	dc56      	bgt.n	800ac3a <rint+0xca>
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	da2b      	bge.n	800abe8 <rint+0x78>
 800ab90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ab94:	4302      	orrs	r2, r0
 800ab96:	d023      	beq.n	800abe0 <rint+0x70>
 800ab98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ab9c:	4302      	orrs	r2, r0
 800ab9e:	4254      	negs	r4, r2
 800aba0:	4314      	orrs	r4, r2
 800aba2:	0c4b      	lsrs	r3, r1, #17
 800aba4:	0b24      	lsrs	r4, r4, #12
 800aba6:	045b      	lsls	r3, r3, #17
 800aba8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800abac:	ea44 0103 	orr.w	r1, r4, r3
 800abb0:	460b      	mov	r3, r1
 800abb2:	492f      	ldr	r1, [pc, #188]	; (800ac70 <rint+0x100>)
 800abb4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800abb8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800abbc:	4602      	mov	r2, r0
 800abbe:	4639      	mov	r1, r7
 800abc0:	4630      	mov	r0, r6
 800abc2:	f7f5 fb07 	bl	80001d4 <__adddf3>
 800abc6:	e9cd 0100 	strd	r0, r1, [sp]
 800abca:	463b      	mov	r3, r7
 800abcc:	4632      	mov	r2, r6
 800abce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd2:	f7f5 fafd 	bl	80001d0 <__aeabi_dsub>
 800abd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800abde:	4639      	mov	r1, r7
 800abe0:	ec41 0b10 	vmov	d0, r0, r1
 800abe4:	b003      	add	sp, #12
 800abe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe8:	4a22      	ldr	r2, [pc, #136]	; (800ac74 <rint+0x104>)
 800abea:	4132      	asrs	r2, r6
 800abec:	ea01 0702 	and.w	r7, r1, r2
 800abf0:	4307      	orrs	r7, r0
 800abf2:	d0f5      	beq.n	800abe0 <rint+0x70>
 800abf4:	0852      	lsrs	r2, r2, #1
 800abf6:	4011      	ands	r1, r2
 800abf8:	430c      	orrs	r4, r1
 800abfa:	d00b      	beq.n	800ac14 <rint+0xa4>
 800abfc:	ea23 0202 	bic.w	r2, r3, r2
 800ac00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac04:	2e13      	cmp	r6, #19
 800ac06:	fa43 f306 	asr.w	r3, r3, r6
 800ac0a:	bf0c      	ite	eq
 800ac0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ac10:	2400      	movne	r4, #0
 800ac12:	4313      	orrs	r3, r2
 800ac14:	4916      	ldr	r1, [pc, #88]	; (800ac70 <rint+0x100>)
 800ac16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac20:	4620      	mov	r0, r4
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fad6 	bl	80001d4 <__adddf3>
 800ac28:	e9cd 0100 	strd	r0, r1, [sp]
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	462b      	mov	r3, r5
 800ac30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac34:	f7f5 facc 	bl	80001d0 <__aeabi_dsub>
 800ac38:	e7d2      	b.n	800abe0 <rint+0x70>
 800ac3a:	2e33      	cmp	r6, #51	; 0x33
 800ac3c:	dd07      	ble.n	800ac4e <rint+0xde>
 800ac3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ac42:	d1cd      	bne.n	800abe0 <rint+0x70>
 800ac44:	ee10 2a10 	vmov	r2, s0
 800ac48:	f7f5 fac4 	bl	80001d4 <__adddf3>
 800ac4c:	e7c8      	b.n	800abe0 <rint+0x70>
 800ac4e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ac52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac56:	40f2      	lsrs	r2, r6
 800ac58:	4210      	tst	r0, r2
 800ac5a:	d0c1      	beq.n	800abe0 <rint+0x70>
 800ac5c:	0852      	lsrs	r2, r2, #1
 800ac5e:	4210      	tst	r0, r2
 800ac60:	bf1f      	itttt	ne
 800ac62:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ac66:	ea20 0202 	bicne.w	r2, r0, r2
 800ac6a:	4134      	asrne	r4, r6
 800ac6c:	4314      	orrne	r4, r2
 800ac6e:	e7d1      	b.n	800ac14 <rint+0xa4>
 800ac70:	0800adf8 	.word	0x0800adf8
 800ac74:	000fffff 	.word	0x000fffff

0800ac78 <scalbn>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	ec55 4b10 	vmov	r4, r5, d0
 800ac7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ac82:	4606      	mov	r6, r0
 800ac84:	462b      	mov	r3, r5
 800ac86:	b9aa      	cbnz	r2, 800acb4 <scalbn+0x3c>
 800ac88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac8c:	4323      	orrs	r3, r4
 800ac8e:	d03b      	beq.n	800ad08 <scalbn+0x90>
 800ac90:	4b31      	ldr	r3, [pc, #196]	; (800ad58 <scalbn+0xe0>)
 800ac92:	4629      	mov	r1, r5
 800ac94:	2200      	movs	r2, #0
 800ac96:	ee10 0a10 	vmov	r0, s0
 800ac9a:	f7f5 fc51 	bl	8000540 <__aeabi_dmul>
 800ac9e:	4b2f      	ldr	r3, [pc, #188]	; (800ad5c <scalbn+0xe4>)
 800aca0:	429e      	cmp	r6, r3
 800aca2:	4604      	mov	r4, r0
 800aca4:	460d      	mov	r5, r1
 800aca6:	da12      	bge.n	800acce <scalbn+0x56>
 800aca8:	a327      	add	r3, pc, #156	; (adr r3, 800ad48 <scalbn+0xd0>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 fc47 	bl	8000540 <__aeabi_dmul>
 800acb2:	e009      	b.n	800acc8 <scalbn+0x50>
 800acb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800acb8:	428a      	cmp	r2, r1
 800acba:	d10c      	bne.n	800acd6 <scalbn+0x5e>
 800acbc:	ee10 2a10 	vmov	r2, s0
 800acc0:	4620      	mov	r0, r4
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 fa86 	bl	80001d4 <__adddf3>
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	e01c      	b.n	800ad08 <scalbn+0x90>
 800acce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800acd2:	460b      	mov	r3, r1
 800acd4:	3a36      	subs	r2, #54	; 0x36
 800acd6:	4432      	add	r2, r6
 800acd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800acdc:	428a      	cmp	r2, r1
 800acde:	dd0b      	ble.n	800acf8 <scalbn+0x80>
 800ace0:	ec45 4b11 	vmov	d1, r4, r5
 800ace4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ad50 <scalbn+0xd8>
 800ace8:	f000 f83c 	bl	800ad64 <copysign>
 800acec:	a318      	add	r3, pc, #96	; (adr r3, 800ad50 <scalbn+0xd8>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	ec51 0b10 	vmov	r0, r1, d0
 800acf6:	e7da      	b.n	800acae <scalbn+0x36>
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	dd08      	ble.n	800ad0e <scalbn+0x96>
 800acfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad08:	ec45 4b10 	vmov	d0, r4, r5
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ad12:	da0d      	bge.n	800ad30 <scalbn+0xb8>
 800ad14:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad18:	429e      	cmp	r6, r3
 800ad1a:	ec45 4b11 	vmov	d1, r4, r5
 800ad1e:	dce1      	bgt.n	800ace4 <scalbn+0x6c>
 800ad20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ad48 <scalbn+0xd0>
 800ad24:	f000 f81e 	bl	800ad64 <copysign>
 800ad28:	a307      	add	r3, pc, #28	; (adr r3, 800ad48 <scalbn+0xd0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	e7e0      	b.n	800acf2 <scalbn+0x7a>
 800ad30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad34:	3236      	adds	r2, #54	; 0x36
 800ad36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	2200      	movs	r2, #0
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <scalbn+0xe8>)
 800ad46:	e7b2      	b.n	800acae <scalbn+0x36>
 800ad48:	c2f8f359 	.word	0xc2f8f359
 800ad4c:	01a56e1f 	.word	0x01a56e1f
 800ad50:	8800759c 	.word	0x8800759c
 800ad54:	7e37e43c 	.word	0x7e37e43c
 800ad58:	43500000 	.word	0x43500000
 800ad5c:	ffff3cb0 	.word	0xffff3cb0
 800ad60:	3c900000 	.word	0x3c900000

0800ad64 <copysign>:
 800ad64:	ec51 0b10 	vmov	r0, r1, d0
 800ad68:	ee11 0a90 	vmov	r0, s3
 800ad6c:	ee10 2a10 	vmov	r2, s0
 800ad70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ad78:	ea41 0300 	orr.w	r3, r1, r0
 800ad7c:	ec43 2b10 	vmov	d0, r2, r3
 800ad80:	4770      	bx	lr
	...

0800ad84 <_init>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	bf00      	nop
 800ad88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8a:	bc08      	pop	{r3}
 800ad8c:	469e      	mov	lr, r3
 800ad8e:	4770      	bx	lr

0800ad90 <_fini>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr
